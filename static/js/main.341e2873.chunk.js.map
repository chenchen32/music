{"version":3,"sources":["api/api.js","components/homePage/views/ImageSlider.js","components/homePage/actions.js","components/homePage/actionTypes.js","components/homePage/views/Home.js","components/playListPage/actions.js","components/playListPage/actionTypes.js","utils.js","components/playListPage/views/PlayListItem.js","components/common/PageSelector.js","components/playListPage/views/PlayList.js","components/playListPage/status.js","components/playListPage/views/TagItem.js","components/playListPage/views/TagSelector.js","components/playListPage/views/PlayListPage.js","components/searchPage/actions.js","components/searchPage/actionTypes.js","components/searchPage/views/SearchBar.js","components/audioController/actions.js","components/audioController/actionTypes.js","components/searchPage/views/SearchItem.js","components/searchPage/views/SearchList.js","components/searchPage/views/SearchPage.js","components/searchPage/status.js","components/playListPage/views/ModalPortal.js","components/NotFound.js","components/Menu.js","components/audioController/views/icon.js","components/audioController/views/AudioController.js","components/audioController/views/SongItem.js","components/audioController/views/SongList.js","components/audioController/views/MusicController.js","components/Footer.js","components/App.js","serviceWorker.js","Store.js","components/homePage/reducer.js","components/searchPage/reducer.js","components/playListPage/reducer.js","components/audioController/reducer.js","index.js"],"names":["MusicApi","_Api","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","queryObj","callback","_queryObj","objectSpread","input","pageSize","page","company","path","concat","get","_queryObj2","category","_queryObj3","albumId","lrcUrl","Api","baseUrl","isPathEqualToUrl","url","args","_args","method","data","r","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","console","log","send","ajax","ImageSlider","props","_this","call","handlerNextImage","bind","assertThisInitialized","autoPlay","stopAutoPlay","handlerClickPoint","images","length","fetchImgInHomePage","step","lengthOfImages","indexOfNextImg","indexOfCurrentImg","changeTheIndexOfImg","event","Number","target","dataset","playNextImage","_this2","timerID","setInterval","clearInterval","index","_this3","widthOfSlider","offset","react_default","a","createElement","className","onMouseOver","onMouseOut","onClick","data-step","style","width","height","transform","map","src","picUrl","alt","getClassNameOfPoints","data-index","Component","connect","state","theState","homePageReducer","dispatch","getImgInHomePage","imgObj","JSON","parse","response","type","Home","views_ImageSlider","playListTagChange","tagName","timeFormat","seconds","m","String","Math","floor","s","saveCurrentSongIndexInLocalStorage","localStorage","setItem","stringify","saveSongToLocalStorage","songInfo","songList","getItem","push","getCurrentSongInfo","currentSongIndex","currentSongExtraInfo","initSongInfo","parseLyric","lyric","oneLyricInfo","indexOfTime","indexOf","oneLyric","slice","time","timeInfo","timeList","split","exp","pow","timeDeFormat","argsFromQuery","query","o","forEach","e","_e$split","_e$split2","slicedToArray","k","v","PlayListItem","_this$props$itemInfo","itemInfo","id","name","coverThumbImgUrl","pixel","list","changeImgResolution","coverImgUrl","data-id","fetchAlbumDetailInfo","title","AlbumId","undefined","albumDetailInfo","playListResult","code","PageSelector","handleChangePage","isPreviousAndNextCanBeClicked","_this$props$selectorI","selectorInfo","totalPage","currentPage","getPageSelector","changePage","pushHistory","_this$props$selectorI2","previousCanBeClicked","nextCanBeClicked","previousClassName","nextClassName","previousAndNext","_previousAndNext","disabled","showMiddleTag","endPage","tagCount","result","i","lastList","startList","changingTagCount","end","unshift","toConsumableArray","PlayList","getSelectorInfo","params","location","search","activeTag","cat","fetchHotPlayList","decodeURI","prevProps","prevState","snapshot","newPage","history","viewBox","cx","cy","fill","views_PlayListItem","common_PageSelector","showHotPlayList","PlayListReducer","playListStatus","hotPlayList","playListLoadSuccess","playListPageChangePage","withRouter","TagItem","toggleShow","rowData","theTagTabs","getClassName","Link","to","tagChange","TagSelector","mainTags","styleTags","languageTags","senceTags","emotionTags","themeTags","mapTagToMain","语种","风格","场景","情感","主题","show","hide","clickOnBlankArea","document","onclick","nativeEvent","stopImmediatePropagation","setState","d","pathname","views_TagItem","PlayListPage","views_TagSelector","views_PlayList","inputChange","SearchBar","fillSearchContentInSearchBar","onSearch","onChange","onKeyPress","searchObj","searchContent","parseUrlGetSearchContent","searchInput","isEqualToOldSearchContent","isAtSearchPage","window","urlObj","getSearchUrl","trim","searchResult","placeholder","onKeyDown","SearchBarReducer","toggleSongListWindow","changeAudioStatus","changePlayMode","modeType","saveCurrentLyricIndex","currentLyricIndex","appendTheSong","deleteTheSong","songIndex","playTheSongInPage","playTheSongInList","playNextSong","loopStep","getLyric","getLyricFromNet","l","lyricList","lyricsArray","_loop","_parseLyric","repeatIndex","findIndex","theLyric","lyricBeforeTranslated","element","translatedLyric","clearTimeRepeat","isNaN","lyricItem","sort","prev","current","parseLyricArray","actions","SearchItem","handlePlay","handleAppend","handlePause","currentSongId","querySelector","play","pause","AudioStatus","isTheSongPlaying","isOdd","getPlayOrPauseButtonSvg","singer","AudioReducer","SearchList","ar","artist","join","privilege","dt","pic","al","lrc","totalCount","songCount","ceil","searchPage","searchData","songs","num","views_SearchItem","dataCleaning","SearchPage","fetchSearchResult","views_SearchList","views_SearchBar","showSearchResult","error","ModalPortal","deleteDetailInfo","descriptionToggle","isAllDescriptionShowed","body","albumStatus","classList","add","remove","deleteItemDetail","fetchedData","artists","duration","album","blurPicUrl","trackCount","albumPageSize","albumCurrentPage","_this$props","start","description","tracks","showAlbumList","albumChangePage","NotFound","Menu","_this$props$searchBar","searchBar","searchPath","menus","text","playList","href","isCurrent","currentPathname","ownProps","previousBtn","nextBtn","volumeBtn","listBtn","AudioController","mapEnglishToChinese","loop","circle","random","isFirstLoad","currentTime","sliding","hover","audio","React","createRef","songSlider","playOrPause","clickToSeek","dragToSeek","AfterDragToSeek","handleHover","changeToPlayNextSong","toggleSongList","addEventListener","currentSongInfo","parseLyricIndex","_this2$props","lengthOfSongList","playMode","deltaTime","theLastLyricTime","lyricInfo","isStart","isNotEnd","currentLyric","getNextLyricIndex","currentSrc","contains","_event$currentTarget$","currentTarget","getBoundingClientRect","left","clientX","isRunning","isFirstDrag","persist","requestAnimationFrame","seek","_this$songSlider$curr","dragPosition","toggle","modeList","nextModeType","_this4","mode","_this$state","_this$props$currentSo","playModeTitle","showSongListWindow","ref","draggable","onDrag","onDragEnd","icon","data-mode","SongItem","_this$props$songInfo","color","SongList","backgroundImage","views_SongItem","div","scrollLyricList","scrollTop","MusicController","views_AudioController","views_SongList","Footer","App","BrowserRouter","Fragment","components_Menu","Switch","Route","exact","component","components_Footer","audioController_views_MusicController","views_ModalPortal","Boolean","hostname","match","initValue","loadSongListInLocalStorage","loadCurrentSongIndexInLocalStorage","reducerObj","action","cloneList","every","deleteSongIndex","listLength","splice","deleteSongInLocalStorage","justOneSong","isCurrentSong","isTheLastSong","beforeCurrentSong","updateCurrentSongIndex","updateCurrentLyric","song","LengthOfSongList","nextSongIndex","parseInt","reducer","combineReducers","middleware","thunkMiddleware","storeEnhancers","composeWithDevTools","applyMiddleware","Store","createStore","ReactDOM","render","es","store","src_components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.341e2873.chunk.js","sourcesContent":["const ajax = function(args, callback) {\r\n    let {method, url, data} = {...args}\r\n    let r = new XMLHttpRequest()\r\n    r.open(method, url, true)\r\n    // r.setRequestHeader('Content-Type', 'application/json')\r\n    r.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\r\n    r.onreadystatechange = () => {\r\n        if (r.readyState === 4) {\r\n            if ((r.status >= 200 && r.status < 300) || r.status === 304) {\r\n                callback(r)\r\n            } else {\r\n                console.log('error')\r\n            }\r\n        }\r\n    }\r\n    r.send(data)\r\n}\r\n\r\nclass Api {\r\n    constructor() {\r\n        // this.baseUrl = 'https://api.itooi.cn/music/'\r\n        this.baseUrl = 'https://v1.itooi.cn/'\r\n    }\r\n\r\n    get(path, callback, isPathEqualToUrl) {\r\n        let method = 'GET'\r\n        let url = this.baseUrl + path\r\n        if (isPathEqualToUrl) {\r\n            url = path\r\n        }\r\n        let args = {\r\n            method,\r\n            url,\r\n            data: null,\r\n        }\r\n        ajax(args, callback)\r\n    }\r\n}\r\n\r\nexport class MusicApi extends Api {\r\n    searchResult(queryObj, callback) {\r\n        let {input, pageSize, page, company} = {...queryObj}\r\n        // let path = `${company}/search?key=579621905&s=${input}&type=song&limit=${limit}&offset=${offset}`\r\n        let path = `${company}/search?keyword=${input}&type=song&pageSize=${pageSize}&page=${(page - 1) * pageSize}`\r\n        // 如果需要源数据，加上 &format=1\r\n        this.get(path, callback)\r\n    }\r\n\r\n    hotPlayList(queryObj, callback) {\r\n        let {category, pageSize, page, company} = {...queryObj}\r\n        // let path = `${company}/hotSongList?key=579621905&cat=${category}&limit=${limit}&offset=${offset}`\r\n        let path = `${company}/songList/hot?categoryType=${category}&pageSize=${pageSize}&page=${(page - 1) * pageSize}`\r\n        this.get(path, callback)\r\n    }\r\n\r\n    albumDetailInfo(queryObj, callback) {\r\n        let {albumId, company} = {...queryObj}\r\n        let path = `${company}/songList?id=${albumId}`\r\n        this.get(path, callback)\r\n    }\r\n\r\n    getLyric(lrcUrl, callback) {\r\n        this.get(lrcUrl, callback, true)\r\n    }\r\n\r\n    getImgInHomePage(callback) {\r\n        let url = 'https://v1.itooi.cn/netease/banner'\r\n        this.get(url, callback, true)\r\n    }\r\n}","import React, { Component } from \"react\"\r\nimport {connect} from 'react-redux'\r\nimport {fetchImgInHomePage, changeTheIndexOfImg} from '../actions'\r\n\r\nclass ImageSlider extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handlerNextImage = this.handlerNextImage.bind(this)\r\n        this.autoPlay = this.autoPlay.bind(this)\r\n        this.stopAutoPlay = this.stopAutoPlay.bind(this)\r\n        this.handlerClickPoint = this.handlerClickPoint.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.images.length === 0) {\r\n            this.props.fetchImgInHomePage()\r\n        }\r\n        this.autoPlay()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stopAutoPlay()\r\n    }\r\n\r\n    playNextImage(step) {\r\n        let lengthOfImages = this.props.images.length\r\n        let indexOfNextImg = (this.props.indexOfCurrentImg + step + lengthOfImages) % lengthOfImages\r\n        this.props.changeTheIndexOfImg(indexOfNextImg)\r\n    }\r\n\r\n    handlerNextImage(event) {\r\n        let step = Number(event.target.dataset.step)\r\n        this.playNextImage(step)\r\n    }\r\n\r\n    autoPlay() {\r\n        this.timerID = setInterval(() => {\r\n            this.playNextImage(1)\r\n        }, 5000)\r\n    }\r\n\r\n    stopAutoPlay() {\r\n        clearInterval(this.timerID)\r\n    }\r\n\r\n    getClassNameOfPoints(index) {\r\n        return index === this.props.indexOfCurrentImg? 'slide-point active-point' : 'slide-point'\r\n    }\r\n\r\n    handlerClickPoint(event) {\r\n        let index = Number(event.target.dataset.index)\r\n        this.props.changeTheIndexOfImg(index)\r\n    }\r\n\r\n    render() {\r\n        let widthOfImg = 730\r\n        let heightOfSlider = 336\r\n        let images = this.props.images || []\r\n        let widthOfSlider = images.length * widthOfImg\r\n        let offset = -(this.props.indexOfCurrentImg % widthOfSlider) * widthOfImg || 0\r\n        return(\r\n            <div className='image-slider' onMouseOver={this.stopAutoPlay} onMouseOut={this.autoPlay}>\r\n                <button className='slide-button slide-left vertical-center' onClick={this.handlerNextImage} data-step=\"-1\">&lt;</button>\r\n                {/*<div className='image-slider-container' style={{width: widthOfSlider, height: heightOfSlider, left: offset}}>*/}\r\n                <div className='image-slider-container' style={{width: widthOfSlider, height: heightOfSlider, transform: `translate3d(${offset}px, 0px, 0px)`}}>\r\n                    {\r\n                        images.map((value, index) => {\r\n                            return (\r\n                                <img key={index} src={value.picUrl} alt=\"轮播图\" />\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                <button className='slide-button slide-right vertical-center' onClick={this.handlerNextImage} data-step=\"1\">&gt;</button>\r\n                <div className='slide-point-container'>\r\n                    {\r\n                        images.map((value, index) => {\r\n                            return (\r\n                                <span className={this.getClassNameOfPoints(index)} key={index} data-index={index} onClick={this.handlerClickPoint}> </span>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.homePageReducer\r\n    return {\r\n        images: theState.images,\r\n        indexOfCurrentImg: theState.indexOfCurrentImg,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchImgInHomePage: () => {\r\n            dispatch(fetchImgInHomePage())\r\n        },\r\n        changeTheIndexOfImg: (index) => {\r\n            dispatch(changeTheIndexOfImg(index))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageSlider)","import * as homePage from './actionTypes'\r\nimport {MusicApi} from '../../api/api.js'\r\n\r\nexport const getImgInHomePage = (imgObj) => ({\r\n    type: homePage.GET_HOMEPAGE_IMG,\r\n    imgObj,\r\n})\r\n\r\nexport const changeTheIndexOfImg = (index) => ({\r\n    type: homePage.CHANGE_THE_INDEX_OF_IMG,\r\n    index,\r\n})\r\n\r\nexport const fetchImgInHomePage = () => {\r\n    return (dispatch) => {\r\n        let api = new MusicApi()\r\n        api.getImgInHomePage((r) => {\r\n            let imgObj = JSON.parse(r.response).data\r\n            dispatch(getImgInHomePage(imgObj))\r\n            console.log('轮播图信息', imgObj)\r\n        })\r\n    }\r\n}","export const GET_HOMEPAGE_IMG = 'HOMEPAGE/GET_IMG'\r\nexport const CHANGE_THE_INDEX_OF_IMG = 'HOMEPAGE/CHANGE_THE_INDEX_OF_IMG'","import React, { Component } from 'react'\nimport ImageSlider from \"./ImageSlider\"\nimport './Home.css'\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <ImageSlider />\n            </div>\n        )\n    }\n}\n\nexport default Home\n","import * as playList from './actionTypes.js'\r\nimport {MusicApi} from '../../api/api.js'\r\n\r\n// 热门歌单标签切换\r\nexport const playListTagChange = (tagName) => ({\r\n    type: playList.PLAYLIST_TAG_CHANGE,\r\n    tagName\r\n    })\r\n\r\n// 开始加载歌单具体信息\r\nexport const loadItemDetailStarted = () => ({\r\n    type: playList.LOAD_ITEM_DETAIL_STARTED,\r\n})\r\n\r\n// 加载歌单具体信息成功\r\nexport const loadItemDetailSuccess = (albumDetailInfo) => ({\r\n    type: playList.LOAD_ITEM_DETAIL_SUCCESS,\r\n    albumDetailInfo\r\n})\r\n\r\n// 删除歌单具体信息，即初始化模态弹窗\r\nexport const deleteItemDetail = () => ({\r\n    type: playList.DELETE_ITEM_DETAIL,\r\n})\r\n\r\n// 热门歌单列表开始加载\r\nexport const playListLoadStarted = () => ({\r\n    type: playList.PLAYLIST_LOAD_STARTED,\r\n})\r\n\r\n// 热门歌单列表加载成功\r\nexport const playListLoadSuccess = (playListResult) => ({\r\n    type: playList.PLAYLIST_LOAD_SUCCESS,\r\n    playListResult,\r\n})\r\n\r\n// 热门歌单列表加载成功\r\nexport const playListLoadFailure = () => ({\r\n    type: playList.PLAYLIST_LOAD_FAILURE,\r\n})\r\n\r\nexport const playListPageChangePage = (page) => ({\r\n    type: playList.PLAYLIST_PAGE_CHANGE,\r\n    page,\r\n})\r\n\r\nexport const albumChangePage = (page) => ({\r\n    type: playList.ALBUM_PAGE_CHANGE,\r\n    page,\r\n})\r\n\r\n// 异步加载热门歌单列表\r\nexport const fetchHotPlayList = (category=\"全部\", page=1, pageSize=60, company='netease') => {\r\n    return (dispatch) => {\r\n        let queryObj = {\r\n            category,\r\n            pageSize,\r\n            page,\r\n            company,\r\n        }\r\n        dispatch(playListLoadStarted())\r\n        let api = new MusicApi()\r\n        api.hotPlayList(queryObj, (r) => {\r\n            let playListResult = JSON.parse(r.response)\r\n            console.log('加载热门歌单列表完成', playListResult)\r\n            if (playListResult.code === 200) {\r\n                dispatch(playListLoadSuccess(playListResult.data))\r\n            } else {\r\n                dispatch(playListLoadFailure())\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n// 加载歌单具体信息\r\nexport const fetchAlbumDetailInfo = (albumId, company='netease') => {\r\n    console.log('albumId', albumId)\r\n    return (dispatch) => {\r\n        let args = {\r\n            albumId,\r\n            company,\r\n        }\r\n        dispatch(loadItemDetailStarted())\r\n        let api = new MusicApi()\r\n        api.albumDetailInfo(args, (r) => {\r\n            let playListResult = JSON.parse(r.response)\r\n            console.log('加载歌单完成', playListResult)\r\n            if (playListResult.code === 200) {\r\n                dispatch(loadItemDetailSuccess(playListResult))\r\n            } else {\r\n                dispatch(playListLoadFailure())\r\n            }\r\n        })\r\n    }\r\n}","export const PLAYLIST_TAG_CHANGE = \"PAGE/PLAYLIST_TAG_CHANGE\"\r\n\r\nexport const LOAD_ITEM_DETAIL_STARTED = \"PAGE/LOAD_ITEM_DETAIL_STARTED\"\r\n\r\nexport const LOAD_ITEM_DETAIL_SUCCESS = \"PAGE/LOAD_ITEM_DETAIL_SUCCESS\"\r\n\r\nexport const DELETE_ITEM_DETAIL = 'PAGE/DELETE_ITEM_DETAIL'\r\n\r\nexport const PLAYLIST_LOAD_STARTED = 'PAGE/PLAYLIST_LOAD_STARTED'\r\n\r\nexport const PLAYLIST_LOAD_SUCCESS = 'PAGE/LIST_LOAD_SUCCESS'\r\n\r\nexport const PLAYLIST_LOAD_FAILURE = 'PAGE/PLAYLIST_LOAD_FAILURE'\r\n\r\nexport const PLAYLIST_PAGE_CHANGE = 'PAGE/PLAYLIST_PAGE_CHANGE'\r\n\r\nexport const ALBUM_PAGE_CHANGE = 'PAGE/ALBUM_PAGE_CHANGE'","export const timeFormat = function(seconds) {\r\n    if (!seconds) {\r\n        return '00:00'\r\n    }\r\n    let m = String(Math.floor(seconds / 60))\r\n    let s = String(Math.floor(seconds % 60))\r\n    if (s.length === 1) {\r\n        s = \"0\" + s\r\n    }\r\n    if (m.length === 1) {\r\n        m = \"0\" + m\r\n    }\r\n    return `${m}:${s}`\r\n}\r\n\r\nexport const timeDeFormat = (timeInfo) => {\r\n    let timeList = timeInfo.split(':')\r\n    let length = timeList.length\r\n    let time = 0\r\n    timeList.map((value, index) => {\r\n        let exp = length - index - 1\r\n        time += value * 60 ** exp\r\n        return 0\r\n    })\r\n    return time\r\n}\r\n\r\nexport const loadCurrentSongIndexInLocalStorage = () => {\r\n    let currentSongIndex = JSON.parse(localStorage.getItem('currentSongIndex'))\r\n    if (currentSongIndex === null) {\r\n        currentSongIndex = -1\r\n    }\r\n    return currentSongIndex\r\n}\r\n\r\nexport const saveCurrentSongIndexInLocalStorage = (index) => {\r\n    localStorage.setItem('currentSongIndex', JSON.stringify(index))\r\n}\r\n\r\nexport const loadSongListInLocalStorage = () => {\r\n    let songList = JSON.parse(localStorage.getItem('songList'))\r\n    if (songList === null) {\r\n        songList = []\r\n    }\r\n    return songList\r\n}\r\n\r\nexport const saveSongToLocalStorage = (songInfo) => {\r\n    let songList = JSON.parse(localStorage.getItem('songList'))\r\n    if (songList === null) {\r\n        songList = []\r\n    }\r\n    songList.push(songInfo)\r\n    localStorage.setItem('songList', JSON.stringify(songList))\r\n}\r\n\r\nexport const deleteSongInLocalStorage = (songIndex) => {\r\n    let songList = JSON.parse(localStorage.getItem('songList'))\r\n    songList.splice(songIndex, 1)\r\n    localStorage.setItem('songList', JSON.stringify(songList))\r\n}\r\n\r\nexport const getCurrentSongInfo = (theState) => {\r\n    let songList = theState.songList\r\n    let currentSongIndex = theState.currentSongExtraInfo.currentSongIndex\r\n    let currentSongInfo = {}\r\n    if (currentSongIndex === -1) {\r\n        currentSongInfo = theState.initSongInfo\r\n    } else {\r\n        currentSongInfo = songList[currentSongIndex]\r\n    }\r\n    return currentSongInfo\r\n}\r\n\r\nconst clearTimeRepeat = (lyricList, repeatIndex, lyricBeforeTranslated) => {\r\n    let result = lyricList\r\n    let element = result[repeatIndex].lyric\r\n    if (element === '...') {\r\n        result[repeatIndex].lyric = lyricBeforeTranslated\r\n    } else {\r\n        result[repeatIndex].translatedLyric = element\r\n        result[repeatIndex].lyric = lyricBeforeTranslated\r\n    }\r\n}\r\n\r\nconst parseLyric = (lyric) => {\r\n    let oneLyricInfo = lyric\r\n    let indexOfTime = oneLyricInfo.indexOf(']')\r\n    let oneLyric = oneLyricInfo.slice(indexOfTime + 1)\r\n    let timeInfo = oneLyricInfo.slice(1, indexOfTime)\r\n    let time = timeDeFormat(timeInfo)\r\n    return {\r\n        oneLyric,\r\n        time\r\n    }\r\n}\r\n\r\nexport const parseLyricArray = (lyricsArray) => {\r\n    let result = []\r\n    for (let i = 0; i < lyricsArray.length; i++) {\r\n        let oneLyricInfo = lyricsArray[i]\r\n        let {oneLyric, time} = parseLyric(oneLyricInfo)\r\n        let repeatIndex = result.findIndex((theLyric) => {\r\n            return theLyric.time === time\r\n        })\r\n        let isTimeRepeat = repeatIndex !== -1\r\n        if (isTimeRepeat) {\r\n            clearTimeRepeat(result, repeatIndex, oneLyric)\r\n        } else {\r\n            if (isNaN(time)) {\r\n                continue\r\n            }\r\n            if (oneLyric === '') {\r\n                oneLyric = '...'\r\n            }\r\n            let lyricItem = {\r\n                time,\r\n                lyric: oneLyric,\r\n                translatedLyric: null,\r\n            }\r\n            result.push((lyricItem))\r\n        }\r\n    }\r\n    result.sort((prev, current) => prev.time - current.time)\r\n    return result\r\n}\r\n\r\nexport const argsFromQuery = (query) => {\r\n    if (query[0] === '?') {\r\n        query = query.slice(1)\r\n    }\r\n    let o = {}\r\n    if (query.length === 0) {\r\n        return o\r\n    }\r\n    query.split('&').forEach(e => {\r\n        let [k, v] = e.split('=')\r\n        o[k] = v\r\n    })\r\n    return o\r\n}\r\n\r\nexport const changeImgResolution = (url, pixel) => {\r\n    let list = url.split('?')\r\n    return `${list[0]}?param=${pixel}y${pixel}`\r\n}","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {fetchAlbumDetailInfo} from '../actions'\r\nimport {changeImgResolution} from '../../../utils'\r\n\r\nclass PlayListItem extends Component {\r\n\r\n    render() {\r\n        let {id, name, coverImgUrl} = {...this.props.itemInfo}\r\n        let coverThumbImgUrl = changeImgResolution(coverImgUrl, 400)\r\n        return (\r\n            <div className=\"album-container\">\r\n                <div className=\"album-img\" data-id={id} onClick={this.props.fetchAlbumDetailInfo.bind(this, id)}>\r\n                    <img src={coverThumbImgUrl} alt=\"歌单封面\"/>\r\n                </div>\r\n                <div className=\"album-info\" title={name}>\r\n                    <span>{name}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchAlbumDetailInfo: (AlbumId) => {\r\n            dispatch(fetchAlbumDetailInfo(AlbumId))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(PlayListItem)","import React, {Component} from 'react'\r\nimport './common.css'\r\n\r\nclass PageSelector extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handleChangePage = this.handleChangePage.bind(this)\r\n        this.isPreviousAndNextCanBeClicked = this.isPreviousAndNextCanBeClicked.bind(this)\r\n    }\r\n\r\n    static getPageSelector (endPage, currentPage, tagCount) {\r\n        if (endPage <= tagCount) {\r\n            let result = []\r\n            for (let i = 1; i <= endPage; i++) {\r\n                result.push(i)\r\n            }\r\n            return result\r\n        }\r\n        let list = []\r\n        let lastList = []\r\n        let startList = []\r\n        let changingTagCount = tagCount - 3\r\n        let start = currentPage - changingTagCount/ 2\r\n        let end = currentPage + changingTagCount / 2\r\n        for (let i = start; i <= end; i++) {\r\n            if (i <= 1) {\r\n                lastList.push(changingTagCount + i + 1)\r\n            } else if (i >= endPage) {\r\n                startList.push(i - changingTagCount - 1)\r\n            } else {\r\n                list.push(i)\r\n            }\r\n        }\r\n        let result = [...startList,...list,...lastList]\r\n        if (result[0] !== 2) {\r\n            result.unshift('...')\r\n        }\r\n        if (result[result.length - 1] < endPage - 1) {\r\n            result.push('...')\r\n        }\r\n        result = [1, ...result, endPage]\r\n        return result\r\n    }\r\n\r\n    showMiddleTag() {\r\n        let {totalPage, currentPage} = {...this.props.selectorInfo}\r\n        if (totalPage === 0) {\r\n            return\r\n        }\r\n        let pageList = PageSelector.getPageSelector(totalPage, currentPage, 9)\r\n        return pageList.map((page, index) => {\r\n            if (page === '...') {\r\n                return (\r\n                    <span className=\"page-selector-ellipsis\" key={index}>...</span>\r\n                )\r\n            } else if (page === currentPage) {\r\n                return (\r\n                    <button className=\"page-selector-current page-selector-tag page-btn\" key={index}>{page}</button>\r\n                )\r\n            } else {\r\n                return (\r\n                    <button className=\"page-selector-tag page-btn\" key={index} onClick={this.handleChangePage(page)}>{page}</button>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    handleChangePage(page) {\r\n        return () => {\r\n            this.props.changePage(page)\r\n            if (this.props.pushHistory) {\r\n                this.props.pushHistory(page)\r\n            }\r\n        }\r\n    }\r\n\r\n    isPreviousAndNextCanBeClicked() {\r\n        let {totalPage, currentPage} = {...this.props.selectorInfo}\r\n        let previousCanBeClicked = false\r\n        let nextCanBeClicked = false\r\n        if (totalPage === 1) {\r\n            previousCanBeClicked = true\r\n            nextCanBeClicked = true\r\n        }\r\n        if (currentPage === 1) {\r\n            previousCanBeClicked = true\r\n        } else if (currentPage === totalPage) {\r\n            nextCanBeClicked = true\r\n        }\r\n        let previousClassName = previousCanBeClicked ? 'previous-ban-click' : 'previous-can-click'\r\n        let nextClassName = nextCanBeClicked ? 'next-ban-click' : 'next-can-click'\r\n        return {\r\n            previousCanBeClicked,\r\n            nextCanBeClicked,\r\n            previousClassName,\r\n            nextClassName,\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {currentPage} = {...this.props.selectorInfo}\r\n        let previousAndNext = this.isPreviousAndNextCanBeClicked()\r\n        let {previousCanBeClicked, nextCanBeClicked, previousClassName, nextClassName} = {...previousAndNext}\r\n        return (\r\n            <div className=\"page-selector\">\r\n                <button className={`${previousClassName} page-btn`} disabled={previousCanBeClicked} onClick={this.handleChangePage(currentPage - 1)}>&lt;</button>\r\n                {this.showMiddleTag()}\r\n                <button className={`${nextClassName} page-btn`} disabled={nextCanBeClicked} onClick={this.handleChangePage(currentPage + 1)}>&gt;</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PageSelector","import React, { Component } from 'react'\r\nimport * as Status from '../status'\r\nimport {connect} from 'react-redux'\r\nimport {fetchHotPlayList, playListTagChange, playListPageChangePage} from '../actions'\r\nimport {withRouter} from 'react-router-dom'\r\nimport PlayListItem from './PlayListItem'\r\nimport {argsFromQuery} from '../../../utils'\r\nimport PageSelector from '../../common/PageSelector'\r\n\r\nclass PlayList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.pushHistory = this.pushHistory.bind(this)\r\n        this.getSelectorInfo = this.getSelectorInfo.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.status !== 'success') {\r\n            let params = argsFromQuery(this.props.location.search)\r\n            let activeTag = params.cat\r\n            let page = params.page\r\n            this.props.fetchHotPlayList(activeTag, page)\r\n            this.props.playListTagChange(decodeURI(activeTag))\r\n            this.props.changePage(page)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.location !== prevProps.location) {\r\n            let params = argsFromQuery(this.props.location.search)\r\n            let activeTag = params.cat\r\n            let page = params.page\r\n            this.props.fetchHotPlayList(activeTag, page)\r\n        }\r\n    }\r\n\r\n    pushHistory(newPage) {\r\n        this.props.history.push(`playlist?cat=${this.props.activeTag}&page=${newPage}`)\r\n    }\r\n\r\n    getSelectorInfo() {\r\n        return {\r\n            totalPage: this.props.totalPage,\r\n            currentPage: Number(this.props.currentPage),\r\n        }\r\n    }\r\n\r\n    showHotPlayList() {\r\n        switch (this.props.status) {\r\n            case Status.LOADING: {\r\n                return (\r\n                    <div className=\"loading-container\">\r\n                        <svg className=\"load\" viewBox=\"25 25 50 50\">\r\n                            <circle className=\"loading\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\"/>\r\n                        </svg>\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.SUCCESS: {\r\n                let playListResult = this.props.playListResult\r\n                return (\r\n                    <div className=\"playlist-result\">\r\n                        {playListResult.map((value, index) => {\r\n                            return <PlayListItem key={index} itemInfo={value} />\r\n                        })}\r\n                        <PageSelector selectorInfo={this.getSelectorInfo()} changePage={this.props.changePage} pushHistory={this.pushHistory}/>\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.FAILURE: {\r\n                return (\r\n                    <div className=\"failed-container\">热门歌单加载失败</div>\r\n                )\r\n            }\r\n            default: {\r\n                return (\r\n                    <div>PlayList</div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.showHotPlayList()\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        status: theState.playListStatus,\r\n        playListResult: theState.playListResult,\r\n        activeTag: theState.activeTag,\r\n        currentPage: theState.currentPage,\r\n        pageSize: theState.pageSize,\r\n        totalPage: theState.totalPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchHotPlayList: (category, page) => {\r\n            dispatch(fetchHotPlayList(category, page))\r\n        },\r\n        playListTagChange: (tagName) => {\r\n            dispatch(playListTagChange(tagName))\r\n        },\r\n        changePage: (page) => {\r\n            dispatch(playListPageChangePage(page))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(withRouter(PlayList))","export const INIT = ''\r\nexport const LOADING = 'loading'\r\nexport const SUCCESS = 'success'\r\nexport const FAILURE = 'failure'","import React, { Component } from 'react'\r\nimport {Link} from \"react-router-dom\"\r\nimport {connect} from 'react-redux'\r\nimport {playListTagChange} from \"../actions\"\r\n\r\nclass TagItem extends Component {\r\n\r\n    tagChange(value) {\r\n        this.props.playListTagChange(value)\r\n        this.props.toggleShow()\r\n    }\r\n\r\n    getClassName(value) {\r\n        return this.props.activeTag === value ? \"playlist-tag active-tag\" : \"playlist-tag\"\r\n    }\r\n\r\n    getTagTable(i) {\r\n        let rowData = this.props.theTagTabs.slice(i, i + 6)\r\n        return (\r\n            <tbody key={i}>\r\n                <tr>\r\n                    {rowData.map((value, index) => {\r\n                        return (\r\n                            <td key={index} className={this.getClassName(value)}>\r\n                                <Link  to={`/playlist?cat=${value}`} onClick={this.tagChange.bind(this, value)}>{value}</Link>\r\n                            </td>\r\n                        )\r\n                    })}\r\n                </tr>\r\n            </tbody>\r\n         )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"playlist-tag-tabs\">\r\n                {this.props.theTagTabs.map((value, index) => {\r\n                    return (\r\n                            <Link key={index} className={this.getClassName(value)} to={`/playlist?cat=${value}&page=1`} onClick={this.tagChange.bind(this, value)}>{value}</Link>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        activeTag: theState.activeTag\r\n    }\r\n}\r\n\r\nconst mapDispatchTopProps = (dispatch) => {\r\n    return {\r\n        playListTagChange: (tagName) => {\r\n            dispatch(playListTagChange(tagName))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchTopProps)(TagItem)","import React, { Component } from 'react'\r\nimport {playListTagChange} from '../actions'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\"\r\nimport TagItem from './TagItem'\r\n\r\nclass TagSelector extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.mainTags = ['语种', '风格', '场景', '情感', '主题']\r\n        this.styleTags = ['流行', '摇滚', '民谣', '电子', '舞曲', '说唱', '轻音乐', '爵士', '乡村', 'R&B/Soul', '古典', '民族', '英伦', '金属', '朋克', '蓝调', '雷鬼', '拉丁', '古风', 'Bossa Nova']\r\n        this.languageTags = ['华语', '欧美', '日语', '韩语', '粤语', '小语种']\r\n        this.senceTags = ['清晨', '夜晚', '学习', '工作', '午休', '下午茶', '地铁', '驾车', '运动', '旅行', '散步', '酒吧']\r\n        this.emotionTags = ['怀旧', '清新', '浪漫', '性感', '伤感', '治愈', '放松', '孤独', '感动', '兴奋', '快乐', '安静', '思念']\r\n        this.themeTags = ['影视原声', 'ACG', '儿童', '校园', '游戏', '70后', '80后', '90后', '网络歌曲', 'KTV', '经典', '翻唱', '吉他', '钢琴', '器乐', '榜单', '00后']\r\n        this.mapTagToMain = {\r\n            '语种': this.languageTags,\r\n            '风格': this.styleTags,\r\n            '场景': this.senceTags,\r\n            '情感': this.emotionTags,\r\n            '主题': this.themeTags\r\n        }\r\n        this.state = {\r\n            show: false\r\n        }\r\n\r\n        this.toggleShow = this.toggleShow.bind(this)\r\n        this.hide = this.hide.bind(this)\r\n        this.clickOnBlankArea = this.clickOnBlankArea.bind(this)\r\n        document.onclick=this.hide\r\n    }\r\n\r\n    tagChange(value) {\r\n        this.props.playListTagChange(value)\r\n        this.toggleShow()\r\n    }\r\n\r\n    clickOnBlankArea(e) {\r\n        e.nativeEvent.stopImmediatePropagation()\r\n    }\r\n\r\n    toggleShow(e) {\r\n        this.setState({\r\n            show: !this.state.show\r\n        })\r\n        if (e !== undefined) {\r\n            e.nativeEvent.stopImmediatePropagation()\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        this.setState({\r\n            show: false\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.setState = () => {\r\n            return 0\r\n        }\r\n    //  防止组件卸载的时候调用 setState 导致 react 报错\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"playlist-tags\">\r\n                <span className=\"active-tag-name\" >{this.props.activeTag}</span>\r\n                <span className=\"select-tag-button\" onClick={this.toggleShow}>\r\n                    {this.state.show ? '收起 ' : '展开 '}\r\n                    <svg className={this.state.show ? \"select-icon rotated\" : \"select-icon\"} viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M127.5 330.9l0.7-0.7c12.3-12.3 32.4-12.3 44.7 0l339.9 339.9L853 330c12.5-12.5 32.9-12.5 45.4 0s12.5 32.9 0 45.4L536 737.8s-0.1 0.1-0.1 0.2l-0.7 0.7c-12.3 12.3-32.4 12.3-44.7 0l-363-363c-12.3-12.4-12.3-32.5 0-44.8z\">\r\n                        </path>\r\n                    </svg>\r\n                </span>\r\n                <div className={this.state.show ? \"playlist-tags-container\" : \"playlist-tags-container hidden\"} onClick={this.clickOnBlankArea}>\r\n                    <Link className={this.props.activeTag === '全部' ? \"playlist-main-tag active-tag\" : \"playlist-main-tag\"} to={{pathname: 'playlist', search: '?cat=全部&page=1'}} onClick={this.tagChange.bind(this, '全部')}>全部</Link>\r\n                    {this.mainTags.map((value, index) => {\r\n                        let theTagTabs = this.mapTagToMain[value]\r\n                        return(\r\n                            <div key={index} className=\"playlist-tag-container\">\r\n                                <div className=\"playlist-tag-class\">{value}</div>\r\n                                <TagItem theTagTabs={theTagTabs} toggleShow={this.toggleShow}/>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        activeTag: theState.activeTag\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        playListTagChange: (tagName) => {\r\n            dispatch(playListTagChange(tagName))\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(TagSelector)","import React, { Component } from 'react'\nimport PlayList from './PlayList'\nimport TagSelector from \"./TagSelector\"\nimport './playListPage.css'\n\nclass PlayListPage extends Component {\n\n    render() {\n        return (\n            <div className=\"playlist-content\">\n                <TagSelector />\n                <PlayList />\n            </div>\n        )\n    }\n}\n\nexport default PlayListPage\n","import * as search from './actionTypes.js'\r\nimport {MusicApi} from '../../api/api.js'\r\n\r\n// 搜索框输入改变\r\nexport const inputChange = (input) => ({\r\n    type: search.INPUT_CHANGE,\r\n    input,\r\n})\r\n\r\n// 开始搜索\r\nexport const searchStarted = (data) => ({\r\n    type: search.SEARCH_STARTED,\r\n    data,\r\n})\r\n\r\n// 搜索成功\r\nexport const searchSuccess = (result, searchContent, searchPage) => ({\r\n    type: search.SEARCH_SUCCESS,\r\n    result,\r\n    searchContent,\r\n    searchPage,\r\n})\r\n\r\n// 搜索失败\r\nexport const searchFailure = (error) => ({\r\n    type: search.SEARCH_FAILURE,\r\n    error,\r\n})\r\n\r\nexport const changePage = (page) => ({\r\n    type: search.CHANGE_PAGE,\r\n    page\r\n})\r\n\r\n// 拿到搜索数据\r\nexport const fetchSearchResult = (input, page=1, pageSize=20, company='netease') => {\r\n    return (dispatch) => {\r\n        let queryObj = {\r\n            input,\r\n            pageSize,\r\n            page,\r\n            company,\r\n        }\r\n        dispatch(searchStarted(input))\r\n        let api = new MusicApi()\r\n        api.searchResult(queryObj, (r) => {\r\n            let searchResult = JSON.parse(r.response)\r\n            console.log('搜索完成', searchResult)\r\n            if (searchResult.code === 200) {\r\n                dispatch(searchSuccess(searchResult, queryObj.input, page))\r\n            } else {\r\n                dispatch(searchFailure(searchResult))\r\n            }\r\n        })\r\n    }\r\n}","export const INPUT_CHANGE = 'NAV/INPUT_CHANGE'\r\n\r\nexport const SEARCH_STARTED = 'NAV/SEARCH_STARTED'\r\n\r\nexport const SEARCH_SUCCESS = 'NAV/SEARCH_SUCCESS'\r\n\r\nexport const SEARCH_FAILURE = 'NAV/SEARCH_FAILURE'\r\n\r\nexport const CHANGE_PAGE = 'PAGE/CHANGE_PAGE'","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport  {inputChange} from '../actions'\r\nimport {withRouter} from \"react-router-dom\"\r\nimport {argsFromQuery} from \"../../../utils\"\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.fillSearchContentInSearchBar()\r\n\r\n        this.onSearch = this.onSearch.bind(this)\r\n        this.onChange = this.onChange.bind(this)\r\n        this.onKeyPress = this.onKeyPress.bind(this)\r\n    }\r\n\r\n    parseUrlGetSearchContent(location) {\r\n        let searchObj = argsFromQuery(location.search)\r\n        let searchContent = decodeURI(searchObj['s'])\r\n        if (searchContent !== undefined) {\r\n            return searchContent\r\n        }\r\n    }\r\n\r\n    fillSearchContentInSearchBar() {\r\n        this.value = this.parseUrlGetSearchContent(this.props.location)\r\n        if (this.value === 'undefined') {\r\n            this.value = ''\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.location.search !== this.props.location.search) {\r\n            this.value = this.parseUrlGetSearchContent(this.props.location)\r\n        }\r\n    }\r\n\r\n    onChange(event) {\r\n        this.value = event.target.value\r\n        this.props.inputChange(this.value)\r\n    }\r\n\r\n    onSearch() {\r\n        let hasInputted = this.props.searchInput === undefined || this.props.searchInput === ''\r\n        if (hasInputted) {\r\n            return 0\r\n        }\r\n        let isEqualToOldSearchContent = this.props.searchContent !== this.props.searchInput\r\n        let isAtSearchPage = window.location.pathname !== '/search'\r\n        if (isEqualToOldSearchContent || isAtSearchPage) {\r\n            let urlObj = this.getSearchUrl()\r\n            this.props.history.push(urlObj)\r\n        }\r\n    }\r\n\r\n    getSearchUrl() {\r\n        console.log('this.props.searchInput', this.props.searchInput)\r\n        let name = this.props.searchInput.trim()\r\n        if (name === undefined) {\r\n            name = ''\r\n        }\r\n        let page = 1\r\n        return {\r\n            pathname: '/search',\r\n            search: `?s=${name}&page=${page}`,\r\n        }\r\n    }\r\n\r\n    onKeyPress(event) {\r\n        if (event.key === 'Enter') {\r\n            this.onSearch()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className={(this.props.searchResult === undefined) ? \"search-bar-container before-searched\" : \"search-bar-container\"}>\r\n                <input type=\"text\" className=\"search-bar-input\" placeholder=\"搜索音乐、MV、歌单、用户\" onChange={this.onChange} onKeyDown={this.onKeyPress} value={this.value || ''}/>\r\n                <button className=\"search-bar-button\" onClick={this.onSearch}>搜索</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.SearchBarReducer\r\n    return {\r\n        searchInput: theState.searchInput,\r\n        searchContent: theState.searchContent,\r\n        searchResult: theState.searchResult,\r\n        status: theState.status,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        inputChange:  (input) => {\r\n            dispatch(inputChange(input))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(withRouter(SearchBar))","import * as audioController from './actionTypes'\r\nimport {MusicApi} from '../../api/api.js'\r\nimport {parseLyricArray} from '../../utils'\r\n\r\nexport  const toggleSongListWindow = () => {\r\n    return {\r\n        type: audioController.TOGGLE_SONG_LIST_WINDOW,\r\n    }\r\n}\r\n\r\nexport const changeAudioStatus = (status) => {\r\n    return {\r\n        type: audioController.CHANGE_AUDIO_STATUS,\r\n        status\r\n    }\r\n}\r\n\r\nexport const changePlayMode = (modeType) => {\r\n    return {\r\n        type: audioController.CHANGE_PLAY_MODE,\r\n        modeType,\r\n    }\r\n}\r\n\r\nexport const saveCurrentLyricIndex = (currentLyricIndex) => {\r\n    return {\r\n        type: audioController.GET_CURRENT_INDEX,\r\n        currentLyricIndex,\r\n    }\r\n}\r\n\r\nexport const appendTheSong = (songInfo) => {\r\n    return {\r\n        type: audioController.APPEND_THE_SONG,\r\n        songInfo,\r\n    }\r\n}\r\n\r\nexport const deleteTheSong = (songIndex) => {\r\n    return {\r\n        type: audioController.DELETE_THE_SONG,\r\n        songIndex,\r\n    }\r\n}\r\n\r\nexport const playTheSongInPage = (songInfo) => {\r\n    return {\r\n        type: audioController.PLAY_THE_SONG_IN_PAGE,\r\n        songInfo,\r\n    }\r\n}\r\n\r\nexport const playTheSongInList = (songIndex) => {\r\n    return {\r\n        type: audioController.PLAY_THE_SONG_IN_LIST,\r\n        songIndex,\r\n    }\r\n}\r\n\r\nexport const playNextSong = (modeType, loopStep=1) => {\r\n    return {\r\n        type: audioController.PLAY_NEXT_SONG,\r\n        modeType,\r\n        loopStep,\r\n    }\r\n}\r\n\r\nexport const getLyric = (lyric) => {\r\n    return {\r\n        type: audioController.GET_LYRIC,\r\n        lyric,\r\n    }\r\n}\r\n\r\nexport const getLyricFromNet = (lrcUrl) => {\r\n    return (dispatch) => {\r\n        let api = new MusicApi()\r\n        api.getLyric(lrcUrl, (r) => {\r\n            let l = r.response\r\n            console.log(lrcUrl)\r\n            let lyricList = l.split('\\n').slice(0, -1)\r\n            if (lyricList.length === 0) {\r\n                lyricList = [l]\r\n            }\r\n            let result = parseLyricArray(lyricList)\r\n            dispatch(getLyric(result))\r\n        })\r\n    }\r\n}","export const CHANGE_AUDIO_STATUS = 'BAR/CHANGE_AUDIO_STATUS'\r\n\r\nexport const APPEND_THE_SONG = 'PAGE/APPEND_THE_SONG'\r\n\r\nexport const DELETE_THE_SONG = 'AUDIO/DELETE_THE_SONG'\r\n\r\nexport const PLAY_THE_SONG_IN_PAGE = 'PAGE/PLAY_THE_SONG'\r\n\r\nexport const PLAY_THE_SONG_IN_LIST = 'LIST/PLAY_THE_SONG'\r\n\r\nexport const PLAY_NEXT_SONG = 'AUDIO/PLAY_NEXT_SONG'\r\n\r\nexport const GET_LYRIC = 'AUDIO/GET_LYRIC'\r\n\r\nexport const GET_CURRENT_INDEX = 'AUDIO/GET_CURRENT_INDEX'\r\n\r\nexport const CHANGE_PLAY_MODE = 'AUDIO/CHANGE_PLAY_MODE'\r\n\r\nexport  const TOGGLE_SONG_LIST_WINDOW = 'AUDIO/TOGGLE_SONG_LIST_WINDOW'","import React, {Component} from 'react'\r\nimport {getCurrentSongInfo, timeFormat} from '../../../utils'\r\nimport {connect} from 'react-redux'\r\nimport {actions} from '../../audioController/'\r\n\r\nconst appendTheSong = actions.appendTheSong\r\nconst playTheSongInPage = actions.playTheSongInPage\r\n\r\nclass SearchItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handlePlay = this.handlePlay.bind(this)\r\n        this.handleAppend = this.handleAppend.bind(this)\r\n        this.handlePause = this.handlePause.bind(this)\r\n    }\r\n\r\n    handlePlay() {\r\n        if (this.props.currentSongId !== this.props.result.id) {\r\n            this.props.playTheSongInPage(this.props.result)\r\n            console.log('this.props.songInfo，第一次放', this.props.result)\r\n        } else {\r\n            let audio = document.querySelector('audio')\r\n            audio.play()\r\n        }\r\n    }\r\n\r\n    handlePause() {\r\n        let audio = document.querySelector('audio')\r\n        audio.pause()\r\n    }\r\n\r\n    getPlayOrPauseButtonSvg() {\r\n        let id = this.props.result.id\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        if (isTheSongPlaying) {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M910.8 303.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S129.8 720.8 129.8 509.2 301.4 126.1 513 126.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C654.6 78.9 585.9 61.5 513 61.5 265.7 61.5 65.3 262 65.3 509.2S265.7 956.9 513 956.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                    <path d=\"M385.4 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.6 0 32-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9zM578.9 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.5 0 31.9-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9z\">\r\n                    </path>\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        } else {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                    <path d=\"M415.8 679.9c5.9 0 11.5-1.6 16.2-4.5l231.1-134.6c10.9-5.2 18.5-16.3 18.5-29.2 0-11.9-6.4-22.3-16-27.8L439.7 352.2c-5.8-6.7-14.4-10.9-23.9-10.9-17.6 0-31.8 14.4-31.8 32.1 0 0.6 0 1.2 0.1 1.8l-0.4 0.2 0.5 269c-0.1 1.1-0.2 2.2-0.2 3.4 0 17.7 14.3 32.1 31.8 32.1z\">\r\n                    </path>\r\n                    <path d=\"M909.8 306.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S128.8 723.8 128.8 512.2 300.4 129.1 512 129.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C653.6 81.9 584.9 64.5 512 64.5 264.7 64.5 64.3 265 64.3 512.2S264.7 959.9 512 959.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        }\r\n    }\r\n\r\n    handleAppend() {\r\n        this.props.appendTheSong(this.props.result)\r\n    }\r\n\r\n    render() {\r\n        let result = this.props.result\r\n        let id = this.props.result.id\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        let isOdd = (this.props.index + 1) % 2 !== 0\r\n        return(\r\n            <div className={isOdd ? \"search-item-container odd\" : \"search-item-container\"}>\r\n                <span className=\"search-item-number\">{`${this.props.index + 1}.`}</span>\r\n                <div className=\"search-item-name\">\r\n                    <span className=\"song-name\" title={result.name}>{result.name}</span>\r\n                    <span className=\"search-item-play\" onClick={isTheSongPlaying ? this.handlePause : this.handlePlay}>\r\n                        {this.getPlayOrPauseButtonSvg()}\r\n                    </span>\r\n                    <span className=\"search-item-append\" onClick={this.handleAppend}>\r\n                        <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M197.3 197.3c-173.8 173.8-173.8 455.5 0 629.3s455.5 173.8 629.3 0 173.8-455.5 0-629.3-455.5-173.7-629.3 0zM907 512c0 51.3-9.7 101.3-28.9 148.7-19.9 49-49.1 92.9-86.8 130.6s-81.7 66.9-130.6 86.8C613.3 897.3 563.3 907 512 907c-51.3 0-101.3-9.7-148.7-28.9-49-19.9-92.9-49.1-130.6-86.8s-66.9-81.7-86.8-130.6C126.7 613.3 117 563.3 117 512c0-51.3 9.7-101.3 28.9-148.7 19.9-49 49.1-92.9 86.8-130.6s81.7-66.9 130.6-86.8C410.7 126.7 460.7 117 512 117c51.3 0 101.3 9.7 148.7 28.9 49 19.9 92.9 49.1 130.6 86.8s66.9 81.7 86.8 130.6C897.3 410.7 907 460.7 907 512zM537 262v225h225v50H537v225h-50V537H262v-50h225V262h50z\">\r\n                        </path>\r\n                        </svg>\r\n                    </span>\r\n                </div>\r\n                <div className=\"search-item-singer name\">\r\n                    <span title={result.singer}>{result.singer}</span>\r\n                </div>\r\n                <div className=\"search-item-time\">\r\n                    {timeFormat(result.time)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    let currentSongId = currentSongInfo.id\r\n    return {\r\n        AudioStatus: theState.AudioStatus,\r\n        currentSongId: currentSongId,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        appendTheSong: (songInfo) => {\r\n            dispatch(appendTheSong(songInfo))\r\n        },\r\n        playTheSongInPage: (songInfo) => {\r\n            dispatch(playTheSongInPage(songInfo))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchItem)","import React, {Component} from 'react'\r\nimport SearchItem from './SearchItem'\r\nimport {connect} from 'react-redux'\r\nimport PageSelector from \"../../common/PageSelector\"\r\nimport {changePage} from \"../actions\"\r\nimport {withRouter} from \"react-router-dom\"\r\n\r\nclass SearchList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.pushHistory = this.pushHistory.bind(this)\r\n        this.getSelectorInfo = this.getSelectorInfo.bind(this)\r\n    }\r\n\r\n    dataCleaning(data) {\r\n        let singerList = data.ar.map(artist => artist.name)\r\n        let singer = singerList.join('/')\r\n        let id = String(data.privilege.id)\r\n        return {\r\n            name: data.name,\r\n            singer,\r\n            time: data.dt / 1000,\r\n            id,\r\n            pic: data.al.picUrl,\r\n            lrc: `https://v1.itooi.cn/netease/lrc?id=${id}`,\r\n            url:`https://v1.itooi.cn/netease/url?id=${id}`,\r\n        }\r\n    }\r\n\r\n    pushHistory(newPage) {\r\n        this.props.history.push(`search?s=${this.props.searchContent}&page=${newPage}`)\r\n    }\r\n\r\n    getSelectorInfo() {\r\n        let totalCount = this.props.searchResult.data.songCount\r\n        if (totalCount > 600) {\r\n            totalCount = 600\r\n        }\r\n        let pageSize = this.props.pageSize\r\n        let totalPage = Math.ceil(totalCount / pageSize)\r\n        return {\r\n            totalPage,\r\n            currentPage: Number(this.props.searchPage),\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let searchData = this.props.searchResult.data.songs\r\n        let selectorInfo = this.getSelectorInfo()\r\n        return(\r\n            <div className=\"search-list-container\">\r\n                <span className=\"search-head-number\">\r\n                </span>\r\n                <div className=\"search-head-container\">\r\n                    <div className=\"search-head-name name\">\r\n                        <span title=\"歌名\">歌曲</span>\r\n                    </div>\r\n                    <div className=\"search-head-singer name\">\r\n                        <span title=\"歌手\">歌手</span>\r\n                    </div>\r\n                    <div className=\"search-head-time\">\r\n                        时长\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-list\">\r\n                    {searchData.map((value, i) => {\r\n                        let num = i + this.props.pageSize * (this.props.searchPage - 1)\r\n                        return (\r\n                            <SearchItem key={i} index={num} result={this.dataCleaning(value)}/>\r\n                        )\r\n                    })}\r\n                </div>\r\n                    <PageSelector selectorInfo={selectorInfo} changePage={this.props.changePage} pushHistory={this.pushHistory}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.SearchBarReducer\r\n    return {\r\n        searchContent: theState.searchContent,\r\n        searchResult: theState.searchResult,\r\n        searchPage: theState.searchPage,\r\n        pageSize: theState.pageSize,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changePage: (page) => {\r\n            dispatch(changePage(page))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(withRouter(SearchList))","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport * as Status from '../status'\r\nimport {fetchSearchResult, inputChange} from '../actions'\r\nimport SearchBar from './SearchBar'\r\nimport SearchList from './SearchList'\r\nimport {argsFromQuery} from '../../../utils'\r\nimport './SearchPage.css'\r\n\r\nclass SearchPage extends Component {\r\n\r\n    componentDidMount() {\r\n        let query = argsFromQuery(this.props.location.search)\r\n        let s = query.s\r\n        let page = Number(query.page)\r\n        if (s !== undefined && s !== this.props.searchContent) {\r\n            this.props.fetchSearchResult(s, page)\r\n            this.props.inputChange(s)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.location.search !== this.props.location.search) {\r\n            let query = argsFromQuery(this.props.location.search)\r\n            let s = query.s\r\n            let page = Number(query.page)\r\n            this.props.fetchSearchResult(s, page)\r\n        }\r\n    }\r\n\r\n    showSearchResult() {\r\n        switch (this.props.status) {\r\n            case Status.LOADING: {\r\n                return (\r\n                    <div className=\"loading-container\">\r\n                        <svg className=\"load\" viewBox=\"25 25 50 50\">\r\n                            <circle className=\"loading\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\"/>\r\n                        </svg>\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.SUCCESS: {\r\n                return (\r\n                        <SearchList />\r\n                )\r\n            }\r\n            case Status.FAILURE: {\r\n                return (\r\n                    <div className=\"failed-container\">歌曲搜索失败</div>\r\n                )\r\n            }\r\n            default: {\r\n                return (\r\n                    <div></div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"search-page-content\">\r\n                <SearchBar />\r\n                {this.showSearchResult()}\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.SearchBarReducer\r\n    return {\r\n        status: theState.status,\r\n        searchResult: theState.searchResult,\r\n        searchContent: theState.searchContent,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchSearchResult: (input, page) => {\r\n            dispatch(fetchSearchResult(input, page))\r\n        },\r\n        inputChange: (input) => {\r\n            dispatch(inputChange(input))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(SearchPage)","export const LOADING = 'loading'\r\nexport const SUCCESS = 'success'\r\nexport const FAILURE = 'failure'","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {SearchItem} from '../../searchPage'\r\nimport {deleteItemDetail} from '../actions'\r\nimport * as Status from '../status'\r\nimport PageSelector from '../../common/PageSelector'\r\nimport {albumChangePage} from '../actions'\r\n\r\nclass ModalPortal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.deleteDetailInfo = this.deleteDetailInfo.bind(this)\r\n        this.descriptionToggle = this.descriptionToggle.bind(this)\r\n        this.state = {\r\n            isAllDescriptionShowed: false,\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        let body = document.querySelector(\"body\")\r\n        if (this.props.albumStatus !== Status.INIT) {\r\n            body.classList.add('ban-scroll')\r\n        } else {\r\n            body.classList.remove('ban-scroll')\r\n        }\r\n    }\r\n\r\n    descriptionToggle() {\r\n        this.setState({\r\n            isAllDescriptionShowed: !this.state.isAllDescriptionShowed,\r\n        })\r\n    }\r\n\r\n    deleteDetailInfo() {\r\n        this.props.deleteItemDetail()\r\n        this.setState({\r\n            isAllDescriptionShowed: false,\r\n        })\r\n    }\r\n\r\n    dataCleaning(fetchedData) {\r\n        let singerList = fetchedData.artists.map(artist => artist.name)\r\n        let singer = singerList.join('/')\r\n        return {\r\n            id: fetchedData.id,\r\n            name: fetchedData.name,\r\n            singer,\r\n            time: fetchedData.duration / 1000,\r\n            pic: fetchedData.album.blurPicUrl,\r\n            lrc: `https://v1.itooi.cn/netease/lrc?id=${fetchedData.id}`,\r\n            url: `https://v1.itooi.cn/netease/url?id=${fetchedData.id}`,\r\n        }\r\n    }\r\n\r\n    getSelectorInfo() {\r\n        let totalPage = Math.ceil(this.props.albumDetailInfo.data.trackCount / this.props.albumPageSize)\r\n        return {\r\n            totalPage,\r\n            currentPage: Number(this.props.albumCurrentPage),\r\n        }\r\n    }\r\n\r\n    showAlbumList() {\r\n        switch (this.props.albumStatus) {\r\n            case Status.INIT: {\r\n                return null\r\n            }\r\n            case Status.LOADING: {\r\n                return (\r\n                    <div className=\"pop-up\">\r\n                        <div className=\"pop-window\">\r\n                            <span className=\"modal-portal-toggle\" onClick={this.deleteDetailInfo}>×</span>\r\n                            <div className=\"loading-container\">\r\n                                <svg className=\"load\" viewBox=\"25 25 50 50\">\r\n                                    <circle className=\"loading\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\"/>\r\n                                </svg>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.SUCCESS: {\r\n                let data = this.props.albumDetailInfo.data\r\n                console.log('data', data)\r\n                let {albumCurrentPage, albumPageSize} = {...this.props}\r\n                let start = (albumCurrentPage - 1) * albumPageSize\r\n                let end = start + albumPageSize\r\n                return (\r\n                    <div className=\"pop-up\">\r\n                        <div className=\"pop-window\">\r\n                            <span className=\"modal-portal-toggle\" onClick={this.deleteDetailInfo}>×</span>\r\n                            <div className=\"album-list-container\">\r\n                                <div className={this.state.isAllDescriptionShowed ? \"album-list-info all-description-showed\" : \"album-list-info\"}>\r\n                                    <img className=\"album-list-bg\" src={data.coverImgUrl} alt=\"专辑图片\"/>\r\n                                    <span className=\"album-list-pic\">\r\n                                        <img src={data.coverImgUrl} alt=\"专辑图片\"/>\r\n                                    </span>\r\n                                    <div className=\"album-list-name\" title={data.name}>\r\n                                            {`歌单：${data.name}`}\r\n                                    </div>\r\n                                    <p className={this.state.isAllDescriptionShowed ? \"album-list-description all-description-showed\" : \"album-list-description\"}>\r\n                                        <span>介绍：</span><br/>\r\n                                        {`${data.description}`}\r\n                                    </p>\r\n                                    <span className=\"description-toggle\" onClick={this.descriptionToggle}>{this.state.isAllDescriptionShowed ? '收起' : '展开'}</span>\r\n                                </div>\r\n                                <div className=\"album-list-count\">\r\n                                    {`歌曲列表 (${data.trackCount}首歌)`}\r\n                                </div>\r\n                                <div className=\"album-list-items\">\r\n                                    {data.tracks.slice(start, end).map((value, i) => {\r\n                                        let index = i + start\r\n                                        return <SearchItem key={index} index={index} result={this.dataCleaning(value)}/>\r\n                                    })}\r\n                                </div>\r\n                                <PageSelector selectorInfo={this.getSelectorInfo()} changePage={this.props.changePage} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            default: {\r\n                return null\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pop-up-container\">\r\n                {this.showAlbumList()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        albumDetailInfo: theState.albumDetailInfo,\r\n        albumStatus: theState.albumStatus,\r\n        albumCurrentPage: theState.albumCurrentPage,\r\n        albumPageSize: theState.albumPageSize,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        deleteItemDetail: () => {\r\n            dispatch(deleteItemDetail())\r\n        },\r\n        changePage: (page) => {\r\n            dispatch(albumChangePage(page))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalPortal)","import React, {Component} from 'react'\r\n\r\nclass NotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                NotFound\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NotFound","import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport {connect} from 'react-redux'\n\nclass Menu extends Component {\n\n    render() {\n        let {searchContent, searchPage} = {...this.props.searchBar}\n        let searchPath = `?s=${searchContent}&page=${searchPage}`\n        if (searchContent === '' || searchContent === undefined) {\n            searchPath = ''\n        }\n        let menus = [\n            {\n                text: '首页',\n                pathname: '/',\n                search: '',\n            },\n            {\n                text: '热门歌单',\n                pathname: `/playlist`,\n                search: `?cat=${this.props.playList.activeTag}&page=${this.props.playList.currentPage}`,\n            },\n            {\n                text: '搜索',\n                pathname: `/search`,\n                search: searchPath,\n            },\n        ]\n        return (\n            <nav>\n                <ul className=\"nav-container\">\n                    {\n                        menus.map((e, index) => {\n                                let href = `${e.pathname}${e.search}`\n                                let isCurrent = this.props.currentPathname === e.pathname\n                                return (\n                                    <li className=\"nav-item\" key={index}>\n                                        <Link className={isCurrent? \"nav-link nav-link-current\" : \"nav-link\"} to={href}>{e.text}</Link>\n                                    </li>\n                                )\n                            }\n                        )\n                    }\n                </ul>\n            </nav>\n        )\n    }\n}\n\nconst mapStateTopProps = (state, ownProps) => {\n    return {\n        playList: state.PlayListReducer,\n        searchBar: state.SearchBarReducer,\n        currentPathname: ownProps.location.pathname,\n    }\n}\n\nexport default withRouter(connect(mapStateTopProps, null)(Menu))\n","import React from \"react\"\r\n\r\nconst previousBtn = (\r\n    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n        <path d=\"M362.3 512l445-332.3v664.5L362.3 512zM216.7 179.7h80v664.5h-80V179.7z\">\r\n        </path>\r\n    </svg>\r\n)\r\n\r\nconst nextBtn = (\r\n    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n        <path d=\"M216.7 844.3V179.7l445 332.3-445 332.3z m590.6 0h-80V179.7h80v664.6z\">\r\n        </path>\r\n    </svg>\r\n)\r\n\r\nconst volumeBtn = (\r\n    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n        <path d=\"M697.5 76l-497 230.6-147.3-20v420l147.3-20 497 230.6V76z m-50 760.7l-424.9-195-13.7-6.8-15.2 2.1-90.6 12.3V343.8l90.6 12.3 15.2 2.1 13.7-6.8 424.9-194.9v680.2zM812 612h-50V412h50v200z m204.7 200h-50V212h50v600zM914.3 712h-50V312h50v400z\">\r\n        </path>\r\n    </svg>\r\n)\r\n\r\nconst listBtn = (\r\n    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n        <path d=\"M91.9 165.2h50v50h-50v-50z m150.2 0v50h690v-50h-690zM91.9 429.7h50v-50h-50v50z m150.2 0h690v-50h-690v50zM91.9 644.3h50v-50h-50v50z m150.2 0h690v-50h-690v50zM91.9 858.8h50v-50h-50v50z m150.2 0h690v-50h-690v50z\">\r\n        </path>\r\n    </svg>\r\n)\r\n\r\nconst getModeButtonSvg = (mode) => {\r\n    let loop = (\r\n        <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n            <path d=\"M922 607.1V887H102V157h612.2V58.2l200 125-200 125V207H152v630h720V607.1h50z\">\r\n            </path>\r\n        </svg>\r\n    )\r\n    let circle = (\r\n        <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n            <path\r\n                d=\"M922 607.1V887H102V157h612.2V58.2l200 125-200 125V207H152v630h720V607.1h50zM560.5 737.6V306.4h-34c-9.2 18.6-24.8 37.7-46.9 57.4-22.1 19.7-47.9 36.5-77.3 50.4v51c16.4-6.1 34.9-15.1 55.5-27.2s37.3-24.2 50-36.3v336h52.7z\">\r\n            </path>\r\n        </svg>\r\n    )\r\n    let random = (\r\n        <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n            <path d=\"M726.6 774H594.4L458.8 512l135.6-262h132.2v98.7l200-125-200-125V200H564.4L430.7 457.7 297.4 200h-200v50h169.2l135.9 262-135.9 262H97.4v50h200l133.3-257.7L564.4 824h162.2v101.3l200-125-200-125z\">\r\n            </path>\r\n        </svg>\r\n    )\r\n    let mapModeToIcon = {\r\n        loop,\r\n        circle,\r\n        random,\r\n    }\r\n    return mapModeToIcon[mode]\r\n}\r\n\r\nconst getPlayButtonSvg = (status) => {\r\n    let play = (\r\n        <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n            <path d=\"M243.2 208h166.4v608H243.2zM614.4 208h166.4v608h-166.4z\">\r\n            </path>\r\n        </svg>\r\n    )\r\n    let pause = (\r\n        <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n            <path d=\"M289.5 844.3V179.7l445 332.3-445 332.3z\">\r\n            </path>\r\n        </svg>\r\n    )\r\n    let mapStatusToIcon = {\r\n        play,\r\n        pause,\r\n    }\r\n    return mapStatusToIcon[status]\r\n}\r\n\r\nexport {\r\n    previousBtn,\r\n    nextBtn,\r\n    volumeBtn,\r\n    listBtn,\r\n    getModeButtonSvg,\r\n    getPlayButtonSvg,\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {\r\n    changeAudioStatus,\r\n    getLyricFromNet,\r\n    saveCurrentLyricIndex,\r\n    changePlayMode,\r\n    playNextSong,\r\n    toggleSongListWindow\r\n} from '../actions'\r\nimport {timeFormat, getCurrentSongInfo} from '../../../utils'\r\nimport * as icon from './icon'\r\n\r\nclass AudioController extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.mapEnglishToChinese = {\r\n            loop: '列表循环',\r\n            circle: '单曲循环',\r\n            random: '随机播放',\r\n        }\r\n        this.isFirstLoad = true\r\n        this.state = {\r\n            currentTime: null,\r\n            duration: null,\r\n            sliding: false,\r\n            hover: false,\r\n        }\r\n        this.audio = React.createRef()\r\n        this.songSlider = React.createRef()\r\n        this.playOrPause = this.playOrPause.bind(this)\r\n        this.clickToSeek = this.clickToSeek.bind(this)\r\n        this.dragToSeek = this.dragToSeek.bind(this)\r\n        this.AfterDragToSeek = this.AfterDragToSeek.bind(this)\r\n        this.handleHover = this.handleHover.bind(this)\r\n        this.changePlayMode = this.changePlayMode.bind(this)\r\n        this.changeToPlayNextSong = this.changeToPlayNextSong.bind(this)\r\n        this.toggleSongList = this.toggleSongList.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        const a = this.audio.current\r\n        a.addEventListener('loadstart', () => {\r\n            this.props.getLyricFromNet(this.props.currentSongInfo.lrc)\r\n        })\r\n        a.addEventListener('canplay', () => {\r\n            const {currentTime, duration} = a\r\n            this.setState({\r\n                currentTime,\r\n                duration\r\n            })\r\n            let shouldAutoPlay = !this.isFirstLoad\r\n            if (shouldAutoPlay) {\r\n                a.play()\r\n            } else {\r\n                this.isFirstLoad = false\r\n            }\r\n        })\r\n        a.addEventListener('play', () => {\r\n            this.props.changeAudioStatus('play')\r\n        })\r\n        a.addEventListener('pause', () => {\r\n            this.props.changeAudioStatus('pause')\r\n        })\r\n        a.addEventListener('timeupdate', () => {\r\n            if (!this.state.sliding) {\r\n                const {currentTime} = a\r\n                this.setState({\r\n                    currentTime\r\n                })\r\n                this.parseLyricIndex(currentTime)\r\n            }\r\n        })\r\n        a.addEventListener('ended', () => {\r\n            let {lengthOfSongList, playMode} = this.props\r\n            if (lengthOfSongList !== 0) {\r\n                this.props.playNextSong(playMode)\r\n                if (lengthOfSongList === 1 || playMode === 'circle') {\r\n                    a.play()\r\n                }\r\n            }\r\n        })\r\n        if (this.isFirstLoad && this.props.lengthOfSongList === 0) {\r\n            this.isFirstLoad = false\r\n        }\r\n    }\r\n\r\n    getNextLyricIndex(currentTime, data, deltaTime) {\r\n        let nextLyricIndex\r\n        let length = data.length\r\n        let theLastLyricTime = data[length - 1].time\r\n        let isAfterTheLastLyric = currentTime >= theLastLyricTime\r\n        let isBetweenTheLastTwoLyric = currentTime <= theLastLyricTime && currentTime >= theLastLyricTime - deltaTime\r\n        if (isAfterTheLastLyric) {\r\n            nextLyricIndex = length - 1\r\n        } else if (isBetweenTheLastTwoLyric) {\r\n            nextLyricIndex = length - 2\r\n        } else {\r\n            nextLyricIndex = data.findIndex((lyricInfo, index, data) => {\r\n                if (index === length -1) {\r\n                    return false\r\n                }\r\n                let isStart = lyricInfo.time - deltaTime <= currentTime\r\n                let isNotEnd = data[index + 1].time - deltaTime >= currentTime\r\n                return isStart && isNotEnd\r\n            })\r\n        }\r\n        return nextLyricIndex\r\n    }\r\n\r\n    parseLyricIndex(currentTime, deltaTime=0.2) {\r\n        let data = this.props.currentSongExtraInfo.currentLyric\r\n        if (data.length === 0) {\r\n            return false\r\n        }\r\n        let currentLyricIndex = this.getNextLyricIndex(currentTime, data, deltaTime)\r\n        let indexInStore = this.props.currentSongExtraInfo.currentLyricIndex\r\n        if (currentLyricIndex === indexInStore) {\r\n            return false\r\n        } else {\r\n            this.props.saveCurrentLyricIndex(currentLyricIndex)\r\n        }\r\n    }\r\n\r\n    playOrPause() {\r\n        const a = this.audio.current\r\n        if (a.currentSrc === '') {\r\n            return\r\n        }\r\n        if (this.props.AudioStatus === 'pause') {\r\n            a.play()\r\n            this.props.changeAudioStatus('play')\r\n        } else {\r\n            a.pause()\r\n            this.props.changeAudioStatus('pause')\r\n        }\r\n    }\r\n\r\n    clickToSeek(event) {\r\n        const a = this.audio.current\r\n        let target = event.target\r\n        if (!target.classList.contains('slider-point')) {\r\n            let { left, width } = event.currentTarget.getBoundingClientRect()\r\n            let clickPosition = (event.clientX - left) / width\r\n            let currentTime = clickPosition * a.duration\r\n            if (!isNaN(currentTime)) {\r\n                a.currentTime = currentTime\r\n                this.parseLyricIndex(currentTime)\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    }\r\n\r\n    dragToSeek() {\r\n        let isRunning = false\r\n        let isFirstDrag = true\r\n        return (event) => {\r\n            event.persist()\r\n            if (isRunning || isFirstDrag ) {\r\n                isFirstDrag = false\r\n                return\r\n            }\r\n            isRunning = true\r\n            window.requestAnimationFrame(() => {\r\n                this.seek(event)\r\n                isRunning = false\r\n            })\r\n            if (!this.state.sliding) {\r\n                this.setState({\r\n                    sliding: true\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    seek(event) {\r\n        const a = this.audio.current\r\n        let {left, width} = this.songSlider.current.getBoundingClientRect()\r\n        let dragPosition = (event.clientX - left) / width\r\n        if (dragPosition >= 0 && dragPosition <= 1) {\r\n            let currentTime = a.duration * dragPosition\r\n            this.setState({\r\n                currentTime\r\n            })\r\n        }\r\n    }\r\n\r\n    AfterDragToSeek() {\r\n        const a = this.audio.current\r\n        a.currentTime = this.state.currentTime\r\n        this.parseLyricIndex(this.state.currentTime)\r\n        this.setState({\r\n            sliding: false\r\n        })\r\n    }\r\n\r\n    handleHover() {\r\n        this.setState({\r\n            hover: !this.state.hover\r\n        })\r\n    }\r\n\r\n    toggleSongList() {\r\n        this.props.toggleSongListWindow()\r\n        let pop = document.querySelector('.pop-up')\r\n        if (pop === null) {\r\n            let body = document.querySelector(\"body\")\r\n            body.classList.toggle('ban-scroll')\r\n        }\r\n    }\r\n\r\n    changePlayMode() {\r\n        let modeList = ['loop', 'circle', 'random']\r\n        let index = modeList.indexOf(this.props.playMode)\r\n        let nextIndex = (index + 1) % modeList.length\r\n        let nextModeType = modeList[nextIndex]\r\n        this.props.changePlayMode(nextModeType)\r\n    }\r\n\r\n    changeToPlayNextSong(loopStep) {\r\n        return () => {\r\n            this.props.playNextSong(this.props.playMode, loopStep)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {currentTime, duration} = this.state\r\n        let {name, singer, pic, url} = this.props.currentSongInfo\r\n        let playMode = this.props.playMode\r\n        let playModeTitle = this.mapEnglishToChinese[playMode]\r\n        return (\r\n            <div className={this.props.showSongListWindow ? \"audio-controller playlist-opened\" : \"audio-controller\"}>\r\n                <audio src={url} ref={this.audio}>\r\n                </audio>\r\n                <div className=\"album-cover\">\r\n                    <img src={pic} alt=\"专辑图片\" />\r\n                </div>\r\n                <div className=\"extra-info-container\">\r\n                    <div className={this.state.hover? \"song-slider hover\" : \"song-slider\"}\r\n                         onClick={this.clickToSeek}\r\n                         onMouseOver={this.handleHover}\r\n                         onMouseOut={this.handleHover}\r\n                         ref={this.songSlider}\r\n                    >\r\n                        <div className=\"slider-bg\">\r\n                        </div>\r\n                        <div className=\"slider-progress\" style={{width: `${ currentTime / duration * 100 }%`}}>\r\n                        <span className=\"slider-point\" draggable=\"true\"\r\n                              onDrag={this.dragToSeek()}\r\n                              onDragEnd={this.AfterDragToSeek}\r\n                        >\r\n                        </span>\r\n                        </div>\r\n                    </div>\r\n                    <span className=\"music-timeline\">\r\n                        <span id=\"music-time-now\">{timeFormat(currentTime)}</span>\r\n                        <span> / </span>\r\n                        <span id=\"music-time-all\">{timeFormat(duration)}</span>\r\n                    </span>\r\n                    <div className=\"song-info\">\r\n                        <div className=\"song-info-name\" title={name}>{name}</div>\r\n                        <div className=\"song-info-singer\" title={singer}>{singer}</div>\r\n                    </div>\r\n                    <div className=\"controller-btn\">\r\n                        <span className=\"back-btn\" title=\"上一首(ctrl+←)\" onClick={this.changeToPlayNextSong(-1)}>\r\n                            {icon.previousBtn}\r\n                        </span>\r\n                        <span className={[\"play-btn\", this.props.AudioStatus].join(' ')} title=\"播放/暂停(p)\" onClick={this.playOrPause}>\r\n                            {icon.getPlayButtonSvg(this.props.AudioStatus)}\r\n                        </span>\r\n                        <span className=\"next-btn\" title=\"下一首(ctrl+→)\" onClick={this.changeToPlayNextSong(1)}>\r\n                            {icon.nextBtn}\r\n                        </span>\r\n                        <span className=\"volume-btn icon\">\r\n                            {icon.volumeBtn}\r\n                        </span>\r\n                        <span className={`mode-btn icon ${playMode}`} data-mode={playMode} title={playModeTitle} onClick={this.changePlayMode}>\r\n                            {icon.getModeButtonSvg(playMode)}\r\n                        </span>\r\n                        <span className=\"list-btn icon\" title=\"播放列表\" onClick={this.toggleSongList}>\r\n                            {icon.listBtn}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    let lengthOfSongList = theState.songList.length\r\n    return {\r\n        lengthOfSongList: lengthOfSongList,\r\n        AudioStatus: theState.AudioStatus,\r\n        currentSongInfo: currentSongInfo,\r\n        currentSongExtraInfo: theState.currentSongExtraInfo,\r\n        playMode: theState.playMode,\r\n        showSongListWindow: theState.showSongListWindow,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeAudioStatus: (status) => {\r\n            dispatch(changeAudioStatus(status))\r\n        },\r\n        getLyricFromNet: (url) => {\r\n            dispatch(getLyricFromNet(url))\r\n        },\r\n        saveCurrentLyricIndex: (currentLyricIndex) => {\r\n            dispatch(saveCurrentLyricIndex(currentLyricIndex))\r\n        },\r\n        changePlayMode: (modeType) => {\r\n            dispatch(changePlayMode(modeType))\r\n        },\r\n        playNextSong: (modeType, loopStep) => {\r\n            dispatch(playNextSong(modeType, loopStep))\r\n        },\r\n        toggleSongListWindow: () => {\r\n            dispatch(toggleSongListWindow())\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AudioController)","import React, {Component} from 'react'\r\nimport {timeFormat, getCurrentSongInfo} from '../../../utils'\r\nimport {connect} from \"react-redux\"\r\nimport {playTheSongInList, deleteTheSong} from '../actions'\r\n\r\nclass SongItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handlePlay = this.handlePlay.bind(this)\r\n        this.handlePause = this.handlePause.bind(this)\r\n        // this.handleDelete = this.handleDelete.bind(this)\r\n    }\r\n\r\n    handlePlay() {\r\n        if (this.props.currentSongId !== this.props.songInfo.id) {\r\n            this.props.playTheSongInList(this.props.songIndex)\r\n            console.log('this.props.songInfo，第一次放', this.props.songInfo)\r\n        } else {\r\n            let audio = document.querySelector('audio')\r\n            audio.play()\r\n        }\r\n    }\r\n\r\n    handlePause() {\r\n        let audio = document.querySelector('audio')\r\n        audio.pause()\r\n    }\r\n\r\n    getPlayOrPauseButtonSvg() {\r\n        let {id} = this.props.songInfo\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        if (isTheSongPlaying) {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M910.8 303.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S129.8 720.8 129.8 509.2 301.4 126.1 513 126.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C654.6 78.9 585.9 61.5 513 61.5 265.7 61.5 65.3 262 65.3 509.2S265.7 956.9 513 956.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                    <path d=\"M385.4 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.6 0 32-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9zM578.9 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.5 0 31.9-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9z\">\r\n                    </path>\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        } else {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                    <path d=\"M415.8 679.9c5.9 0 11.5-1.6 16.2-4.5l231.1-134.6c10.9-5.2 18.5-16.3 18.5-29.2 0-11.9-6.4-22.3-16-27.8L439.7 352.2c-5.8-6.7-14.4-10.9-23.9-10.9-17.6 0-31.8 14.4-31.8 32.1 0 0.6 0 1.2 0.1 1.8l-0.4 0.2 0.5 269c-0.1 1.1-0.2 2.2-0.2 3.4 0 17.7 14.3 32.1 31.8 32.1z\">\r\n                    </path>\r\n                    <path d=\"M909.8 306.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S128.8 723.8 128.8 512.2 300.4 129.1 512 129.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C653.6 81.9 584.9 64.5 512 64.5 264.7 64.5 64.3 265 64.3 512.2S264.7 959.9 512 959.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {id, name, singer, time} = this.props.songInfo\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        return (\r\n            <div className=\"song-list-item-container\" style={isTheSongPlaying ? {color: 'rgb(255, 255, 255)'} : {}}>\r\n                <div className=\"song-list-item-name\">\r\n                    <span className=\"song-name\" title={name}>{name}</span>\r\n                    <span className=\"song-list-item-play\" onClick={isTheSongPlaying ? this.handlePause : this.handlePlay}>\r\n                        {this.getPlayOrPauseButtonSvg()}\r\n                    </span>\r\n                    <span className=\"song-list-item-delete\" onClick={this.props.deleteTheSong.bind(this, this.props.songIndex)}>\r\n                        <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                            <path d=\"M897.2 128H578.7c-1.6-34.7-30.2-62.4-65.3-62.4s-63.8 27.7-65.3 62.4h-320c-17.5 0-31.9 14.4-31.9 31.9s14.4 31.9 31.9 31.9H192v639.8c0 70.4 57.6 128 128 128h384.1c70.4 0 128-57.6 128-128V676.2c0.1-1.2 0.2-2.4 0.2-3.6 0.1-17.8-14.4-32.1-32.1-32.1-17.8 0-32.2 14.4-32.2 32.1v159.1c0 35.2-28.8 64-64 64H320c-35.2 0-64-28.8-64-64V191.8h511.9v223.1c0 17.7 14.4 32.1 32.2 32.1s32.2-14.4 32.2-32.1c0-1.2-0.1-2.4-0.2-3.6V191.8h65.1c17.6 0 31.9-14.4 31.9-31.9S914.7 128 897.2 128z\">\r\n                            </path>\r\n                            <path d=\"M386.9 350.6v386.6c0 16.8 13.8 30.6 30.6 30.6s30.6-13.8 30.6-30.5V350.6c0-16.8-13.8-30.6-30.6-30.6s-30.6 13.8-30.6 30.6zM576.7 350.6v386.6c0 16.8 13.8 30.6 30.6 30.6s30.6-13.8 30.6-30.5V350.6c0-16.8-13.8-30.6-30.6-30.6s-30.6 13.8-30.6 30.6z\">\r\n                            </path>\r\n                            <path d=\"M768 543.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                            </path>\r\n                        </svg>\r\n                    </span>\r\n                </div>\r\n                <div className=\"song-list-item-singer name\">\r\n                    <span title={singer}>{singer}</span>\r\n                </div>\r\n                <div className=\"song-list-item-time\">\r\n                    {timeFormat(time)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    let currentSongId = currentSongInfo.id\r\n    return {\r\n        AudioStatus: theState.AudioStatus,\r\n        currentSongId: currentSongId,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        playTheSongInList: (songInfo) => {\r\n            dispatch(playTheSongInList(songInfo))\r\n        },\r\n        deleteTheSong: (songIndex) => {\r\n            dispatch(deleteTheSong(songIndex))\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SongItem)","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport SongItem from './SongItem'\r\nimport {getCurrentSongInfo} from '../../../utils'\r\n\r\nclass SongList extends Component {\r\n    static scrollLyricList(div, currentLyricIndex) {\r\n        if (div !== null) {\r\n            let {height} = div.getBoundingClientRect()\r\n            let i = Math.floor(height / 46 / 2)\r\n            div.scrollTop = currentLyricIndex * 46 - 46 * i\r\n            console.log('滚动歌词')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let defaultPic = \"http://s4.music.126.net/style/web2/img/default/default_album.jpg\"\r\n        let picUrl = this.props.currentSongInfo.pic || defaultPic\r\n        let {currentLyric, currentLyricIndex} = this.props.currentSongExtraInfo\r\n        let length = this.props.songList.length\r\n        return (\r\n            <div className={this.props.showSongListWindow ? \"song-list\" : \"song-list hidden\"}>\r\n                <div className=\"song-list-bg\">\r\n                </div>\r\n                <div className=\"song-list-img\" style={{backgroundImage: `url(${picUrl})`}}>\r\n                </div>\r\n                <span className=\"song-list-header\">播放列表&nbsp;&nbsp;&nbsp;{`(总${length}首)`}</span>\r\n                <div className=\"song-list-container\">\r\n                    <div className=\"song-list-head-container\">\r\n                        <div className=\"song-list-item-name\">\r\n                            <span title=\"\">歌曲</span>\r\n                        </div>\r\n                        <div className=\"song-list-item-singer\">\r\n                            <span title=\"\">歌手</span>\r\n                        </div>\r\n                        <div className=\"song-list-item-time\">时长</div>\r\n                    </div>\r\n                    {\r\n                        this.props.songList.map((value, index) => {\r\n                            return <SongItem key={index} songIndex={index} songInfo={value}/>\r\n                    })}\r\n                </div>\r\n                <div className=\"lyric-list\" ref={(div) => {SongList.scrollLyricList(div, currentLyricIndex)}}>\r\n                    {\r\n                        currentLyric.map((value, index) => {\r\n                            if (value.translatedLyric === null) {\r\n                                return <p className={(currentLyricIndex === index)? \"lyric-item active\" : \"lyric-item\"} key={index}>{value.lyric}</p>\r\n                            } else {\r\n                                return (\r\n                                    <p className={(currentLyricIndex === index)? \"lyric-item active\" : \"lyric-item\"} key={index}>\r\n                                        {value.lyric}<br/>\r\n                                        {value.translatedLyric}\r\n                                    </p>\r\n                                )\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    return {\r\n        songList: theState.songList,\r\n        currentSongInfo: currentSongInfo,\r\n        currentSongExtraInfo: theState.currentSongExtraInfo,\r\n        showSongListWindow: theState.showSongListWindow,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(SongList)","import React, {Component} from 'react'\r\nimport AudioController from \"./AudioController\"\r\nimport SongList from \"./SongList\"\r\nimport './MusicController.css'\r\n\r\nclass MusicController extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"music-player\">\r\n                <AudioController />\r\n                <SongList />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MusicController","import React, {Component} from 'react'\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"page-footer\">\r\n                页脚\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React, {Component} from 'react'\n// import a as b from module 相当于给 a 模块起了一个别名 b,\n// 这样在其他地方使用可以直接使用 b 这个变量名\nimport { BrowserRouter as Router, Route, Switch} from \"react-router-dom\"\nimport {view as Home} from \"./homePage/\"\nimport {view as PlayListPage} from \"./playListPage/\"\nimport {ModalPortal} from \"./playListPage/\"\nimport {view as SearchPage} from \"./searchPage/\"\nimport NotFound from \"./NotFound\"\nimport Menu from './Menu'\nimport MusicController from \"./audioController/views/MusicController\"\nimport Footer from './Footer'\nimport './App.css'\n\n\nclass App extends Component {\n\n    render() {\n        return (\n            // BrowserRouter 会使用 HTML5 的 history API 渲染单页路由\n            <Router>\n                <React.Fragment>\n                    <Menu />\n                {/*Router 只能有一个子元素*/}\n                {/*也可以放一个 Switch 组件*/}\n                    <div className=\"content-container\">\n                        <Switch>\n                            {/*Route 组件用来匹配 location.path 的值, 并且渲染相应的组件 */}\n                            {/*exact 表示路径完全匹配时才算匹配*/}\n                            {/*比如 /todo/1 与 /todo 并不是完全匹配, 与 /todo/:id 完全匹配*/}\n                            <Route exact path=\"/\" component={Home} />\n                            <Route exact path=\"/playlist\" component={PlayListPage} />\n                            <Route exact path=\"/search\" component={SearchPage} />\n                            <Route component={NotFound} />\n                        </Switch>\n                    </div>\n                    <Footer />\n                    <MusicController />\n                    <ModalPortal />\n                </React.Fragment>\n            </Router>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { applyMiddleware, createStore, combineReducers} from 'redux'\r\nimport {reducer as homePageReducer} from './components/homePage/'\r\nimport {reducer as SearchBarReducer} from './components/searchPage/'\r\nimport {reducer as PlayListReducer} from './components/playListPage/'\r\nimport {reducer as AudioReducer} from './components/audioController/'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport {loadSongListInLocalStorage, loadCurrentSongIndexInLocalStorage} from './utils'\r\n\r\nconst initValue = {\r\n    homePageReducer: {\r\n        images: [],\r\n        indexOfCurrentImg: 0,\r\n    },\r\n    SearchBarReducer: {\r\n        searchContent: '',\r\n        searchPage: 1,\r\n        pageSize: 20,\r\n    },\r\n    PlayListReducer: {\r\n        activeTag: '全部',\r\n        albumStatus: '',\r\n        albumDetailInfo: '',\r\n        albumCurrentPage: 1,\r\n        albumPageSize: 30,\r\n        currentPage: 1,\r\n        pageSize: 60,\r\n        totalPage: 20,\r\n    },\r\n    AudioReducer: {\r\n        AudioStatus: 'pause',\r\n        songList: loadSongListInLocalStorage(),\r\n        showSongListWindow: false,\r\n        currentSongExtraInfo: {\r\n            currentSongIndex: loadCurrentSongIndexInLocalStorage(),\r\n            currentLyric: [],\r\n            currentLyricIndex: -1,\r\n        },\r\n        playMode: 'loop',\r\n        initSongInfo: {\r\n            id: -1,\r\n            name: '歌曲',\r\n            singer: '歌手',\r\n            lrc: null,\r\n            pic: \"http://s4.music.126.net/style/web2/img/default/default_album.jpg\",\r\n            url: null,\r\n            time: null,\r\n        },\r\n    },\r\n}\r\n\r\nconst reducerObj = {\r\n    homePageReducer,\r\n    SearchBarReducer,\r\n    PlayListReducer,\r\n    AudioReducer,\r\n}\r\n\r\nconst reducer = combineReducers(reducerObj)\r\n\r\nconst middleware = [thunkMiddleware]\r\n\r\nconst storeEnhancers = composeWithDevTools(applyMiddleware(...middleware))\r\n\r\nconst Store = createStore(reducer, initValue, storeEnhancers)\r\n\r\nexport default Store","import * as homePage from './actionTypes.js'\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case homePage.GET_HOMEPAGE_IMG: {\r\n            return {\r\n                ...state,\r\n                images: action.imgObj,\r\n            }\r\n        }\r\n        case homePage.CHANGE_THE_INDEX_OF_IMG: {\r\n            return {\r\n                ...state,\r\n                indexOfCurrentImg: action.index,\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state === undefined ? {} : state\r\n        }\r\n    }\r\n}","import * as search from './actionTypes.js'\r\nimport * as Status from './status.js'\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case search.INPUT_CHANGE: {\r\n            return {\r\n                ...state,\r\n                searchInput: action.input\r\n            }\r\n        }\r\n        case search.SEARCH_STARTED: {\r\n            return {\r\n                ...state,\r\n                status: Status.LOADING\r\n            }\r\n        }\r\n        case search.SEARCH_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                status: Status.SUCCESS,\r\n                searchResult: action.result,\r\n                searchContent: action.searchContent,\r\n                searchPage: action.searchPage,\r\n            }\r\n        }\r\n        case search.SEARCH_FAILURE: {\r\n            return {\r\n                status: Status.FAILURE\r\n            }\r\n        }\r\n        case search.CHANGE_PAGE: {\r\n            return {\r\n                ...state,\r\n                searchPage: action.page,\r\n            }\r\n        }\r\n        default: {\r\n            return state === undefined ? [] : state\r\n        }\r\n    }\r\n}","import * as playList from './actionTypes.js'\r\nimport * as Status from './status.js'\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case playList.PLAYLIST_TAG_CHANGE: {\r\n            return {\r\n                ...state,\r\n                activeTag: action.tagName,\r\n                currentPage: 1,\r\n            }\r\n        }\r\n        case playList.LOAD_ITEM_DETAIL_STARTED: {\r\n            return {\r\n                ...state,\r\n                albumStatus: Status.LOADING\r\n            }\r\n        }\r\n        case playList.LOAD_ITEM_DETAIL_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                albumStatus: Status.SUCCESS,\r\n                albumDetailInfo: action.albumDetailInfo\r\n            }\r\n        }\r\n        case playList.DELETE_ITEM_DETAIL: {\r\n            return{\r\n                ...state,\r\n                albumStatus: '',\r\n                albumDetailInfo: '',\r\n                albumCurrentPage: 1,\r\n            }\r\n        }\r\n        case playList.PLAYLIST_LOAD_STARTED: {\r\n            return {\r\n                ...state,\r\n                playListStatus: Status.LOADING\r\n            }\r\n        }\r\n        case playList.PLAYLIST_LOAD_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                playListStatus: Status.SUCCESS,\r\n                playListResult: action.playListResult\r\n            }\r\n        }\r\n        case playList.PLAYLIST_LOAD_FAILURE: {\r\n            return {\r\n                ...state,\r\n                playListStatus: Status.FAILURE\r\n            }\r\n        }\r\n        case playList.PLAYLIST_PAGE_CHANGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.page,\r\n            }\r\n        }\r\n        case playList.ALBUM_PAGE_CHANGE: {\r\n            return {\r\n                ...state,\r\n                albumCurrentPage: action.page,\r\n            }\r\n        }\r\n        default: {\r\n            return state === undefined ? {} : state\r\n        }\r\n    }\r\n}","import * as audioController from './actionTypes'\r\nimport {saveSongToLocalStorage, deleteSongInLocalStorage, saveCurrentSongIndexInLocalStorage} from \"../../utils\"\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case audioController.TOGGLE_SONG_LIST_WINDOW: {\r\n            return {\r\n                ...state,\r\n                showSongListWindow: !state.showSongListWindow,\r\n            }\r\n        }\r\n        case audioController.CHANGE_AUDIO_STATUS: {\r\n            return {\r\n                ...state,\r\n                AudioStatus: action.status\r\n            }\r\n        }\r\n        case audioController.APPEND_THE_SONG: {\r\n            let songList = state['songList']\r\n            let cloneList = JSON.parse(JSON.stringify(songList))\r\n            let isTheSongNotExisted = songList.every((value) => value.id !== action.songInfo.id)\r\n            if (isTheSongNotExisted) {\r\n                cloneList.push(action.songInfo)\r\n                saveSongToLocalStorage(action.songInfo)\r\n            }\r\n            return {\r\n                ...state,\r\n                songList: cloneList,\r\n            }\r\n        }\r\n        case audioController.DELETE_THE_SONG: {\r\n            let songList = state['songList']\r\n            let cloneList = JSON.parse(JSON.stringify(songList))\r\n            let deleteSongIndex = action.songIndex\r\n            let currentSongIndex = state.currentSongExtraInfo.currentSongIndex\r\n            let listLength = cloneList.length\r\n            deleteSongInLocalStorage(deleteSongIndex)\r\n            cloneList.splice(deleteSongIndex, 1)\r\n            let justOneSong = listLength === 1\r\n            let isCurrentSong = currentSongIndex === deleteSongIndex\r\n            let isTheLastSong = currentSongIndex === listLength - 1\r\n            let beforeCurrentSong = currentSongIndex < deleteSongIndex\r\n            let updateCurrentSongIndex = -1\r\n            let updateCurrentLyric = state.currentSongExtraInfo.currentLyric\r\n            if (justOneSong) {\r\n                updateCurrentSongIndex = -1\r\n            } else if (isCurrentSong) {\r\n                if (isTheLastSong) {\r\n                    updateCurrentSongIndex = currentSongIndex - 1\r\n                } else {\r\n                    updateCurrentSongIndex = currentSongIndex\r\n                }\r\n                updateCurrentLyric = []\r\n            } else {\r\n                if (beforeCurrentSong) {\r\n                    updateCurrentSongIndex = currentSongIndex\r\n                } else {\r\n                    updateCurrentSongIndex = currentSongIndex -1\r\n                }\r\n            }\r\n            saveCurrentSongIndexInLocalStorage(updateCurrentSongIndex)\r\n            return {\r\n                ...state,\r\n                songList: cloneList,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentLyric: updateCurrentLyric,\r\n                    currentSongIndex: updateCurrentSongIndex,\r\n                }\r\n            }\r\n        }\r\n        case audioController.PLAY_THE_SONG_IN_PAGE: {\r\n            let songList = state['songList']\r\n            let cloneList = JSON.parse(JSON.stringify(songList))\r\n            let updateCurrentSongIndex = songList.findIndex((song) => song.id === action.songInfo.id)\r\n            let isTheSongNotExisted = updateCurrentSongIndex === -1\r\n            if (isTheSongNotExisted) {\r\n                cloneList.push(action.songInfo)\r\n                saveSongToLocalStorage(action.songInfo)\r\n                updateCurrentSongIndex = cloneList.length - 1\r\n            }\r\n            saveCurrentSongIndexInLocalStorage(updateCurrentSongIndex)\r\n            return {\r\n                ...state,\r\n                songList: cloneList,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentSongIndex: updateCurrentSongIndex,\r\n                    currentLyricIndex: -1,\r\n                },\r\n            }\r\n        }\r\n        case audioController.PLAY_THE_SONG_IN_LIST: {\r\n            saveCurrentSongIndexInLocalStorage(action.songIndex)\r\n            return {\r\n                ...state,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentSongIndex: action.songIndex,\r\n                    currentLyricIndex: -1,\r\n                    currentLyric: [],\r\n                }\r\n            }\r\n        }\r\n        case audioController.PLAY_NEXT_SONG: {\r\n            let modeType = action.modeType\r\n            let currentSongIndex = state.currentSongExtraInfo.currentSongIndex\r\n            let LengthOfSongList = state.songList.length\r\n            let mapModeTypeToNextStep = {\r\n                loop: action.loopStep,\r\n                circle: 0,\r\n                random: parseInt(LengthOfSongList * Math.random()),\r\n            }\r\n            let step = mapModeTypeToNextStep[modeType]\r\n            let nextSongIndex = (currentSongIndex + step + LengthOfSongList) % LengthOfSongList\r\n            let currentLyric = []\r\n            if (nextSongIndex === currentSongIndex) {\r\n                currentLyric = state.currentSongExtraInfo.currentLyric\r\n            }\r\n            saveCurrentSongIndexInLocalStorage(nextSongIndex)\r\n            return {\r\n                ...state,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentSongIndex: nextSongIndex,\r\n                    currentLyric,\r\n                    currentLyricIndex: -1,\r\n                },\r\n            }\r\n        }\r\n        case audioController.GET_LYRIC: {\r\n            return {\r\n                ...state,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentLyric: action.lyric,\r\n                },\r\n            }\r\n        }\r\n        case audioController.GET_CURRENT_INDEX: {\r\n            let index = action.currentLyricIndex\r\n            if (index === undefined) {\r\n                console.log('index undefined')\r\n                return {\r\n                    ...state,\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    currentSongExtraInfo: {\r\n                        ...state.currentSongExtraInfo,\r\n                        currentLyricIndex: index,\r\n                    },\r\n                }\r\n            }\r\n        }\r\n        case audioController.CHANGE_PLAY_MODE: {\r\n            return {\r\n                ...state,\r\n                playMode: action.modeType,\r\n            }\r\n        }\r\n        default: {\r\n            return state === undefined ? {} : state\r\n        }\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PlayerApp from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport Store from './Store'\n\nReactDOM.render(\n    <Provider store={Store}>\n        <PlayerApp />\n    </Provider>,\n    document.getElementById('root')\n    )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}