{"version":3,"sources":["components/Home.js","api/api.js","components/playListPage/actions.js","components/playListPage/actionTypes.js","components/playListPage/views/PlayListItem.js","components/playListPage/views/PlayList.js","components/playListPage/status.js","components/playListPage/views/TagItem.js","components/playListPage/views/TagSelector.js","components/playListPage/views/PlayListPage.js","components/searchPage/actions.js","components/searchPage/actionTypes.js","components/searchPage/views/SearchBar.js","utils.js","components/audioController/actions.js","components/audioController/actionTypes.js","components/searchPage/views/SearchItem.js","components/searchPage/views/SearchList.js","components/searchPage/views/SearchPage.js","components/searchPage/status.js","components/playListPage/views/ModalPortal.js","components/NotFound.js","components/Menu.js","components/audioController/views/AudioController.js","components/audioController/views/SongItem.js","components/audioController/views/SongList.js","components/audioController/views/MusicController.js","components/Footer.js","components/App.js","serviceWorker.js","Store.js","components/searchPage/reducer.js","components/playListPage/reducer.js","components/audioController/reducer.js","index.js"],"names":["Home","react_default","a","createElement","Component","MusicApi","_Api","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","queryObj","callback","_queryObj","objectSpread","input","limit","offset","company","path","concat","get","_queryObj2","category","_queryObj3","albumId","lrcUrl","Api","baseUrl","isPathEqualToUrl","args","_args","method","url","data","r","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","console","log","send","ajax","playListTagChange","tagName","type","PlayListItem","props","_this","call","itemInfo","list","split","_this$itemInfo","id","name","coverImgUrl","coverThumbImgUrl","parseImgUrl","className","data-id","onClick","fetchAlbumDetailInfo","bind","src","alt","title","connect","dispatch","AlbumId","length","undefined","albumDetailInfo","playListResult","JSON","parse","response","code","PlayList","onLoad","assertThisInitialized","query","o","forEach","e","_e$split","_e$split2","slicedToArray","k","v","location","search","slice","argsFromQuery","activeTag","getPlayListActiveTag","decodeURI","nextProps","nextState","nextContext","fetchHotPlayList","viewBox","cx","cy","fill","map","index","views_PlayListItem","showHotPlayList","state","theState","PlayListReducer","playListStatus","page","Number","hotPlayList","playListLoadSuccess","withRouter","TagItem","toggleShow","i","rowData","theTagTabs","getClassName","Link","to","tagChange","_this2","TagSelector","mainTags","styleTags","languageTags","senceTags","emotionTags","themeTags","mapTagToMain","语种","风格","场景","情感","主题","show","hide","clickOnBlankArea","document","onclick","nativeEvent","stopImmediatePropagation","setState","d","views_TagItem","PlayListPage","views_TagSelector","views_PlayList","inputChange","fetchSearchResult","searchResult","result","searchContent","error","SearchBar","onSearch","onChange","onKeyPress","pathname","searchQuery","parseUrlGetSearchContent","event","target","searchInput","isEqualToOldSearchContent","isAtSearchPage","window","urlObj","getSearchUrl","history","push","trim","placeholder","onKeyDown","SearchBarReducer","searchAction","timeFormat","seconds","m","String","Math","floor","s","saveSongToLocalStorage","songInfo","songList","localStorage","getItem","setItem","stringify","getCurrentSongInfo","currentSongIndex","currentSongExtraInfo","initSongInfo","changeAudioStatus","changePlayMode","modeType","saveCurrentLyricIndex","currentLyricIndex","appendTheSong","deleteTheSong","songIndex","playTheSongInPage","playTheSongInList","playNextSong","loopStep","getLyric","lyric","getLyricFromNet","l","lyricList","lyricsArray","oneLyricString","oneLyric","time","j","timeList","isNaN","lyricItem","parseLyric","actions","SearchItem","handlePlay","handleAppend","handlePause","currentSongId","querySelector","play","pause","AudioStatus","isTheSongPlaying","isOdd","getPlayOrPauseButtonSvg","singer","AudioReducer","SearchList","searchData","views_SearchItem","SearchPage","_searchContent","getSearchContent","_o","views_SearchList","views_SearchBar","showSearchResult","ModalPortal","deleteDetailInfo","descriptionToggle","isAllDescriptionShowed","prevProps","prevState","snapshot","body","albumStatus","classList","add","remove","deleteItemDetail","fetchedData","artists","artist","join","duration","pic","album","blurPicUrl","lrc","description","trackCount","tracks","dataCleaning","showAlbumList","NotFound","Menu","searchPath","menus","text","href","isCurrent","currentPathname","ownProps","AudioController","currentTime","sliding","hover","audio","React","createRef","songSlider","playOrPause","clickToSeek","dragToSeek","AfterDragToSeek","handleHover","changeToPlayNextSong","toggleList","current","addEventListener","currentSongInfo","parseCurrentTimeToGetLyricIndex","playMode","lengthOfSongList","lyricArray","currentLyric","abs","theLastLyric","contains","_event$currentTarget$","currentTarget","getBoundingClientRect","left","width","clientX","alert","getLyricIndexWhenJumpSong","_this3","isRunning","isFirstDrag","persist","requestAnimationFrame","seek","_this$songSlider$curr","dragPosition","toggle","height","scrollTop","modeList","indexOf","nextModeType","_this4","_this$state","_this$props$currentSo","playModeTitle","loop","circle","random","ref","onMouseOver","onMouseOut","style","draggable","onDrag","onDragEnd","getPlayButtonSvg","data-mode","getModeButtonSvg","SongItem","_this$props$songInfo","color","SongList","div","picUrl","backgroundImage","views_SongItem","autoScrollLyricList","MusicController","views_AudioController","views_SongList","Footer","App","BrowserRouter","Fragment","components_Menu","Switch","Route","exact","component","components_Footer","audioController_views_MusicController","views_ModalPortal","Boolean","hostname","match","initValue","loadSongListInLocalStorage","reducerObj","action","every","cloneList","listLength","splice","deleteSongInLocalStorage","newSongIndex","isTheSongNotExisted","LengthOfSongList","nextSongIndex","parseInt","reducer","combineReducers","middleware","thunkMiddleware","storeEnhancers","composeWithDevTools","applyMiddleware","Store","createStore","ReactDOM","render","es","store","src_components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a7cb8ad.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                HomePage\n            </div>\n        )\n    }\n}\n\nexport default Home\n","const ajax = function(args, callback) {\r\n    let {method, url, data} = {...args}\r\n    let r = new XMLHttpRequest()\r\n    r.open(method, url, true)\r\n    // r.setRequestHeader('Content-Type', 'application/json')\r\n    r.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\r\n    r.onreadystatechange = () => {\r\n        if (r.readyState === 4) {\r\n            if ((r.status >= 200 && r.status < 300) || r.status === 304) {\r\n                callback(r)\r\n            } else {\r\n                console.log('error')\r\n            }\r\n        }\r\n    }\r\n    r.send(data)\r\n}\r\n\r\nclass Api {\r\n    constructor() {\r\n        // this.baseUrl = 'https://api.itooi.cn/music/'\r\n        this.baseUrl = 'https://v1.itooi.cn/'\r\n    }\r\n\r\n    get(path, callback, isPathEqualToUrl) {\r\n        let method = 'GET'\r\n        let url\r\n        if (isPathEqualToUrl) {\r\n            url = path\r\n        } else {\r\n            url = this.baseUrl + path\r\n        }\r\n        let args = {\r\n            method,\r\n            url,\r\n            data: null,\r\n        }\r\n        ajax(args, callback)\r\n    }\r\n}\r\n\r\nexport class MusicApi extends Api {\r\n    searchResult(queryObj, callback) {\r\n        let {input, limit, offset, company} = {...queryObj}\r\n        // let path = `${company}/search?key=579621905&s=${input}&type=song&limit=${limit}&offset=${offset}`\r\n        let path = `${company}/search?keyword=${input}&type=song&pageSize=${limit}&page=${offset}&format=1`\r\n        // 如果需要源数据，加上 &isOrigin=1\r\n        this.get(path, callback)\r\n    }\r\n\r\n    hotPlayList(queryObj, callback) {\r\n        let {category, limit, offset, company} = {...queryObj}\r\n        // let path = `${company}/hotSongList?key=579621905&cat=${category}&limit=${limit}&offset=${offset}`\r\n        let path = `${company}/songList/hot?cat=${category}&pageSize=${limit}&page=${offset}&format=1`\r\n        this.get(path, callback)\r\n    }\r\n\r\n    albumDetailInfo(queryObj, callback) {\r\n        let {albumId, company} = {...queryObj}\r\n        let path = `${company}/songList?id=${albumId}`\r\n        this.get(path, callback)\r\n    }\r\n\r\n    getLyric(lrcUrl, callback) {\r\n        this.get(lrcUrl, callback, true)\r\n    }\r\n}","import * as playList from './actionTypes.js'\r\nimport {MusicApi} from '../../api/api.js'\r\n\r\n// 热门歌单标签切换\r\nexport const playListTagChange = (tagName) => ({\r\n    type: playList.PLAYLIST_TAG_CHANGE,\r\n    tagName\r\n    })\r\n\r\n// 开始加载歌单具体信息\r\nexport const loadItemDetailStarted = () => ({\r\n    type: playList.LOAD_ITEM_DETAIL_STARTED,\r\n})\r\n\r\n// 加载歌单具体信息成功\r\nexport const loadItemDetailSuccess = (albumDetailInfo) => ({\r\n    type: playList.LOAD_ITEM_DETAIL_SUCCESS,\r\n    albumDetailInfo\r\n})\r\n\r\n// 删除歌单具体信息，即初始化模态弹窗\r\nexport const deleteItemDetail = () => ({\r\n    type: playList.DELETE_ITEM_DETAIL,\r\n})\r\n\r\n// 热门歌单列表开始加载\r\nexport const playListLoadStarted = () => ({\r\n    type: playList.PLAYLIST_LOAD_STARTED,\r\n})\r\n\r\n// 热门歌单列表加载成功\r\nexport const playListLoadSuccess = (playListResult) => ({\r\n    type: playList.PLAYLIST_LOAD_SUCCESS,\r\n    playListResult,\r\n})\r\n\r\n// 热门歌单列表加载成功\r\nexport const playListLoadFailure = () => ({\r\n    type: playList.PLAYLIST_LOAD_FAILURE,\r\n})\r\n\r\n// 异步加载热门歌单列表\r\nexport const fetchHotPlayList = (category=\"全部\", page=1, company='netease') => {\r\n    let limit = 30\r\n    let offset = (Number(page)- 1) * limit\r\n    return (dispatch) => {\r\n        let queryObj = {\r\n                category,\r\n                limit,\r\n                offset,\r\n                company,\r\n        }\r\n        dispatch(playListLoadStarted())\r\n        let api = new MusicApi()\r\n        api.hotPlayList(queryObj, (r) => {\r\n            let playListResult = JSON.parse(r.response)\r\n            console.log('加载热门歌单列表完成', playListResult)\r\n            if (playListResult.code === 200) {\r\n                dispatch(playListLoadSuccess(playListResult))\r\n            } else {\r\n                dispatch(playListLoadFailure())\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n// 加载歌单具体信息\r\nexport const fetchAlbumDetailInfo = (albumId, company='netease') => {\r\n    console.log('albumId', albumId)\r\n    return (dispatch) => {\r\n        let args = {\r\n            albumId,\r\n            company,\r\n        }\r\n        dispatch(loadItemDetailStarted())\r\n        let api = new MusicApi()\r\n        api.albumDetailInfo(args, (r) => {\r\n            let playListResult = JSON.parse(r.response)\r\n            console.log('加载歌单完成', playListResult)\r\n            if (playListResult.code === 200) {\r\n                dispatch(loadItemDetailSuccess(playListResult))\r\n            } else {\r\n                dispatch(playListLoadFailure())\r\n            }\r\n        })\r\n    }\r\n}","export const PLAYLIST_TAG_CHANGE = \"PAGE/PLAYLIST_TAG_CHANGE\"\r\n\r\nexport const LOAD_ITEM_DETAIL_STARTED = \"PAGE/LOAD_ITEM_DETAIL_STARTED\"\r\n\r\nexport const LOAD_ITEM_DETAIL_SUCCESS = \"PAGE/LOAD_ITEM_DETAIL_SUCCESS\"\r\n\r\nexport const DELETE_ITEM_DETAIL = 'PAGE/DELETE_ITEM_DETAIL'\r\n\r\nexport const PLAYLIST_LOAD_STARTED = 'PAGE/PLAYLIST_LOAD_STARTED'\r\n\r\nexport const PLAYLIST_LOAD_SUCCESS = 'PAGE/LIST_LOAD_SUCCESS'\r\n\r\nexport const PLAYLIST_LOAD_FAILURE = 'PAGE/PLAYLIST_LOAD_FAILURE'","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {fetchAlbumDetailInfo} from '../actions'\r\n\r\nclass PlayListItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.itemInfo = this.props.itemInfo\r\n        // this.getAlbumInfo = this.getAlbumInfo.bind(this)\r\n    }\r\n\r\n    parseImgUrl(url) {\r\n        let list = url.split('?')\r\n        let urlChanged = `${list[0]}?param=400y400`\r\n        return urlChanged\r\n    }\r\n\r\n    // getAlbumInfo(AlbumId) {\r\n    //     return () => {this.props.fetchAlbumDetailInfo(AlbumId)}\r\n    // }\r\n\r\n    render() {\r\n        let {id, name, coverImgUrl} = {...this.itemInfo}\r\n        let coverThumbImgUrl = this.parseImgUrl(coverImgUrl)\r\n        return (\r\n            <div className=\"album-container\">\r\n                <div className=\"album-img\" data-id={id} onClick={this.props.fetchAlbumDetailInfo.bind(this, id)}>\r\n                    <img src={coverThumbImgUrl} alt=\"歌单封面\"/>\r\n                </div>\r\n                <div className=\"album-info\" title={name}>\r\n                    <span>{name}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchAlbumDetailInfo: (AlbumId) => {\r\n            dispatch(fetchAlbumDetailInfo(AlbumId))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(PlayListItem)","import React, { Component } from 'react'\r\nimport * as Status from \"../status\"\r\nimport {connect} from 'react-redux'\r\nimport {fetchHotPlayList, playListTagChange} from \"../actions\"\r\nimport {withRouter} from 'react-router-dom'\r\nimport PlayListItem from './PlayListItem'\r\n\r\nclass PlayList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.onLoad = this.onLoad.bind(this)\r\n    }\r\n\r\n    argsFromQuery(query) {\r\n        let o = {}\r\n        if (query.length === 0) {\r\n            return o\r\n        }\r\n        query.split('&').forEach(e => {\r\n            let [k, v] = e.split('=')\r\n            o[k] = v\r\n        })\r\n        return o\r\n    }\r\n\r\n    getPlayListActiveTag(location) {\r\n        let path = location.search\r\n        let query = path.slice(1)\r\n        let o = this.argsFromQuery(query)\r\n        let activeTag = o['cat']\r\n        return activeTag\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.status !== 'success') {\r\n            this.onLoad()\r\n            let activeTag = this.getPlayListActiveTag(this.props.location)\r\n            this.props.playListTagChange(decodeURI(activeTag))\r\n        }\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState, nextContext) {\r\n        if (this.props.location !== nextProps.location) {\r\n            let activeTag = this.getPlayListActiveTag(nextProps.location)\r\n            this.props.fetchHotPlayList(activeTag, 1)\r\n        }\r\n    }\r\n\r\n    onLoad() {\r\n        let activeTag = this.getPlayListActiveTag(this.props.location)\r\n        this.props.fetchHotPlayList(activeTag, 1)\r\n    }\r\n\r\n    showHotPlayList() {\r\n        switch (this.props.status) {\r\n            case Status.LOADING: {\r\n                return (\r\n                    <div className=\"loading-container\">\r\n                        <svg className=\"load\" viewBox=\"25 25 50 50\">\r\n                            <circle className=\"loading\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\"/>\r\n                        </svg>\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.SUCCESS: {\r\n                let playListResult = this.props.playListResult.data\r\n                return (\r\n                    <div className=\"playlist-result\">\r\n                        {playListResult.map((value, index) => {\r\n                            return <PlayListItem key={index} itemInfo={value} />\r\n                        })}\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.FAILURE: {\r\n                return (\r\n                    <div className=\"failed-container\">热门歌单加载失败</div>\r\n                )\r\n            }\r\n            default: {\r\n                return (\r\n                    <div>PlayList</div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.showHotPlayList()\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        status: theState.playListStatus,\r\n        playListResult: theState.playListResult,\r\n        activeTag: theState.activeTag,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchHotPlayList: (category, page) => {\r\n            dispatch(fetchHotPlayList(category, page))\r\n        },\r\n        playListTagChange: (tagName) => {\r\n            dispatch(playListTagChange(tagName))\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(withRouter(PlayList))","export const INIT = ''\r\nexport const LOADING = 'loading'\r\nexport const SUCCESS = 'success'\r\nexport const FAILURE = 'failure'","import React, { Component } from 'react'\r\nimport {Link} from \"react-router-dom\"\r\nimport {connect} from 'react-redux'\r\nimport {playListTagChange} from \"../actions\"\r\n\r\nclass TagItem extends Component {\r\n\r\n    tagChange(value) {\r\n        this.props.playListTagChange(value)\r\n        this.props.toggleShow()\r\n    }\r\n\r\n    getClassName(value) {\r\n        return this.props.activeTag === value ? \"playlist-tag active-tag\" : \"playlist-tag\"\r\n    }\r\n\r\n    getTagTable(i) {\r\n        let rowData = this.props.theTagTabs.slice(i, i + 6)\r\n        return (\r\n            <tbody key={i}>\r\n                <tr>\r\n                    {rowData.map((value, index) => {\r\n                        return (\r\n                            <td key={index} className={this.getClassName(value)}>\r\n                                <Link  to={`/playlist?cat=${value}`} onClick={this.tagChange.bind(this, value)}>{value}</Link>\r\n                            </td>\r\n                        )\r\n                    })}\r\n                </tr>\r\n            </tbody>\r\n         )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"playlist-tag-tabs\">\r\n                {this.props.theTagTabs.map((value, index) => {\r\n                    return (\r\n                            <Link key={index} className={this.getClassName(value)} to={`/playlist?cat=${value}`} onClick={this.tagChange.bind(this, value)}>{value}</Link>\r\n                    )\r\n                })}\r\n                {/*{this.props.theTagTabs.map((value, index) => {*/}\r\n                    {/*if (index % 6 === 0) {*/}\r\n                        {/*return this.getTagTable(index)*/}\r\n                    {/*} else {*/}\r\n                        {/*return false*/}\r\n                    {/*}*/}\r\n                {/*})}*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        activeTag: theState.activeTag\r\n    }\r\n}\r\n\r\nconst mapDispatchTopProps = (dispatch) => {\r\n    return {\r\n        playListTagChange: (tagName) => {\r\n            dispatch(playListTagChange(tagName))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchTopProps)(TagItem)","import React, { Component } from 'react'\r\nimport {playListTagChange} from '../actions'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\"\r\nimport TagItem from './TagItem'\r\n\r\nclass TagSelector extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.mainTags = ['语种', '风格', '场景', '情感', '主题']\r\n        this.styleTags = ['流行', '摇滚', '民谣', '电子', '舞曲', '说唱', '轻音乐', '爵士', '乡村', 'R&B/Soul', '古典', '民族', '英伦', '金属', '朋克', '蓝调', '雷鬼', '拉丁', '古风', 'Bossa Nova']\r\n        this.languageTags = ['华语', '欧美', '日语', '韩语', '粤语', '小语种']\r\n        this.senceTags = ['清晨', '夜晚', '学习', '工作', '午休', '下午茶', '地铁', '驾车', '运动', '旅行', '散步', '酒吧']\r\n        this.emotionTags = ['怀旧', '清新', '浪漫', '性感', '伤感', '治愈', '放松', '孤独', '感动', '兴奋', '快乐', '安静', '思念']\r\n        this.themeTags = ['影视原声', 'ACG', '儿童', '校园', '游戏', '70后', '80后', '90后', '网络歌曲', 'KTV', '经典', '翻唱', '吉他', '钢琴', '器乐', '榜单', '00后']\r\n        this.mapTagToMain = {\r\n            '语种': this.languageTags,\r\n            '风格': this.styleTags,\r\n            '场景': this.senceTags,\r\n            '情感': this.emotionTags,\r\n            '主题': this.themeTags\r\n        }\r\n        this.state = {\r\n            show: false\r\n        }\r\n\r\n        this.toggleShow = this.toggleShow.bind(this)\r\n        this.hide = this.hide.bind(this)\r\n        this.clickOnBlankArea = this.clickOnBlankArea.bind(this)\r\n        document.onclick=this.hide\r\n    }\r\n\r\n    tagChange(value) {\r\n        this.props.playListTagChange(value)\r\n        this.toggleShow()\r\n    }\r\n\r\n    clickOnBlankArea(e) {\r\n        e.nativeEvent.stopImmediatePropagation()\r\n    }\r\n\r\n    toggleShow(e) {\r\n        this.setState({\r\n            show: !this.state.show\r\n        })\r\n        if (e !== undefined) {\r\n            e.nativeEvent.stopImmediatePropagation()\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        this.setState({\r\n            show: false\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.setState = () => {\r\n            return 0\r\n        }\r\n    //  防止组件卸载的时候调用 setState 导致 react 报错\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"playlist-tags\">\r\n                <span className=\"active-tag-name\" >{this.props.activeTag}</span>\r\n                <span className=\"select-tag-button\" onClick={this.toggleShow}>\r\n                    {this.state.show ? '收起 ' : '展开 '}\r\n                    <svg className={this.state.show ? \"select-icon rotated\" : \"select-icon\"} viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M127.5 330.9l0.7-0.7c12.3-12.3 32.4-12.3 44.7 0l339.9 339.9L853 330c12.5-12.5 32.9-12.5 45.4 0s12.5 32.9 0 45.4L536 737.8s-0.1 0.1-0.1 0.2l-0.7 0.7c-12.3 12.3-32.4 12.3-44.7 0l-363-363c-12.3-12.4-12.3-32.5 0-44.8z\">\r\n                        </path>\r\n                    </svg>\r\n                </span>\r\n                <div className={this.state.show ? \"playlist-tags-container\" : \"playlist-tags-container hidden\"} onClick={this.clickOnBlankArea}>\r\n                    <Link className={this.props.activeTag === '全部' ? \"playlist-main-tag active-tag\" : \"playlist-main-tag\"} to={`/playlist?cat=全部`} onClick={this.tagChange.bind(this, '全部')}>全部</Link>\r\n                    {this.mainTags.map((value, index) => {\r\n                        let theTagTabs = this.mapTagToMain[value]\r\n                        return(\r\n                            <div key={index} className=\"playlist-tag-container\">\r\n                                <div className=\"playlist-tag-class\">{value}</div>\r\n                                <TagItem theTagTabs={theTagTabs} toggleShow={this.toggleShow}/>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        activeTag: theState.activeTag\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        playListTagChange: (tagName) => {\r\n            dispatch(playListTagChange(tagName))\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(TagSelector)","import React, { Component } from 'react'\nimport PlayList from './PlayList'\nimport TagSelector from \"./TagSelector\"\nimport './playListPage.css'\n\nclass PlayListPage extends Component {\n\n    render() {\n        return (\n            <div className=\"playlist-content\">\n                <TagSelector />\n                <PlayList />\n            </div>\n        )\n    }\n}\n\nexport default PlayListPage\n","import * as search from './actionTypes.js'\r\nimport {MusicApi} from '../../api/api.js'\r\n\r\n// 搜索框输入改变\r\nexport const inputChange = (input) => ({\r\n    type: search.INPUT_CHANGE,\r\n    input,\r\n})\r\n\r\n// 开始搜索\r\nexport const searchStarted = (data) => ({\r\n    type: search.SEARCH_STARTED,\r\n    data,\r\n})\r\n\r\n// 搜索成功\r\nexport const searchSuccess = (result, searchContent) => ({\r\n    type: search.SEARCH_SUCCESS,\r\n    result,\r\n    searchContent,\r\n})\r\n\r\n// 搜索失败\r\nexport const searchFailure = (error) => ({\r\n    type: search.SEARCH_FAILURE,\r\n    error,\r\n})\r\n\r\n// 拿到搜索数据\r\nexport const fetchSearchResult = (input, page=1, company='netease') => {\r\n    let limit = 20\r\n    let offset = (Number(page)- 1) * limit\r\n    return (dispatch) => {\r\n        let queryObj = {\r\n            input,\r\n            limit,\r\n            offset,\r\n            company,\r\n        }\r\n        dispatch(searchStarted(input))\r\n        let api = new MusicApi()\r\n        api.searchResult(queryObj, (r) => {\r\n            let searchResult = JSON.parse(r.response)\r\n            console.log('搜索完成', searchResult)\r\n            if (searchResult.code === 200) {\r\n                dispatch(searchSuccess(searchResult, queryObj.input))\r\n            } else {\r\n                dispatch(searchFailure(searchResult))\r\n            }\r\n        })\r\n    }\r\n}","export const INPUT_CHANGE = 'NAV/INPUT_CHANGE'\r\n\r\nexport const SEARCH_STARTED = 'NAV/SEARCH_STARTED'\r\n\r\nexport const SEARCH_SUCCESS = 'NAV/SEARCH_SUCCESS'\r\n\r\nexport const SEARCH_FAILURE = 'NAV/SEARCH_FAILURE'","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport  {inputChange, fetchSearchResult} from '../actions'\r\nimport {withRouter} from \"react-router-dom\"\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.onSearch = this.onSearch.bind(this)\r\n        this.onChange = this.onChange.bind(this)\r\n        this.onKeyPress = this.onKeyPress.bind(this)\r\n    }\r\n\r\n    argsFromQuery(query) {\r\n        let o = {}\r\n        if (query.length === 0) {\r\n            return o\r\n        }\r\n        query.split('&').forEach(e => {\r\n            let [k, v] = e.split('=')\r\n            o[k] = v\r\n        })\r\n        return o\r\n    }\r\n\r\n    parseUrlGetSearchContent(location) {\r\n        if (location.pathname === \"/search\") {\r\n            let searchQuery = location.search.slice(1)\r\n            let searchContent = this.argsFromQuery(searchQuery)\r\n            let value = decodeURI(searchContent['s'])\r\n            if (value !== undefined) {\r\n                return value\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        let location = this.props.location\r\n        this.value = this.parseUrlGetSearchContent(location)\r\n        if (this.value === 'undefined') {\r\n            this.value = ''\r\n        }\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState, nextContext) {\r\n        if (nextProps.location.search !== this.props.location.search) {\r\n            let location = nextProps.location\r\n            this.value = this.parseUrlGetSearchContent(location)\r\n        }\r\n        console.log('组件更新了')\r\n    }\r\n\r\n    onChange(event) {\r\n        this.value = event.target.value\r\n        this.props.inputChange(this.value)\r\n    }\r\n\r\n    onSearch() {\r\n        let hasInputted = this.props.searchInput === undefined || this.props.searchInput === ''\r\n        if (hasInputted) {\r\n            return 0\r\n        }\r\n        let isEqualToOldSearchContent = this.props.searchContent !== this.props.searchInput\r\n        let isAtSearchPage = window.location.pathname !== '/search'\r\n        if (isEqualToOldSearchContent || isAtSearchPage) {\r\n            let urlObj = this.getSearchUrl()\r\n            this.props.history.push(urlObj)\r\n            // this.props.searchAction(this.props.searchInput)\r\n        }\r\n    }\r\n\r\n    getSearchUrl() {\r\n        console.log('this.props.searchInput', this.props.searchInput)\r\n        let name = this.props.searchInput.trim()\r\n        if (name === undefined) {\r\n            name = ''\r\n        }\r\n        let page = 1\r\n        let o = {\r\n            pathname: '/search',\r\n            search: `?s=${name}&page=${page}`,\r\n        }\r\n        return o\r\n    }\r\n\r\n    onKeyPress(event) {\r\n        if (event.key === 'Enter') {\r\n            this.onSearch()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className={(this.props.searchResult === undefined) ? \"search-bar-container before-searched\" : \"search-bar-container\"}>\r\n                <input type=\"text\" className=\"search-bar-input\" placeholder=\"搜索音乐、MV、歌单、用户\" onChange={this.onChange} onKeyDown={this.onKeyPress} value={this.value || ''}/>\r\n                <button className=\"search-bar-button\" onClick={this.onSearch}>搜索</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.SearchBarReducer\r\n    return {\r\n        searchInput: theState.searchInput,\r\n        searchContent: theState.searchContent,\r\n        searchResult: theState.searchResult,\r\n        status: theState.status,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        searchAction: (input, page) => {\r\n            dispatch(fetchSearchResult(input, page))\r\n        },\r\n        inputChange:  (input) => {\r\n            dispatch(inputChange(input))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(withRouter(SearchBar))","export const timeFormat = function(seconds) {\r\n    if (!seconds) {\r\n        return '00:00'\r\n    }\r\n    let m = String(Math.floor(seconds / 60))\r\n    let s = String(Math.floor(seconds % 60))\r\n    if (s.length === 1) {\r\n        s = \"0\" + s\r\n    }\r\n    if (m.length === 1) {\r\n        m = \"0\" + m\r\n    }\r\n    return `${m}:${s}`\r\n}\r\n\r\nexport const loadSongListInLocalStorage = () => {\r\n    let songList = JSON.parse(localStorage.getItem('songList'))\r\n    if (songList === null) {\r\n        songList = []\r\n    }\r\n    return songList\r\n}\r\n\r\nexport const saveSongToLocalStorage = (songInfo) => {\r\n    let songList = JSON.parse(localStorage.getItem('songList'))\r\n    if (songList === null) {\r\n        songList = []\r\n    }\r\n    songList.push(songInfo)\r\n    localStorage.setItem('songList', JSON.stringify(songList))\r\n}\r\n\r\nexport const deleteSongInLocalStorage = (songIndex) => {\r\n    let songList = JSON.parse(localStorage.getItem('songList'))\r\n    songList.splice(songIndex, 1)\r\n    localStorage.setItem('songList', JSON.stringify(songList))\r\n}\r\n\r\nexport const getCurrentSongInfo = (theState) => {\r\n    let songList = theState.songList\r\n    let currentSongIndex = theState.currentSongExtraInfo.currentSongIndex\r\n    let currentSongInfo = {}\r\n    if (currentSongIndex === -1) {\r\n        currentSongInfo = theState.initSongInfo\r\n    } else {\r\n        currentSongInfo = songList[currentSongIndex]\r\n    }\r\n    return currentSongInfo\r\n}\r\n\r\nexport const parseLyric = (lyricsArray) => {\r\n    let result = []\r\n    for (let i = 0; i < lyricsArray.length; i++) {\r\n        let oneLyricString = lyricsArray[i]\r\n        let oneLyric = ''\r\n        let time = -1\r\n        for (let j = 0; j < oneLyricString.length; j++) {\r\n            let e = oneLyricString[j]\r\n            if (e === ']') {\r\n                oneLyric = oneLyricString.slice(j + 1)\r\n                let timeList = oneLyricString.slice(1, j).split(':')\r\n                time = Number(timeList[0]) * 60 + Number(timeList[1])\r\n                break\r\n            }\r\n        }\r\n        if (!isNaN(time)) {\r\n            if (oneLyric === '') {\r\n                oneLyric = '...'\r\n            }\r\n            let lyricItem = [\r\n                time,\r\n                oneLyric,\r\n            ]\r\n            result.push((lyricItem))\r\n        }\r\n    }\r\n    return result\r\n}","import * as audioController from './actionTypes'\r\nimport {MusicApi} from '../../api/api.js'\r\nimport {parseLyric} from '../../utils'\r\n\r\nexport const changeAudioStatus = (status) => {\r\n    return {\r\n        type: audioController.CHANGE_AUDIO_STATUS,\r\n        status\r\n    }\r\n}\r\n\r\nexport const changePlayMode = (modeType) => {\r\n    return {\r\n        type: audioController.CHANGE_PLAY_MODE,\r\n        modeType,\r\n    }\r\n}\r\n\r\nexport const saveCurrentLyricIndex = (currentLyricIndex) => {\r\n    return {\r\n        type: audioController.GET_CURRENT_TIME,\r\n        currentLyricIndex,\r\n    }\r\n}\r\n\r\nexport const appendTheSong = (songInfo) => {\r\n    return {\r\n        type: audioController.APPEND_THE_SONG,\r\n        songInfo,\r\n    }\r\n}\r\n\r\nexport const deleteTheSong = (songIndex) => {\r\n    return {\r\n        type: audioController.DELETE_THE_SONG,\r\n        songIndex,\r\n    }\r\n}\r\n\r\nexport const playTheSongInPage = (songInfo) => {\r\n    return {\r\n        type: audioController.PLAY_THE_SONG_IN_PAGE,\r\n        songInfo,\r\n    }\r\n}\r\n\r\nexport const playTheSongInList = (songIndex) => {\r\n    return {\r\n        type: audioController.PLAY_THE_SONG_IN_LIST,\r\n        songIndex,\r\n    }\r\n}\r\n\r\nexport const playNextSong = (modeType, loopStep=1) => {\r\n    return {\r\n        type: audioController.PLAY_NEXT_SONG,\r\n        modeType,\r\n        loopStep,\r\n    }\r\n}\r\n\r\nexport const getLyric = (lyric) => {\r\n    return {\r\n        type: audioController.GET_LYRIC,\r\n        lyric,\r\n    }\r\n}\r\n\r\nexport const getLyricFromNet = (lrcUrl) => {\r\n    return (dispatch) => {\r\n        let api = new MusicApi()\r\n        api.getLyric(lrcUrl, (r) => {\r\n            let l = r.response\r\n            let lyricList = l.split('\\n').slice(0, -1)\r\n            if (lyricList.length === 0) {\r\n                lyricList = [l]\r\n            }\r\n            let result = parseLyric(lyricList)\r\n            dispatch(getLyric(result))\r\n        })\r\n    }\r\n}","export const CHANGE_AUDIO_STATUS = 'BAR/CHANGE_AUDIO_STATUS'\r\n\r\nexport const APPEND_THE_SONG = 'PAGE/APPEND_THE_SONG'\r\n\r\nexport const DELETE_THE_SONG = 'AUDIO/DELETE_THE_SONG'\r\n\r\nexport const PLAY_THE_SONG_IN_PAGE = 'PAGE/PLAY_THE_SONG'\r\n\r\nexport const PLAY_THE_SONG_IN_LIST = 'LIST/PLAY_THE_SONG'\r\n\r\nexport const PLAY_NEXT_SONG = 'AUDIO/PLAY_NEXT_SONG'\r\n\r\nexport const GET_LYRIC = 'AUDIO/GET_LYRIC'\r\n\r\nexport const GET_CURRENT_TIME = 'AUDIO/GET_CURRENT_TIME'\r\n\r\nexport const CHANGE_PLAY_MODE = 'AUDIO/CHANGE_PLAY_MODE'","import React, {Component} from 'react'\r\nimport {getCurrentSongInfo, timeFormat} from '../../../utils'\r\nimport {connect} from 'react-redux'\r\nimport {actions} from '../../audioController/'\r\n\r\nconst appendTheSong = actions.appendTheSong\r\nconst playTheSongInPage = actions.playTheSongInPage\r\n\r\nclass SearchItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handlePlay = this.handlePlay.bind(this)\r\n        this.handleAppend = this.handleAppend.bind(this)\r\n        this.handlePause = this.handlePause.bind(this)\r\n    }\r\n\r\n    handlePlay() {\r\n        if (this.props.currentSongId !== this.props.result.id) {\r\n            this.props.playTheSongInPage(this.props.result)\r\n            console.log('this.props.songInfo，第一次放', this.props.result)\r\n        } else {\r\n            let audio = document.querySelector('audio')\r\n            audio.play()\r\n        }\r\n    }\r\n\r\n    handlePause() {\r\n        let audio = document.querySelector('audio')\r\n        audio.pause()\r\n    }\r\n\r\n    getPlayOrPauseButtonSvg() {\r\n        let id = this.props.result.id\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        if (isTheSongPlaying) {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M910.8 303.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S129.8 720.8 129.8 509.2 301.4 126.1 513 126.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C654.6 78.9 585.9 61.5 513 61.5 265.7 61.5 65.3 262 65.3 509.2S265.7 956.9 513 956.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                    <path d=\"M385.4 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.6 0 32-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9zM578.9 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.5 0 31.9-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9z\">\r\n                    </path>\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        } else {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                    <path d=\"M415.8 679.9c5.9 0 11.5-1.6 16.2-4.5l231.1-134.6c10.9-5.2 18.5-16.3 18.5-29.2 0-11.9-6.4-22.3-16-27.8L439.7 352.2c-5.8-6.7-14.4-10.9-23.9-10.9-17.6 0-31.8 14.4-31.8 32.1 0 0.6 0 1.2 0.1 1.8l-0.4 0.2 0.5 269c-0.1 1.1-0.2 2.2-0.2 3.4 0 17.7 14.3 32.1 31.8 32.1z\">\r\n                    </path>\r\n                    <path d=\"M909.8 306.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S128.8 723.8 128.8 512.2 300.4 129.1 512 129.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C653.6 81.9 584.9 64.5 512 64.5 264.7 64.5 64.3 265 64.3 512.2S264.7 959.9 512 959.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        }\r\n    }\r\n\r\n    handleAppend() {\r\n        this.props.appendTheSong(this.props.result)\r\n    }\r\n\r\n    render() {\r\n        let result = this.props.result\r\n        let id = this.props.result.id\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        let isOdd = (this.props.index + 1) % 2 !== 0\r\n        return(\r\n            <div className={isOdd ? \"search-item-container odd\" : \"search-item-container\"}>\r\n                <span className=\"search-item-number\">{`${this.props.index + 1}.`}</span>\r\n                <div className=\"search-item-name\">\r\n                    <span className=\"song-name\" title={result.name}>{result.name}</span>\r\n                    <span className=\"search-item-play\" onClick={isTheSongPlaying ? this.handlePause : this.handlePlay}>\r\n                        {this.getPlayOrPauseButtonSvg()}\r\n                    </span>\r\n                    <span className=\"search-item-append\" onClick={this.handleAppend}>\r\n                        <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M197.3 197.3c-173.8 173.8-173.8 455.5 0 629.3s455.5 173.8 629.3 0 173.8-455.5 0-629.3-455.5-173.7-629.3 0zM907 512c0 51.3-9.7 101.3-28.9 148.7-19.9 49-49.1 92.9-86.8 130.6s-81.7 66.9-130.6 86.8C613.3 897.3 563.3 907 512 907c-51.3 0-101.3-9.7-148.7-28.9-49-19.9-92.9-49.1-130.6-86.8s-66.9-81.7-86.8-130.6C126.7 613.3 117 563.3 117 512c0-51.3 9.7-101.3 28.9-148.7 19.9-49 49.1-92.9 86.8-130.6s81.7-66.9 130.6-86.8C410.7 126.7 460.7 117 512 117c51.3 0 101.3 9.7 148.7 28.9 49 19.9 92.9 49.1 130.6 86.8s66.9 81.7 86.8 130.6C897.3 410.7 907 460.7 907 512zM537 262v225h225v50H537v225h-50V537H262v-50h225V262h50z\">\r\n                        </path>\r\n                        </svg>\r\n                    </span>\r\n                </div>\r\n                <div className=\"search-item-singer name\">\r\n                    <span title={result.singer}>{result.singer}</span>\r\n                </div>\r\n                <div className=\"search-item-time\">\r\n                    {timeFormat(result.time)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    let currentSongId = currentSongInfo.id\r\n    return {\r\n        AudioStatus: theState.AudioStatus,\r\n        currentSongId: currentSongId,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        appendTheSong: (songInfo) => {\r\n            dispatch(appendTheSong(songInfo))\r\n        },\r\n        playTheSongInPage: (songInfo) => {\r\n            dispatch(playTheSongInPage(songInfo))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchItem)","import React, {Component} from 'react'\r\nimport SearchItem from './SearchItem'\r\nimport {connect} from 'react-redux'\r\n\r\nclass SearchList extends Component {\r\n\r\n    render() {\r\n        let searchData = this.props.searchResult.data\r\n        return(\r\n            <div className=\"search-list-container\">\r\n                <span className=\"search-head-number\">\r\n                </span>\r\n                <div className=\"search-head-container\">\r\n                    <div className=\"search-head-name name\">\r\n                        <span title=\"歌名\">歌曲</span>\r\n                    </div>\r\n                    <div className=\"search-head-singer name\">\r\n                        <span title=\"歌手\">歌手</span>\r\n                    </div>\r\n                    <div className=\"search-head-time\">\r\n                        时长\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-list\">\r\n                {searchData.map((value, index) => (\r\n                    <SearchItem key={index} index={index} result={value}/>\r\n                ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.SearchBarReducer\r\n    return {\r\n        searchResult: theState.searchResult\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, null)(SearchList)","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as Status from '../status'\r\nimport {fetchSearchResult, inputChange} from '../actions'\r\nimport SearchBar from './SearchBar'\r\nimport SearchList from './SearchList'\r\nimport './SearchPage.css'\r\n\r\nclass SearchPage extends Component {\r\n    argsFromQuery(query) {\r\n        let o = {}\r\n        if (query.length === 0) {\r\n            return o\r\n        }\r\n        query.split('&').forEach(e => {\r\n            let [k, v] = e.split('=')\r\n            o[k] = v\r\n        })\r\n        return o\r\n    }\r\n\r\n    getSearchContent(location) {\r\n        let searchPath = location.search\r\n        let searchQuery = searchPath.slice(1)\r\n        let searchContent = this.argsFromQuery(searchQuery)\r\n        if (searchContent !== undefined) {\r\n            let {s, page} = {...searchContent}\r\n            return {s, page}\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let o = this.getSearchContent(this.props.location)\r\n        let {s, page} = {...o}\r\n        if (s !== undefined && s !== this.props.searchContent) {\r\n            this.props.searchAction(s, page)\r\n            this.props.inputChange(s)\r\n        }\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState, nextContext) {\r\n        if (nextProps.location.search !== this.props.location.search) {\r\n            let location = nextProps.location\r\n            let o = this.getSearchContent(location)\r\n            let {s} = {...o}\r\n            this.props.searchAction(s)\r\n        }\r\n    }\r\n\r\n    showSearchResult() {\r\n        switch (this.props.status) {\r\n            case Status.LOADING: {\r\n                return (\r\n                    <div className=\"loading-container\">\r\n                        <svg className=\"load\" viewBox=\"25 25 50 50\">\r\n                            <circle className=\"loading\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\"/>\r\n                        </svg>\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.SUCCESS: {\r\n                return (\r\n                        <SearchList />\r\n                )\r\n            }\r\n            case Status.FAILURE: {\r\n                return (\r\n                    <div className=\"failed-container\">歌曲搜索失败</div>\r\n                )\r\n            }\r\n            default: {\r\n                return (\r\n                    <div></div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"search-page-content\">\r\n                <SearchBar />\r\n                {this.showSearchResult()}\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.SearchBarReducer\r\n    return {\r\n        status: theState.status,\r\n        searchResult: theState.searchResult,\r\n        searchContent: theState.searchContent,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        searchAction: (input, page) => {\r\n            dispatch(fetchSearchResult(input, page))\r\n        },\r\n        inputChange: (input) => {\r\n            dispatch(inputChange(input))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(SearchPage)","export const LOADING = 'loading'\r\nexport const SUCCESS = 'success'\r\nexport const FAILURE = 'failure'","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {SearchItem} from \"../../searchPage/\"\r\nimport {deleteItemDetail} from '../actions'\r\nimport * as Status from \"../status\"\r\n\r\nclass ModalPortal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.deleteDetailInfo = this.deleteDetailInfo.bind(this)\r\n        this.descriptionToggle = this.descriptionToggle.bind(this)\r\n        this.state = {\r\n            isAllDescriptionShowed: false,\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        let body = document.querySelector(\"body\")\r\n        // let musicPlayer = document.querySelector('.music-controller')\r\n        if (this.props.albumStatus !== Status.INIT) {\r\n            body.classList.add('ban-scroll')\r\n            // musicPlayer.classList.add('ban-scrollbar')\r\n        } else {\r\n            body.classList.remove('ban-scroll')\r\n            // musicPlayer.classList.remove('ban-scrollbar')\r\n        }\r\n    }\r\n\r\n    descriptionToggle() {\r\n        this.setState({\r\n            isAllDescriptionShowed: !this.state.isAllDescriptionShowed,\r\n        })\r\n    }\r\n\r\n    deleteDetailInfo() {\r\n        this.props.deleteItemDetail()\r\n        this.setState({\r\n            isAllDescriptionShowed: false,\r\n        })\r\n    }\r\n\r\n    dataCleaning(fetchedData) {\r\n        let singerList = fetchedData.artists.map(artist => artist.name)\r\n        let singer = singerList.join('/')\r\n        let cleanedData = {\r\n            id: fetchedData.id,\r\n            name: fetchedData.name,\r\n            singer,\r\n            time: fetchedData.duration / 1000,\r\n            pic: fetchedData.album.blurPicUrl,\r\n            lrc: `https://v1.itooi.cn/netease/lrc?id=${fetchedData.id}`,\r\n            url: `https://v1.itooi.cn/netease/url?id=${fetchedData.id}`,\r\n        }\r\n        return cleanedData\r\n    }\r\n\r\n    showAlbumList() {\r\n        switch (this.props.albumStatus) {\r\n            case Status.INIT: {\r\n                return null\r\n            }\r\n            case Status.LOADING: {\r\n                return (\r\n                    <div className=\"pop-up\">\r\n                        <div className=\"pop-window\">\r\n                            <span className=\"modal-portal-toggle\" onClick={this.deleteDetailInfo}>×</span>\r\n                            <div className=\"loading-container\">\r\n                                <svg className=\"load\" viewBox=\"25 25 50 50\">\r\n                                    <circle className=\"loading\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\"/>\r\n                                </svg>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.SUCCESS: {\r\n                let data = this.props.albumDetailInfo.data\r\n                console.log('data', data)\r\n                return (\r\n                    <div className=\"pop-up\">\r\n                        <div className=\"pop-window\">\r\n                            <span className=\"modal-portal-toggle\" onClick={this.deleteDetailInfo}>×</span>\r\n                            <div className=\"album-list-container\">\r\n                                <div className={this.state.isAllDescriptionShowed ? \"album-list-info all-description-showed\" : \"album-list-info\"}>\r\n                                    <img className=\"album-list-bg\" src={data.coverImgUrl} alt=\"专辑图片\"/>\r\n                                    <span className=\"album-list-pic\">\r\n                                        <img src={data.coverImgUrl} alt=\"专辑图片\"/>\r\n                                    </span>\r\n                                    <div className=\"album-list-name\" title={data.name}>\r\n                                            {`歌单：${data.name}`}\r\n                                    </div>\r\n                                    <p className={this.state.isAllDescriptionShowed ? \"album-list-description all-description-showed\" : \"album-list-description\"}>\r\n                                        <span>介绍：</span><br/>\r\n                                        {`${data.description}`}\r\n                                    </p>\r\n                                    {/*<p className={this.state.isAllDescriptionShowed ? \"after-description hidden\" : \"after-description\"}>*/}\r\n                                        {/*...*/}\r\n                                    {/*</p>*/}\r\n                                    <span className=\"description-toggle\" onClick={this.descriptionToggle}>{this.state.isAllDescriptionShowed ? '收起' : '展开'}</span>\r\n                                </div>\r\n                                <div className=\"album-list-count\">\r\n                                    {`歌曲列表 (${data.trackCount}首歌)`}\r\n                                </div>\r\n                                <div className=\"album-list-items\">\r\n                                    {data.tracks.map((value, index) => {\r\n                                        return <SearchItem key={index} index={index} result={this.dataCleaning(value)}/>\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            default: {\r\n                return null\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pop-up-container\">\r\n                {this.showAlbumList()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        albumDetailInfo: theState.albumDetailInfo,\r\n        albumStatus: theState.albumStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        deleteItemDetail: () => {\r\n            dispatch(deleteItemDetail())\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalPortal)","import React, {Component} from 'react'\r\n\r\nclass NotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                NotFound\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NotFound","import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport {connect} from 'react-redux'\n\nclass Menu extends Component {\n    constructor(props) {\n        super(props)\n\n        this.onClick = this.onClick.bind(this)\n    }\n\n    onClick() {\n\n    }\n\n    render() {\n        let searchContent = this.props.searchContent\n        let searchPath = `?s=${searchContent}`\n        if (searchContent === '' || searchContent === undefined) {\n            searchPath = ''\n        }\n        let menus = [\n            {\n                text: '首页',\n                pathname: '/',\n                search: '',\n            },\n            {\n                text: '热门歌单',\n                pathname: `/playlist`,\n                search: `?cat=${this.props.activeTag}`,\n            },\n            {\n                text: '搜索',\n                pathname: `/search`,\n                search: searchPath,\n            },\n        ]\n        return (\n            <nav>\n                <ul className=\"nav-container\">\n                    {\n                        menus.map((e, index) => {\n                                let href = `${e.pathname}${e.search}`\n                                let isCurrent = this.props.currentPathname === e.pathname\n                                // Link 组件相当于 a 标签的作用, to 相当于 href 属性\n                                return (\n                                    <li className=\"nav-item\" key={index}>\n                                        <Link className={isCurrent? \"nav-link nav-link-current\" : \"nav-link\"} to={href}>{e.text}</Link>\n                                    </li>\n                                )\n                            }\n                        )\n                    }\n                </ul>\n            </nav>\n        )\n    }\n}\n\nconst mapStateTopProps = (state, ownProps) => {\n    return {\n        activeTag: state.PlayListReducer.activeTag,\n        searchContent: state.SearchBarReducer.searchContent,\n        currentPathname: ownProps.location.pathname,\n    }\n}\n\nexport default withRouter(connect(mapStateTopProps, null)(Menu))\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {changeAudioStatus, getLyricFromNet, saveCurrentLyricIndex, changePlayMode, playNextSong} from \"../actions\"\r\nimport {timeFormat, getCurrentSongInfo} from '../../../utils'\r\n\r\nclass AudioController extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentTime: null,\r\n            duration: null,\r\n            sliding: false,\r\n            hover: false,\r\n        }\r\n        this.audio = React.createRef()\r\n        this.songSlider = React.createRef()\r\n        this.playOrPause = this.playOrPause.bind(this)\r\n        this.clickToSeek = this.clickToSeek.bind(this)\r\n        this.dragToSeek = this.dragToSeek.bind(this)\r\n        this.AfterDragToSeek = this.AfterDragToSeek.bind(this)\r\n        this.handleHover = this.handleHover.bind(this)\r\n        this.changePlayMode = this.changePlayMode.bind(this)\r\n        this.changeToPlayNextSong = this.changeToPlayNextSong.bind(this)\r\n        this.toggleList = this.toggleList.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        const a = this.audio.current\r\n        a.addEventListener('canplay', () => {\r\n            let lrcUrl = this.props.currentSongInfo.lrc\r\n            this.props.getLyricFromNet(lrcUrl)\r\n            const {currentTime, duration} = a\r\n            this.setState({\r\n                currentTime,\r\n                duration\r\n            })\r\n            console.log('加载完了')\r\n            a.play()\r\n        })\r\n        a.addEventListener('play', () => {\r\n            console.log('在播放了')\r\n            this.props.changeAudioStatus('play')\r\n        })\r\n        a.addEventListener('pause', () => {\r\n            console.log('暂停了一下')\r\n            this.props.changeAudioStatus('pause')\r\n        })\r\n        a.addEventListener('timeupdate', () => {\r\n            if (!this.state.sliding) {\r\n                const {currentTime} = a\r\n                this.setState({\r\n                    currentTime\r\n                })\r\n                this.parseCurrentTimeToGetLyricIndex(currentTime)\r\n            }\r\n        })\r\n        a.addEventListener('ended', () => {\r\n            this.props.playNextSong(this.props.playMode)\r\n            if (this.props.lengthOfSongList === 1 || this.props.playMode === 'circle') {\r\n                a.play()\r\n            }\r\n        })\r\n    }\r\n\r\n    parseCurrentTimeToGetLyricIndex(currentTime) {\r\n        let lyricArray = this.props.currentSongExtraInfo.currentLyric\r\n        for (let i = 0; i < lyricArray.length; i++) {\r\n            let time = lyricArray[i][0]\r\n            if (Math.abs(time - currentTime) < 0.3) {\r\n                this.props.saveCurrentLyricIndex(i)\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    getLyricIndexWhenJumpSong(currentTime) {\r\n        let lyricArray = this.props.currentSongExtraInfo.currentLyric\r\n        let index = 0\r\n        for (let i = 0; i < lyricArray.length; i++) {\r\n            let time = lyricArray[i][0]\r\n            if (time > currentTime) {\r\n                index = i - 1\r\n                break\r\n            }\r\n        }\r\n        let theLastLyric = lyricArray[lyricArray.length - 1]\r\n        if ((theLastLyric !== undefined) && (currentTime > theLastLyric[0])) {\r\n            index = lyricArray.length - 1\r\n        }\r\n        this.props.saveCurrentLyricIndex(index)\r\n    }\r\n\r\n    playOrPause() {\r\n        if (this.props.currentSongInfo.id === -1) {\r\n            return 0\r\n        }\r\n        const a = this.audio.current\r\n        if (this.props.AudioStatus === 'pause') {\r\n            a.play()\r\n            this.props.changeAudioStatus('play')\r\n        } else {\r\n            a.pause()\r\n            this.props.changeAudioStatus('pause')\r\n        }\r\n    }\r\n\r\n    getPlayButtonSvg() {\r\n        switch (this.props.AudioStatus) {\r\n            case 'play': {\r\n                return (\r\n                    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M243.2 208h166.4v608H243.2zM614.4 208h166.4v608h-166.4z\">\r\n                        </path>\r\n                    </svg>\r\n                )\r\n            }\r\n            case 'pause': {\r\n                return (\r\n                    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M289.5 844.3V179.7l445 332.3-445 332.3z\">\r\n                        </path>\r\n                    </svg>\r\n                )\r\n            }\r\n            default: {\r\n                return (\r\n                    <div>default</div>\r\n                )\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    clickToSeek(event) {\r\n        const a = this.audio.current\r\n        let target = event.target\r\n        if (!target.classList.contains('slider-point')) {\r\n            let { left, width } = event.currentTarget.getBoundingClientRect()\r\n            let clickPosition = (event.clientX - left) / width\r\n            let currentTime = clickPosition * a.duration\r\n            if (!isNaN(currentTime)) {\r\n                a.currentTime = currentTime\r\n                this.getLyricIndexWhenJumpSong(currentTime)\r\n            } else {\r\n                alert(`currentTime出现NaN了${currentTime}`)\r\n            }\r\n        }\r\n    }\r\n\r\n    dragToSeek() {\r\n        let isRunning = false\r\n        let isFirstDrag = true\r\n        return (event) => {\r\n            event.persist()\r\n            if (isRunning || isFirstDrag ) {\r\n                isFirstDrag = false\r\n                return\r\n            }\r\n            isRunning = true\r\n            window.requestAnimationFrame(() => {\r\n                this.seek(event)\r\n                isRunning = false\r\n            })\r\n            if (!this.state.sliding) {\r\n                this.setState({\r\n                    sliding: true\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    seek(event) {\r\n        const a = this.audio.current\r\n        let {left, width} = this.songSlider.current.getBoundingClientRect()\r\n        let dragPosition = (event.clientX - left) / width\r\n        if (dragPosition >= 0 && dragPosition <= 1) {\r\n            let currentTime = a.duration * dragPosition\r\n            this.setState({\r\n                currentTime\r\n            })\r\n        }\r\n    }\r\n\r\n    AfterDragToSeek() {\r\n        const a = this.audio.current\r\n        a.currentTime = this.state.currentTime\r\n        this.getLyricIndexWhenJumpSong(this.state.currentTime)\r\n        this.setState({\r\n            sliding: false\r\n        })\r\n    }\r\n\r\n    handleHover() {\r\n        this.setState({\r\n            hover: !this.state.hover\r\n        })\r\n    }\r\n\r\n    toggleList() {\r\n        let list = document.querySelector('.song-list')\r\n        list.classList.toggle('hidden')\r\n        let pop = document.querySelector('.pop-up')\r\n        if (pop === null) {\r\n            let body = document.querySelector(\"body\")\r\n            body.classList.toggle('ban-scroll')\r\n        }\r\n        let musicPlayer = document.querySelector('.audio-controller')\r\n        musicPlayer.classList.toggle('playlist-opened')\r\n        const a = this.audio.current\r\n        this.getLyricIndexWhenJumpSong(a.currentTime)\r\n        let songList = document.querySelector(('.song-list-container'))\r\n        let {height} = songList.getBoundingClientRect()\r\n        let i = Math.floor(height / 50 / 2)\r\n        songList.scrollTop = this.props.currentSongExtraInfo.currentSongIndex * 50 - 50 * i\r\n    }\r\n\r\n    changePlayMode() {\r\n        let modeList = ['loop', 'circle', 'random']\r\n        let index = modeList.indexOf(this.props.playMode)\r\n        let nextIndex = (index + 1) % modeList.length\r\n        let nextModeType = modeList[nextIndex]\r\n        this.props.changePlayMode(nextModeType)\r\n    }\r\n\r\n    getModeButtonSvg() {\r\n        switch (this.props.playMode) {\r\n            case 'loop': {\r\n                return (\r\n                    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M922 607.1V887H102V157h612.2V58.2l200 125-200 125V207H152v630h720V607.1h50z\">\r\n                        </path>\r\n                    </svg>\r\n                )\r\n            }\r\n            case 'circle': {\r\n                return (\r\n                    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                        <path\r\n                            d=\"M922 607.1V887H102V157h612.2V58.2l200 125-200 125V207H152v630h720V607.1h50zM560.5 737.6V306.4h-34c-9.2 18.6-24.8 37.7-46.9 57.4-22.1 19.7-47.9 36.5-77.3 50.4v51c16.4-6.1 34.9-15.1 55.5-27.2s37.3-24.2 50-36.3v336h52.7z\">\r\n                        </path>\r\n                    </svg>\r\n                )\r\n            }\r\n            case 'random': {\r\n                return (\r\n                    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M726.6 774H594.4L458.8 512l135.6-262h132.2v98.7l200-125-200-125V200H564.4L430.7 457.7 297.4 200h-200v50h169.2l135.9 262-135.9 262H97.4v50h200l133.3-257.7L564.4 824h162.2v101.3l200-125-200-125z\">\r\n                        </path>\r\n                    </svg>\r\n                )\r\n            }\r\n            default: {\r\n                return <div>default</div>\r\n            }\r\n        }\r\n    }\r\n\r\n    changeToPlayNextSong(loopStep) {\r\n        return () => {\r\n            this.props.playNextSong(this.props.playMode, loopStep)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {currentTime, duration} = this.state\r\n        let {name, singer, pic, url} = this.props.currentSongInfo\r\n        let playMode = this.props.playMode\r\n        let mapEnglishToChinese = {\r\n            loop: '列表循环',\r\n            circle: '单曲循环',\r\n            random: '随机播放',\r\n        }\r\n        let playModeTitle = mapEnglishToChinese[this.props.playMode]\r\n        return (\r\n            <div className=\"audio-controller\">\r\n                <audio src={url} ref={this.audio}>\r\n                </audio>\r\n                <div className=\"album-cover\">\r\n                    <img src={pic} alt=\"专辑图片\" />\r\n                </div>\r\n                <div className=\"extra-info-container\">\r\n                    <div className={this.state.hover? \"song-slider hover\" : \"song-slider\"} onClick={this.clickToSeek} onMouseOver={this.handleHover} onMouseOut={this.handleHover} ref={this.songSlider}>\r\n                        <div className=\"slider-bg\">\r\n                        </div>\r\n                        <div className=\"slider-progress\" style={{width: `${ currentTime / duration * 100 }%`}}>\r\n                        <span className=\"slider-point\" draggable=\"true\" onDrag={this.dragToSeek()} onDragEnd={this.AfterDragToSeek}>\r\n                        </span>\r\n                        </div>\r\n                    </div>\r\n                    <span className=\"music-timeline\">\r\n                        <span id=\"music-time-now\">{timeFormat(currentTime)}</span>\r\n                        <span> / </span>\r\n                        <span id=\"music-time-all\">{timeFormat(duration)}</span>\r\n                    </span>\r\n                    <div className=\"song-info\">\r\n                        <div className=\"song-info-name\" title={name}>{name}</div>\r\n                        <div className=\"song-info-singer\" title={singer}>{singer}</div>\r\n                    </div>\r\n                    <div className=\"controller-btn\">\r\n                        <span className=\"back-btn\" title=\"上一首(ctrl+←)\" onClick={this.changeToPlayNextSong(-1)}>\r\n                            <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                                <path d=\"M362.3 512l445-332.3v664.5L362.3 512zM216.7 179.7h80v664.5h-80V179.7z\">\r\n                                </path>\r\n                            </svg>\r\n                        </span>\r\n                        <span className={[\"play-btn\", this.props.AudioStatus].join(' ')} title=\"播放/暂停(p)\" onClick={this.playOrPause}>\r\n                            {this.getPlayButtonSvg()}\r\n                        </span>\r\n                        <span className=\"next-btn\" title=\"下一首(ctrl+→)\" onClick={this.changeToPlayNextSong(1)}>\r\n                            <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                                <path d=\"M216.7 844.3V179.7l445 332.3-445 332.3z m590.6 0h-80V179.7h80v664.6z\">\r\n                                </path>\r\n                            </svg>\r\n                        </span>\r\n                        <span className=\"volume-btn icon\">\r\n                            <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                                <path d=\"M697.5 76l-497 230.6-147.3-20v420l147.3-20 497 230.6V76z m-50 760.7l-424.9-195-13.7-6.8-15.2 2.1-90.6 12.3V343.8l90.6 12.3 15.2 2.1 13.7-6.8 424.9-194.9v680.2zM812 612h-50V412h50v200z m204.7 200h-50V212h50v600zM914.3 712h-50V312h50v400z\">\r\n                                </path>\r\n                            </svg>\r\n                        </span>\r\n                        <span className={`mode-btn icon ${playMode}`} data-mode={playMode} title={playModeTitle} onClick={this.changePlayMode}>\r\n                            {this.getModeButtonSvg()}\r\n                        </span>\r\n                        <span className=\"list-btn icon\" title=\"播放列表\" onClick={this.toggleList}>\r\n                            <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                                <path d=\"M91.9 165.2h50v50h-50v-50z m150.2 0v50h690v-50h-690zM91.9 429.7h50v-50h-50v50z m150.2 0h690v-50h-690v50zM91.9 644.3h50v-50h-50v50z m150.2 0h690v-50h-690v50zM91.9 858.8h50v-50h-50v50z m150.2 0h690v-50h-690v50z\">\r\n                                </path>\r\n                            </svg>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    let lengthOfSongList = theState.songList.length\r\n    return {\r\n        lengthOfSongList: lengthOfSongList,\r\n        AudioStatus: theState.AudioStatus,\r\n        currentSongInfo: currentSongInfo,\r\n        currentSongExtraInfo: theState.currentSongExtraInfo,\r\n        playMode: theState.playMode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeAudioStatus: (status) => {\r\n            dispatch(changeAudioStatus(status))\r\n        },\r\n        getLyricFromNet: (url) => {\r\n            dispatch(getLyricFromNet(url))\r\n        },\r\n        saveCurrentLyricIndex: (currentLyricIndex) => {\r\n            dispatch(saveCurrentLyricIndex(currentLyricIndex))\r\n        },\r\n        changePlayMode: (modeType) => {\r\n            dispatch(changePlayMode(modeType))\r\n        },\r\n        playNextSong: (modeType, loopStep) => {\r\n            dispatch(playNextSong(modeType, loopStep))\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AudioController)","import React, {Component} from 'react'\r\nimport {timeFormat, getCurrentSongInfo} from '../../../utils'\r\nimport {connect} from \"react-redux\"\r\nimport {playTheSongInList, deleteTheSong} from '../actions'\r\n\r\nclass SongItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handlePlay = this.handlePlay.bind(this)\r\n        this.handlePause = this.handlePause.bind(this)\r\n        // this.handleDelete = this.handleDelete.bind(this)\r\n    }\r\n\r\n    handlePlay() {\r\n        if (this.props.currentSongId !== this.props.songInfo.id) {\r\n            this.props.playTheSongInList(this.props.songIndex)\r\n            console.log('this.props.songInfo，第一次放', this.props.songInfo)\r\n        } else {\r\n            let audio = document.querySelector('audio')\r\n            audio.play()\r\n        }\r\n    }\r\n\r\n    handlePause() {\r\n        let audio = document.querySelector('audio')\r\n        audio.pause()\r\n    }\r\n\r\n    getPlayOrPauseButtonSvg() {\r\n        let {id} = this.props.songInfo\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        if (isTheSongPlaying) {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M910.8 303.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S129.8 720.8 129.8 509.2 301.4 126.1 513 126.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C654.6 78.9 585.9 61.5 513 61.5 265.7 61.5 65.3 262 65.3 509.2S265.7 956.9 513 956.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                    <path d=\"M385.4 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.6 0 32-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9zM578.9 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.5 0 31.9-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9z\">\r\n                    </path>\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        } else {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                    <path d=\"M415.8 679.9c5.9 0 11.5-1.6 16.2-4.5l231.1-134.6c10.9-5.2 18.5-16.3 18.5-29.2 0-11.9-6.4-22.3-16-27.8L439.7 352.2c-5.8-6.7-14.4-10.9-23.9-10.9-17.6 0-31.8 14.4-31.8 32.1 0 0.6 0 1.2 0.1 1.8l-0.4 0.2 0.5 269c-0.1 1.1-0.2 2.2-0.2 3.4 0 17.7 14.3 32.1 31.8 32.1z\">\r\n                    </path>\r\n                    <path d=\"M909.8 306.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S128.8 723.8 128.8 512.2 300.4 129.1 512 129.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C653.6 81.9 584.9 64.5 512 64.5 264.7 64.5 64.3 265 64.3 512.2S264.7 959.9 512 959.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        }\r\n    }\r\n\r\n    // handleDelete(songIndex) {\r\n    //     return () => {\r\n    //         this.props.deleteTheSong(songIndex)\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        let {id, name, singer, time} = this.props.songInfo\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        return (\r\n            <div className=\"song-list-item-container\" style={isTheSongPlaying ? {color: 'rgb(255, 255, 255)'} : {}}>\r\n                <div className=\"song-list-item-name\">\r\n                    <span className=\"song-name\" title={name}>{name}</span>\r\n                    <span className=\"song-list-item-play\" onClick={isTheSongPlaying ? this.handlePause : this.handlePlay}>\r\n                        {this.getPlayOrPauseButtonSvg()}\r\n                    </span>\r\n                    <span className=\"song-list-item-delete\" onClick={this.props.deleteTheSong.bind(this, this.props.songIndex)}>\r\n                        <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                            <path d=\"M897.2 128H578.7c-1.6-34.7-30.2-62.4-65.3-62.4s-63.8 27.7-65.3 62.4h-320c-17.5 0-31.9 14.4-31.9 31.9s14.4 31.9 31.9 31.9H192v639.8c0 70.4 57.6 128 128 128h384.1c70.4 0 128-57.6 128-128V676.2c0.1-1.2 0.2-2.4 0.2-3.6 0.1-17.8-14.4-32.1-32.1-32.1-17.8 0-32.2 14.4-32.2 32.1v159.1c0 35.2-28.8 64-64 64H320c-35.2 0-64-28.8-64-64V191.8h511.9v223.1c0 17.7 14.4 32.1 32.2 32.1s32.2-14.4 32.2-32.1c0-1.2-0.1-2.4-0.2-3.6V191.8h65.1c17.6 0 31.9-14.4 31.9-31.9S914.7 128 897.2 128z\">\r\n                            </path>\r\n                            <path d=\"M386.9 350.6v386.6c0 16.8 13.8 30.6 30.6 30.6s30.6-13.8 30.6-30.5V350.6c0-16.8-13.8-30.6-30.6-30.6s-30.6 13.8-30.6 30.6zM576.7 350.6v386.6c0 16.8 13.8 30.6 30.6 30.6s30.6-13.8 30.6-30.5V350.6c0-16.8-13.8-30.6-30.6-30.6s-30.6 13.8-30.6 30.6z\">\r\n                            </path>\r\n                            <path d=\"M768 543.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                            </path>\r\n                        </svg>\r\n                    </span>\r\n                </div>\r\n                <div className=\"song-list-item-singer name\">\r\n                    <span title={singer}>{singer}</span>\r\n                </div>\r\n                <div className=\"song-list-item-time\">\r\n                    {timeFormat(time)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    let currentSongId = currentSongInfo.id\r\n    return {\r\n        AudioStatus: theState.AudioStatus,\r\n        currentSongId: currentSongId,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        playTheSongInList: (songInfo) => {\r\n            dispatch(playTheSongInList(songInfo))\r\n        },\r\n        deleteTheSong: (songIndex) => {\r\n            dispatch(deleteTheSong(songIndex))\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SongItem)","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport SongItem from './SongItem'\r\nimport {getCurrentSongInfo} from '../../../utils'\r\n\r\nclass SongList extends Component {\r\n    autoScrollLyricList(div, currentLyricIndex) {\r\n        if (div !== null) {\r\n            let {height} = div.getBoundingClientRect()\r\n            let i = Math.floor(height / 46 / 2)\r\n            div.scrollTop = currentLyricIndex * 46 - 46 * i\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {pic} = this.props.currentSongInfo\r\n        let defaultPic = \"http://s4.music.126.net/style/web2/img/default/default_album.jpg\"\r\n        let picUrl = pic || defaultPic\r\n        let lyric = this.props.currentSongExtraInfo.currentLyric\r\n        let currentLyricIndex = this.props.currentSongExtraInfo.currentLyricIndex\r\n        return (\r\n            <div className=\"song-list hidden\">\r\n                <div className=\"song-list-bg\">\r\n                </div>\r\n                <div className=\"song-list-img\" style={{backgroundImage: `url(${picUrl})`}}>\r\n                </div>\r\n                <div className=\"song-list-header\">播放列表</div>\r\n                <div className=\"song-list-container\">\r\n                    <div className=\"song-list-head-container\">\r\n                        <div className=\"song-list-item-name\">\r\n                            <span title=\"\">歌曲</span>\r\n                        </div>\r\n                        <div className=\"song-list-item-singer\">\r\n                            <span title=\"\">歌手</span>\r\n                        </div>\r\n                        <div className=\"song-list-item-time\">时长</div>\r\n                    </div>\r\n                    {this.props.songList.map((value, index) => {\r\n                        return <SongItem key={index} songIndex={index} songInfo={value}/>\r\n                    })}\r\n                </div>\r\n                <div className=\"lyric-list\" ref={(div) => {this.autoScrollLyricList(div, currentLyricIndex)}}>\r\n                    {\r\n                        lyric.map((value, index) => {\r\n                            return <p className={(currentLyricIndex === index)? \"lyric-item active\" : \"lyric-item\"} key={index}>{value[1]}</p>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    return {\r\n        songList: theState.songList,\r\n        currentSongInfo: currentSongInfo,\r\n        currentSongExtraInfo: theState.currentSongExtraInfo,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(SongList)","import React, {Component} from 'react'\r\nimport AudioController from \"./AudioController\"\r\nimport SongList from \"./SongList\"\r\nimport './MusicController.css'\r\n\r\nclass MusicController extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"music-player\">\r\n                <AudioController />\r\n                <SongList />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MusicController","import React, {Component} from 'react'\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"page-footer\">\r\n                页脚\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React, {Component} from 'react'\n// import a as b from module 相当于给 a 模块起了一个别名 b,\n// 这样在其他地方使用可以直接使用 b 这个变量名\nimport { BrowserRouter as Router, Route, Switch} from \"react-router-dom\"\nimport Home from \"./Home\"\nimport {view as PlayListPage} from \"./playListPage/\"\nimport {ModalPortal} from \"./playListPage/\"\nimport {view as SearchPage} from \"./searchPage/\"\nimport NotFound from \"./NotFound\"\nimport Menu from './Menu'\nimport MusicController from \"./audioController/views/MusicController\"\nimport Footer from './Footer'\nimport './App.css'\n\n\nclass App extends Component {\n\n    render() {\n        return (\n            // BrowserRouter 会使用 HTML5 的 history API 渲染单页路由\n            <Router>\n                <React.Fragment>\n                    <Menu />\n                {/*Router 只能有一个子元素*/}\n                {/*也可以放一个 Switch 组件*/}\n                    <div className=\"content-container\">\n                        <Switch>\n                            {/*Route 组件用来匹配 location.path 的值, 并且渲染相应的组件 */}\n                            {/*exact 表示路径完全匹配时才算匹配*/}\n                            {/*比如 /todo/1 与 /todo 并不是完全匹配, 与 /todo/:id 完全匹配*/}\n                            <Route exact path=\"/\" component={Home} />\n                            <Route exact path=\"/playlist\" component={PlayListPage} />\n                            <Route exact path=\"/search\" component={SearchPage} />\n                            <Route component={NotFound} />\n                        </Switch>\n                    </div>\n                    <Footer />\n                    <MusicController />\n                    <ModalPortal />\n                </React.Fragment>\n            </Router>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { applyMiddleware, createStore, combineReducers} from 'redux'\r\nimport {reducer as SearchBarReducer} from './components/searchPage/'\r\nimport {reducer as PlayListReducer} from './components/playListPage/'\r\nimport {reducer as AudioReducer} from './components/audioController/'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport {loadSongListInLocalStorage} from './utils'\r\n\r\nconst initValue = {\r\n    SearchBarReducer: {\r\n        searchContent: ''\r\n    },\r\n    PlayListReducer: {\r\n        activeTag: '全部',\r\n        albumStatus: '',\r\n        albumDetailInfo: '',\r\n    },\r\n    AudioReducer: {\r\n        AudioStatus: 'pause',\r\n        songList: loadSongListInLocalStorage(),\r\n        currentSongExtraInfo: {\r\n            currentSongIndex: -1,\r\n            currentLyric: [],\r\n            currentLyricIndex: -1,\r\n        },\r\n        playMode: 'loop',\r\n        initSongInfo: {\r\n            id: -1,\r\n            name: '歌曲',\r\n            singer: '歌手',\r\n            lrc: null,\r\n            pic: \"http://s4.music.126.net/style/web2/img/default/default_album.jpg\",\r\n            url: null,\r\n            time: null,\r\n        },\r\n    },\r\n}\r\n\r\nconst reducerObj = {\r\n    SearchBarReducer,\r\n    PlayListReducer,\r\n    AudioReducer,\r\n}\r\n\r\nconst reducer = combineReducers(reducerObj)\r\n\r\nconst middleware = [thunkMiddleware]\r\n\r\nconst storeEnhancers = composeWithDevTools(applyMiddleware(...middleware))\r\n\r\nconst Store = createStore(reducer, initValue, storeEnhancers)\r\n\r\nexport default Store","import * as search from './actionTypes.js'\r\nimport * as Status from './status.js'\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case search.INPUT_CHANGE: {\r\n            return {\r\n                ...state,\r\n                searchInput: action.input\r\n            }\r\n        }\r\n        case search.SEARCH_STARTED: {\r\n            return {...state,\r\n                status: Status.LOADING\r\n            }\r\n        }\r\n        case search.SEARCH_SUCCESS: {\r\n            return {...state,\r\n                status: Status.SUCCESS,\r\n                searchResult: action.result,\r\n                searchContent: action.searchContent\r\n            }\r\n        }\r\n        case search.SEARCH_FAILURE: {\r\n            return {\r\n                status: Status.FAILURE\r\n            }\r\n        }\r\n        default: {\r\n            return state === undefined ? [] : state\r\n        }\r\n    }\r\n}","import * as playList from './actionTypes.js'\r\nimport * as Status from './status.js'\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case playList.PLAYLIST_TAG_CHANGE: {\r\n            return {...state,\r\n                activeTag: action.tagName\r\n            }\r\n        }\r\n        case playList.LOAD_ITEM_DETAIL_STARTED: {\r\n            return {...state,\r\n                albumStatus: Status.LOADING\r\n            }\r\n        }\r\n        case playList.LOAD_ITEM_DETAIL_SUCCESS: {\r\n            return {...state,\r\n                albumStatus: Status.SUCCESS,\r\n                albumDetailInfo: action.albumDetailInfo\r\n            }\r\n        }\r\n        case playList.DELETE_ITEM_DETAIL: {\r\n            return{...state,\r\n                albumStatus: '',\r\n                albumDetailInfo: ''\r\n            }\r\n        }\r\n        case playList.PLAYLIST_LOAD_STARTED: {\r\n            return {...state,\r\n                playListStatus: Status.LOADING\r\n            }\r\n        }\r\n        case playList.PLAYLIST_LOAD_SUCCESS: {\r\n            return {...state,\r\n                playListStatus: Status.SUCCESS,\r\n                playListResult: action.playListResult\r\n            }\r\n        }\r\n        case playList.PLAYLIST_LOAD_FAILURE: {\r\n            return {\r\n                playListStatus: Status.FAILURE\r\n            }\r\n        }\r\n        default: {\r\n            return state === undefined ? {} : state\r\n        }\r\n    }\r\n}","import * as audioController from './actionTypes'\r\nimport {saveSongToLocalStorage, deleteSongInLocalStorage} from \"../../utils\"\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case audioController.CHANGE_AUDIO_STATUS: {\r\n            return {...state,\r\n                AudioStatus: action.status\r\n            }\r\n        }\r\n        case audioController.APPEND_THE_SONG: {\r\n            let songList = state['songList']\r\n            let isTheSongNotExisted = songList.every((value) => {\r\n                return (value.id !== action.songInfo.id)\r\n            })\r\n            if (isTheSongNotExisted) {\r\n                let cloneList = JSON.parse(JSON.stringify(songList))\r\n                cloneList.push(action.songInfo)\r\n                saveSongToLocalStorage(action.songInfo)\r\n                return {\r\n                    ...state,\r\n                    songList: cloneList,\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n        }\r\n        case audioController.DELETE_THE_SONG: {\r\n            let songList = state['songList']\r\n            let cloneList = JSON.parse(JSON.stringify(songList))\r\n            let songIndex = action.songIndex\r\n            let currentSongIndex = state.currentSongExtraInfo.currentSongIndex\r\n            let listLength = cloneList.length\r\n            deleteSongInLocalStorage(songIndex)\r\n            cloneList.splice(songIndex, 1)\r\n            if (listLength === 1) {\r\n                return {\r\n                    ...state,\r\n                    songList: [],\r\n                    currentSongExtraInfo: {\r\n                        ...state.currentSongExtraInfo,\r\n                        currentSongIndex: -1,\r\n                    }\r\n                }\r\n            }\r\n            if (currentSongIndex !== songIndex) {\r\n                if (currentSongIndex < songIndex) {\r\n                    return {\r\n                        ...state,\r\n                        songList: cloneList,\r\n                    }\r\n                } else {\r\n                    let newSongIndex = currentSongIndex - 1\r\n                    console.log('删除了前面的歌')\r\n                    return {\r\n                        ...state,\r\n                        songList: cloneList,\r\n                        currentSongExtraInfo: {\r\n                            ...state.currentSongExtraInfo,\r\n                            currentSongIndex: newSongIndex,\r\n                        }\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                if (currentSongIndex !== listLength - 1) {\r\n                    let newSongIndex = currentSongIndex\r\n                    return {\r\n                        ...state,\r\n                        songList: cloneList,\r\n                        currentSongExtraInfo: {\r\n                            ...state.currentSongExtraInfo,\r\n                            currentSongIndex: newSongIndex,\r\n                        }\r\n                    }\r\n                } else {\r\n                    let newSongIndex = currentSongIndex - 1\r\n                    return {\r\n                        ...state,\r\n                        songList: cloneList,\r\n                        currentSongExtraInfo: {\r\n                            ...state.currentSongExtraInfo,\r\n                            currentSongIndex: newSongIndex,\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        case audioController.PLAY_THE_SONG_IN_PAGE: {\r\n            let songList = state['songList']\r\n            let currentSongIndex = -1\r\n            let isTheSongNotExisted = songList.every((value, index) => {\r\n                currentSongIndex = index\r\n                return (value.id !== action.songInfo.id)\r\n            })\r\n            console.log('currentSongIndex', currentSongIndex)\r\n            if (isTheSongNotExisted) {\r\n                let cloneList = JSON.parse(JSON.stringify(songList))\r\n                cloneList.push(action.songInfo)\r\n                saveSongToLocalStorage(action.songInfo)\r\n                return {\r\n                    ...state,\r\n                    songList: cloneList,\r\n                    currentSongExtraInfo: {\r\n                        ...state.currentSongExtraInfo,\r\n                        currentSongIndex: cloneList.length - 1,\r\n                        currentLyricIndex: -1,\r\n                    },\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    currentSongExtraInfo: {\r\n                        ...state.currentSongExtraInfo,\r\n                        currentSongIndex,\r\n                        currentLyricIndex: -1,\r\n                    },\r\n                }\r\n            }\r\n        }\r\n        case audioController.PLAY_THE_SONG_IN_LIST: {\r\n            return {\r\n                ...state,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentSongIndex: action.songIndex,\r\n                    currentLyricIndex: -1,\r\n                }\r\n            }\r\n        }\r\n        case audioController.PLAY_NEXT_SONG: {\r\n            let modeType = action.modeType\r\n            let currentSongIndex = state.currentSongExtraInfo.currentSongIndex\r\n            let LengthOfSongList = state.songList.length\r\n            let mapModeTypeToNextStep = {\r\n                loop: action.loopStep,\r\n                circle: 0,\r\n                random: parseInt(LengthOfSongList * Math.random()),\r\n            }\r\n            let step = mapModeTypeToNextStep[modeType]\r\n            let nextSongIndex = (currentSongIndex + step + LengthOfSongList) % LengthOfSongList\r\n            return {\r\n                ...state,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentSongIndex: nextSongIndex,\r\n                    currentLyric: [],\r\n                    currentLyricIndex: -1,\r\n                },\r\n            }\r\n        }\r\n        case audioController.GET_LYRIC: {\r\n            return {\r\n                ...state,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentLyric: action.lyric,\r\n                },\r\n            }\r\n        }\r\n        case audioController.GET_CURRENT_TIME: {\r\n            let index = action.currentLyricIndex\r\n            if (index === undefined) {\r\n                return {\r\n                    ...state,\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    currentSongExtraInfo: {\r\n                        ...state.currentSongExtraInfo,\r\n                        currentLyricIndex: index,\r\n                    },\r\n                }\r\n            }\r\n        }\r\n        case audioController.CHANGE_PLAY_MODE: {\r\n            return {\r\n                ...state,\r\n                playMode: action.modeType,\r\n            }\r\n        }\r\n        default: {\r\n            return state === undefined ? {} : state\r\n        }\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PlayerApp from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport Store from './Store'\n\nReactDOM.render(\n    <Provider store={Store}>\n        <PlayerApp />\n    </Provider>,\n    document.getElementById('root')\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}