{"version":3,"sources":["components/Home.js","api/api.js","components/playListPage/actions.js","components/playListPage/actionTypes.js","utils.js","components/playListPage/views/PlayListItem.js","components/playListPage/views/PlayList.js","components/playListPage/status.js","components/playListPage/views/TagItem.js","components/playListPage/views/TagSelector.js","components/playListPage/views/PlayListPage.js","components/searchPage/actions.js","components/searchPage/actionTypes.js","components/searchPage/views/SearchBar.js","components/audioController/actions.js","components/audioController/actionTypes.js","components/searchPage/views/SearchItem.js","components/searchPage/views/SearchList.js","components/searchPage/views/SearchPage.js","components/searchPage/status.js","components/playListPage/views/ModalPortal.js","components/NotFound.js","components/Menu.js","components/audioController/views/AudioController.js","components/audioController/views/SongItem.js","components/audioController/views/SongList.js","components/audioController/views/MusicController.js","components/Footer.js","components/App.js","serviceWorker.js","Store.js","components/searchPage/reducer.js","components/playListPage/reducer.js","components/audioController/reducer.js","index.js"],"names":["Home","react_default","a","createElement","Component","MusicApi","_Api","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","queryObj","callback","_queryObj","objectSpread","input","limit","offset","company","path","concat","get","_queryObj2","category","_queryObj3","albumId","lrcUrl","Api","baseUrl","isPathEqualToUrl","args","_args","method","url","data","r","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","console","log","send","ajax","playListTagChange","tagName","type","timeFormat","seconds","m","String","Math","floor","s","length","saveSongToLocalStorage","songInfo","songList","JSON","parse","localStorage","getItem","push","setItem","stringify","getCurrentSongInfo","theState","currentSongIndex","currentSongExtraInfo","initSongInfo","argsFromQuery","query","slice","o","split","forEach","e","_e$split","_e$split2","slicedToArray","k","v","PlayListItem","_this$props$itemInfo","props","itemInfo","id","name","coverThumbImgUrl","pixel","list","changeImgResolution","coverImgUrl","className","data-id","onClick","fetchAlbumDetailInfo","bind","src","alt","title","connect","dispatch","AlbumId","undefined","albumDetailInfo","playListResult","response","code","PlayList","activeTag","location","search","cat","fetchHotPlayList","decodeURI","prevProps","prevState","snapshot","viewBox","cx","cy","fill","map","index","views_PlayListItem","showHotPlayList","state","PlayListReducer","playListStatus","page","Number","hotPlayList","playListLoadSuccess","withRouter","TagItem","toggleShow","i","_this","rowData","theTagTabs","getClassName","Link","to","tagChange","_this2","TagSelector","call","mainTags","styleTags","languageTags","senceTags","emotionTags","themeTags","mapTagToMain","语种","风格","场景","情感","主题","show","assertThisInitialized","hide","clickOnBlankArea","document","onclick","nativeEvent","stopImmediatePropagation","setState","d","pathname","views_TagItem","PlayListPage","views_TagSelector","views_PlayList","inputChange","fetchSearchResult","searchResult","result","searchContent","error","SearchBar","fillSearchContentInSearchBar","onSearch","onChange","onKeyPress","searchObj","parseUrlGetSearchContent","event","target","searchInput","isEqualToOldSearchContent","isAtSearchPage","window","urlObj","getSearchUrl","history","trim","placeholder","onKeyDown","SearchBarReducer","searchAction","changeAudioStatus","changePlayMode","modeType","saveCurrentLyricIndex","currentLyricIndex","appendTheSong","deleteTheSong","songIndex","playTheSongInPage","playTheSongInList","playNextSong","loopStep","getLyric","lyric","getLyricFromNet","l","lyricList","lyricsArray","oneLyricString","oneLyric","time","j","timeList","isNaN","lyricItem","parseLyric","actions","SearchItem","handlePlay","handleAppend","handlePause","currentSongId","querySelector","play","pause","AudioStatus","isTheSongPlaying","isOdd","getPlayOrPauseButtonSvg","singer","AudioReducer","SearchList","searchData","views_SearchItem","SearchPage","views_SearchList","views_SearchBar","showSearchResult","ModalPortal","deleteDetailInfo","descriptionToggle","isAllDescriptionShowed","body","albumStatus","classList","add","remove","deleteItemDetail","fetchedData","artists","artist","join","duration","pic","album","blurPicUrl","lrc","description","trackCount","tracks","dataCleaning","showAlbumList","NotFound","Menu","searchPath","menus","text","href","isCurrent","currentPathname","ownProps","AudioController","currentTime","sliding","hover","audio","React","createRef","songSlider","playOrPause","clickToSeek","dragToSeek","AfterDragToSeek","handleHover","changeToPlayNextSong","toggleList","current","addEventListener","currentSongInfo","parseCurrentTimeToGetLyricIndex","playMode","lengthOfSongList","lyricArray","currentLyric","abs","theLastLyric","contains","_event$currentTarget$","currentTarget","getBoundingClientRect","left","width","clientX","alert","getLyricIndexWhenJumpSong","_this3","isRunning","isFirstDrag","persist","requestAnimationFrame","seek","_this$songSlider$curr","dragPosition","toggle","height","scrollTop","modeList","indexOf","nextModeType","_this4","_this$state","_this$props$currentSo","playModeTitle","loop","circle","random","ref","onMouseOver","onMouseOut","style","draggable","onDrag","onDragEnd","getPlayButtonSvg","data-mode","getModeButtonSvg","SongItem","_this$props$songInfo","color","SongList","div","picUrl","backgroundImage","views_SongItem","autoScrollLyricList","MusicController","views_AudioController","views_SongList","Footer","App","BrowserRouter","Fragment","components_Menu","Switch","Route","exact","component","components_Footer","audioController_views_MusicController","views_ModalPortal","Boolean","hostname","match","initValue","loadSongListInLocalStorage","reducerObj","action","every","cloneList","listLength","splice","deleteSongInLocalStorage","newSongIndex","isTheSongNotExisted","LengthOfSongList","nextSongIndex","parseInt","reducer","combineReducers","middleware","thunkMiddleware","storeEnhancers","composeWithDevTools","applyMiddleware","Store","createStore","ReactDOM","render","es","store","src_components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e11c0109.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                HomePage\n            </div>\n        )\n    }\n}\n\nexport default Home\n","const ajax = function(args, callback) {\r\n    let {method, url, data} = {...args}\r\n    let r = new XMLHttpRequest()\r\n    r.open(method, url, true)\r\n    // r.setRequestHeader('Content-Type', 'application/json')\r\n    r.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\r\n    r.onreadystatechange = () => {\r\n        if (r.readyState === 4) {\r\n            if ((r.status >= 200 && r.status < 300) || r.status === 304) {\r\n                callback(r)\r\n            } else {\r\n                console.log('error')\r\n            }\r\n        }\r\n    }\r\n    r.send(data)\r\n}\r\n\r\nclass Api {\r\n    constructor() {\r\n        // this.baseUrl = 'https://api.itooi.cn/music/'\r\n        this.baseUrl = 'https://v1.itooi.cn/'\r\n    }\r\n\r\n    get(path, callback, isPathEqualToUrl) {\r\n        let method = 'GET'\r\n        let url\r\n        if (isPathEqualToUrl) {\r\n            url = path\r\n        } else {\r\n            url = this.baseUrl + path\r\n        }\r\n        let args = {\r\n            method,\r\n            url,\r\n            data: null,\r\n        }\r\n        ajax(args, callback)\r\n    }\r\n}\r\n\r\nexport class MusicApi extends Api {\r\n    searchResult(queryObj, callback) {\r\n        let {input, limit, offset, company} = {...queryObj}\r\n        // let path = `${company}/search?key=579621905&s=${input}&type=song&limit=${limit}&offset=${offset}`\r\n        let path = `${company}/search?keyword=${input}&type=song&pageSize=${limit}&page=${offset}&format=1`\r\n        // 如果需要源数据，加上 &isOrigin=1\r\n        this.get(path, callback)\r\n    }\r\n\r\n    hotPlayList(queryObj, callback) {\r\n        let {category, limit, offset, company} = {...queryObj}\r\n        // let path = `${company}/hotSongList?key=579621905&cat=${category}&limit=${limit}&offset=${offset}`\r\n        let path = `${company}/songList/hot?cat=${category}&pageSize=${limit}&page=${offset}&format=1`\r\n        this.get(path, callback)\r\n    }\r\n\r\n    albumDetailInfo(queryObj, callback) {\r\n        let {albumId, company} = {...queryObj}\r\n        let path = `${company}/songList?id=${albumId}`\r\n        this.get(path, callback)\r\n    }\r\n\r\n    getLyric(lrcUrl, callback) {\r\n        this.get(lrcUrl, callback, true)\r\n    }\r\n}","import * as playList from './actionTypes.js'\r\nimport {MusicApi} from '../../api/api.js'\r\n\r\n// 热门歌单标签切换\r\nexport const playListTagChange = (tagName) => ({\r\n    type: playList.PLAYLIST_TAG_CHANGE,\r\n    tagName\r\n    })\r\n\r\n// 开始加载歌单具体信息\r\nexport const loadItemDetailStarted = () => ({\r\n    type: playList.LOAD_ITEM_DETAIL_STARTED,\r\n})\r\n\r\n// 加载歌单具体信息成功\r\nexport const loadItemDetailSuccess = (albumDetailInfo) => ({\r\n    type: playList.LOAD_ITEM_DETAIL_SUCCESS,\r\n    albumDetailInfo\r\n})\r\n\r\n// 删除歌单具体信息，即初始化模态弹窗\r\nexport const deleteItemDetail = () => ({\r\n    type: playList.DELETE_ITEM_DETAIL,\r\n})\r\n\r\n// 热门歌单列表开始加载\r\nexport const playListLoadStarted = () => ({\r\n    type: playList.PLAYLIST_LOAD_STARTED,\r\n})\r\n\r\n// 热门歌单列表加载成功\r\nexport const playListLoadSuccess = (playListResult) => ({\r\n    type: playList.PLAYLIST_LOAD_SUCCESS,\r\n    playListResult,\r\n})\r\n\r\n// 热门歌单列表加载成功\r\nexport const playListLoadFailure = () => ({\r\n    type: playList.PLAYLIST_LOAD_FAILURE,\r\n})\r\n\r\n// 异步加载热门歌单列表\r\nexport const fetchHotPlayList = (category=\"全部\", page=1, company='netease') => {\r\n    let limit = 30\r\n    let offset = (Number(page)- 1) * limit\r\n    return (dispatch) => {\r\n        let queryObj = {\r\n                category,\r\n                limit,\r\n                offset,\r\n                company,\r\n        }\r\n        dispatch(playListLoadStarted())\r\n        let api = new MusicApi()\r\n        api.hotPlayList(queryObj, (r) => {\r\n            let playListResult = JSON.parse(r.response)\r\n            console.log('加载热门歌单列表完成', playListResult)\r\n            if (playListResult.code === 200) {\r\n                dispatch(playListLoadSuccess(playListResult))\r\n            } else {\r\n                dispatch(playListLoadFailure())\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n// 加载歌单具体信息\r\nexport const fetchAlbumDetailInfo = (albumId, company='netease') => {\r\n    console.log('albumId', albumId)\r\n    return (dispatch) => {\r\n        let args = {\r\n            albumId,\r\n            company,\r\n        }\r\n        dispatch(loadItemDetailStarted())\r\n        let api = new MusicApi()\r\n        api.albumDetailInfo(args, (r) => {\r\n            let playListResult = JSON.parse(r.response)\r\n            console.log('加载歌单完成', playListResult)\r\n            if (playListResult.code === 200) {\r\n                dispatch(loadItemDetailSuccess(playListResult))\r\n            } else {\r\n                dispatch(playListLoadFailure())\r\n            }\r\n        })\r\n    }\r\n}","export const PLAYLIST_TAG_CHANGE = \"PAGE/PLAYLIST_TAG_CHANGE\"\r\n\r\nexport const LOAD_ITEM_DETAIL_STARTED = \"PAGE/LOAD_ITEM_DETAIL_STARTED\"\r\n\r\nexport const LOAD_ITEM_DETAIL_SUCCESS = \"PAGE/LOAD_ITEM_DETAIL_SUCCESS\"\r\n\r\nexport const DELETE_ITEM_DETAIL = 'PAGE/DELETE_ITEM_DETAIL'\r\n\r\nexport const PLAYLIST_LOAD_STARTED = 'PAGE/PLAYLIST_LOAD_STARTED'\r\n\r\nexport const PLAYLIST_LOAD_SUCCESS = 'PAGE/LIST_LOAD_SUCCESS'\r\n\r\nexport const PLAYLIST_LOAD_FAILURE = 'PAGE/PLAYLIST_LOAD_FAILURE'","export const timeFormat = function(seconds) {\r\n    if (!seconds) {\r\n        return '00:00'\r\n    }\r\n    let m = String(Math.floor(seconds / 60))\r\n    let s = String(Math.floor(seconds % 60))\r\n    if (s.length === 1) {\r\n        s = \"0\" + s\r\n    }\r\n    if (m.length === 1) {\r\n        m = \"0\" + m\r\n    }\r\n    return `${m}:${s}`\r\n}\r\n\r\nexport const loadSongListInLocalStorage = () => {\r\n    let songList = JSON.parse(localStorage.getItem('songList'))\r\n    if (songList === null) {\r\n        songList = []\r\n    }\r\n    return songList\r\n}\r\n\r\nexport const saveSongToLocalStorage = (songInfo) => {\r\n    let songList = JSON.parse(localStorage.getItem('songList'))\r\n    if (songList === null) {\r\n        songList = []\r\n    }\r\n    songList.push(songInfo)\r\n    localStorage.setItem('songList', JSON.stringify(songList))\r\n}\r\n\r\nexport const deleteSongInLocalStorage = (songIndex) => {\r\n    let songList = JSON.parse(localStorage.getItem('songList'))\r\n    songList.splice(songIndex, 1)\r\n    localStorage.setItem('songList', JSON.stringify(songList))\r\n}\r\n\r\nexport const getCurrentSongInfo = (theState) => {\r\n    let songList = theState.songList\r\n    let currentSongIndex = theState.currentSongExtraInfo.currentSongIndex\r\n    let currentSongInfo = {}\r\n    if (currentSongIndex === -1) {\r\n        currentSongInfo = theState.initSongInfo\r\n    } else {\r\n        currentSongInfo = songList[currentSongIndex]\r\n    }\r\n    return currentSongInfo\r\n}\r\n\r\nexport const parseLyric = (lyricsArray) => {\r\n    let result = []\r\n    for (let i = 0; i < lyricsArray.length; i++) {\r\n        let oneLyricString = lyricsArray[i]\r\n        let oneLyric = ''\r\n        let time = -1\r\n        for (let j = 0; j < oneLyricString.length; j++) {\r\n            let e = oneLyricString[j]\r\n            if (e === ']') {\r\n                oneLyric = oneLyricString.slice(j + 1)\r\n                let timeList = oneLyricString.slice(1, j).split(':')\r\n                time = Number(timeList[0]) * 60 + Number(timeList[1])\r\n                break\r\n            }\r\n        }\r\n        if (!isNaN(time)) {\r\n            if (oneLyric === '') {\r\n                oneLyric = '...'\r\n            }\r\n            let lyricItem = [\r\n                time,\r\n                oneLyric,\r\n            ]\r\n            result.push((lyricItem))\r\n        }\r\n    }\r\n    return result\r\n}\r\n\r\nexport const argsFromQuery = (query) => {\r\n    if (query[0] === '?') {\r\n        query = query.slice(1)\r\n    }\r\n    let o = {}\r\n    if (query.length === 0) {\r\n        return o\r\n    }\r\n    query.split('&').forEach(e => {\r\n        let [k, v] = e.split('=')\r\n        o[k] = v\r\n    })\r\n    return o\r\n}\r\n\r\nexport const changeImgResolution = (url, pixel) => {\r\n    let list = url.split('?')\r\n    return `${list[0]}?param=${pixel}y${pixel}`\r\n}","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {fetchAlbumDetailInfo} from '../actions'\r\nimport {changeImgResolution} from '../../../utils'\r\n\r\nclass PlayListItem extends Component {\r\n\r\n    render() {\r\n        let {id, name, coverImgUrl} = {...this.props.itemInfo}\r\n        let coverThumbImgUrl = changeImgResolution(coverImgUrl)\r\n        return (\r\n            <div className=\"album-container\">\r\n                <div className=\"album-img\" data-id={id} onClick={this.props.fetchAlbumDetailInfo.bind(this, id)}>\r\n                    <img src={coverThumbImgUrl} alt=\"歌单封面\"/>\r\n                </div>\r\n                <div className=\"album-info\" title={name}>\r\n                    <span>{name}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchAlbumDetailInfo: (AlbumId) => {\r\n            dispatch(fetchAlbumDetailInfo(AlbumId))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(PlayListItem)","import React, { Component } from 'react'\r\nimport * as Status from \"../status\"\r\nimport {connect} from 'react-redux'\r\nimport {fetchHotPlayList, playListTagChange} from \"../actions\"\r\nimport {withRouter} from 'react-router-dom'\r\nimport PlayListItem from './PlayListItem'\r\nimport {argsFromQuery} from '../../../utils'\r\n\r\nclass PlayList extends Component {\r\n\r\n    componentDidMount() {\r\n        if (this.props.status !== 'success') {\r\n            let params = argsFromQuery(this.props.location.search)\r\n            let activeTag = params.cat\r\n            this.props.fetchHotPlayList(activeTag, 1)\r\n            this.props.playListTagChange(decodeURI(activeTag))\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.location !== prevProps.location) {\r\n            let params = argsFromQuery(this.props.location.search)\r\n            let activeTag = params.cat\r\n            this.props.fetchHotPlayList(activeTag, 1)\r\n        }\r\n    }\r\n\r\n    showHotPlayList() {\r\n        switch (this.props.status) {\r\n            case Status.LOADING: {\r\n                return (\r\n                    <div className=\"loading-container\">\r\n                        <svg className=\"load\" viewBox=\"25 25 50 50\">\r\n                            <circle className=\"loading\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\"/>\r\n                        </svg>\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.SUCCESS: {\r\n                let playListResult = this.props.playListResult.data\r\n                return (\r\n                    <div className=\"playlist-result\">\r\n                        {playListResult.map((value, index) => {\r\n                            return <PlayListItem key={index} itemInfo={value} />\r\n                        })}\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.FAILURE: {\r\n                return (\r\n                    <div className=\"failed-container\">热门歌单加载失败</div>\r\n                )\r\n            }\r\n            default: {\r\n                return (\r\n                    <div>PlayList</div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.showHotPlayList()\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        status: theState.playListStatus,\r\n        playListResult: theState.playListResult,\r\n        activeTag: theState.activeTag,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchHotPlayList: (category, page) => {\r\n            dispatch(fetchHotPlayList(category, page))\r\n        },\r\n        playListTagChange: (tagName) => {\r\n            dispatch(playListTagChange(tagName))\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(withRouter(PlayList))","export const INIT = ''\r\nexport const LOADING = 'loading'\r\nexport const SUCCESS = 'success'\r\nexport const FAILURE = 'failure'","import React, { Component } from 'react'\r\nimport {Link} from \"react-router-dom\"\r\nimport {connect} from 'react-redux'\r\nimport {playListTagChange} from \"../actions\"\r\n\r\nclass TagItem extends Component {\r\n\r\n    tagChange(value) {\r\n        this.props.playListTagChange(value)\r\n        this.props.toggleShow()\r\n    }\r\n\r\n    getClassName(value) {\r\n        return this.props.activeTag === value ? \"playlist-tag active-tag\" : \"playlist-tag\"\r\n    }\r\n\r\n    getTagTable(i) {\r\n        let rowData = this.props.theTagTabs.slice(i, i + 6)\r\n        return (\r\n            <tbody key={i}>\r\n                <tr>\r\n                    {rowData.map((value, index) => {\r\n                        return (\r\n                            <td key={index} className={this.getClassName(value)}>\r\n                                <Link  to={`/playlist?cat=${value}`} onClick={this.tagChange.bind(this, value)}>{value}</Link>\r\n                            </td>\r\n                        )\r\n                    })}\r\n                </tr>\r\n            </tbody>\r\n         )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"playlist-tag-tabs\">\r\n                {this.props.theTagTabs.map((value, index) => {\r\n                    return (\r\n                            <Link key={index} className={this.getClassName(value)} to={`/playlist?cat=${value}`} onClick={this.tagChange.bind(this, value)}>{value}</Link>\r\n                    )\r\n                })}\r\n                {/*{this.props.theTagTabs.map((value, index) => {*/}\r\n                    {/*if (index % 6 === 0) {*/}\r\n                        {/*return this.getTagTable(index)*/}\r\n                    {/*} else {*/}\r\n                        {/*return false*/}\r\n                    {/*}*/}\r\n                {/*})}*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        activeTag: theState.activeTag\r\n    }\r\n}\r\n\r\nconst mapDispatchTopProps = (dispatch) => {\r\n    return {\r\n        playListTagChange: (tagName) => {\r\n            dispatch(playListTagChange(tagName))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchTopProps)(TagItem)","import React, { Component } from 'react'\r\nimport {playListTagChange} from '../actions'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\"\r\nimport TagItem from './TagItem'\r\n\r\nclass TagSelector extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.mainTags = ['语种', '风格', '场景', '情感', '主题']\r\n        this.styleTags = ['流行', '摇滚', '民谣', '电子', '舞曲', '说唱', '轻音乐', '爵士', '乡村', 'R&B/Soul', '古典', '民族', '英伦', '金属', '朋克', '蓝调', '雷鬼', '拉丁', '古风', 'Bossa Nova']\r\n        this.languageTags = ['华语', '欧美', '日语', '韩语', '粤语', '小语种']\r\n        this.senceTags = ['清晨', '夜晚', '学习', '工作', '午休', '下午茶', '地铁', '驾车', '运动', '旅行', '散步', '酒吧']\r\n        this.emotionTags = ['怀旧', '清新', '浪漫', '性感', '伤感', '治愈', '放松', '孤独', '感动', '兴奋', '快乐', '安静', '思念']\r\n        this.themeTags = ['影视原声', 'ACG', '儿童', '校园', '游戏', '70后', '80后', '90后', '网络歌曲', 'KTV', '经典', '翻唱', '吉他', '钢琴', '器乐', '榜单', '00后']\r\n        this.mapTagToMain = {\r\n            '语种': this.languageTags,\r\n            '风格': this.styleTags,\r\n            '场景': this.senceTags,\r\n            '情感': this.emotionTags,\r\n            '主题': this.themeTags\r\n        }\r\n        this.state = {\r\n            show: false\r\n        }\r\n\r\n        this.toggleShow = this.toggleShow.bind(this)\r\n        this.hide = this.hide.bind(this)\r\n        this.clickOnBlankArea = this.clickOnBlankArea.bind(this)\r\n        document.onclick=this.hide\r\n    }\r\n\r\n    tagChange(value) {\r\n        this.props.playListTagChange(value)\r\n        this.toggleShow()\r\n    }\r\n\r\n    clickOnBlankArea(e) {\r\n        e.nativeEvent.stopImmediatePropagation()\r\n    }\r\n\r\n    toggleShow(e) {\r\n        this.setState({\r\n            show: !this.state.show\r\n        })\r\n        if (e !== undefined) {\r\n            e.nativeEvent.stopImmediatePropagation()\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        this.setState({\r\n            show: false\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.setState = () => {\r\n            return 0\r\n        }\r\n    //  防止组件卸载的时候调用 setState 导致 react 报错\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"playlist-tags\">\r\n                <span className=\"active-tag-name\" >{this.props.activeTag}</span>\r\n                <span className=\"select-tag-button\" onClick={this.toggleShow}>\r\n                    {this.state.show ? '收起 ' : '展开 '}\r\n                    <svg className={this.state.show ? \"select-icon rotated\" : \"select-icon\"} viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M127.5 330.9l0.7-0.7c12.3-12.3 32.4-12.3 44.7 0l339.9 339.9L853 330c12.5-12.5 32.9-12.5 45.4 0s12.5 32.9 0 45.4L536 737.8s-0.1 0.1-0.1 0.2l-0.7 0.7c-12.3 12.3-32.4 12.3-44.7 0l-363-363c-12.3-12.4-12.3-32.5 0-44.8z\">\r\n                        </path>\r\n                    </svg>\r\n                </span>\r\n                <div className={this.state.show ? \"playlist-tags-container\" : \"playlist-tags-container hidden\"} onClick={this.clickOnBlankArea}>\r\n                    <Link className={this.props.activeTag === '全部' ? \"playlist-main-tag active-tag\" : \"playlist-main-tag\"} to={{pathname: 'playlist', search: '?cat=全部'}} onClick={this.tagChange.bind(this, '全部')}>全部</Link>\r\n                    {this.mainTags.map((value, index) => {\r\n                        let theTagTabs = this.mapTagToMain[value]\r\n                        return(\r\n                            <div key={index} className=\"playlist-tag-container\">\r\n                                <div className=\"playlist-tag-class\">{value}</div>\r\n                                <TagItem theTagTabs={theTagTabs} toggleShow={this.toggleShow}/>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        activeTag: theState.activeTag\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        playListTagChange: (tagName) => {\r\n            dispatch(playListTagChange(tagName))\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(TagSelector)","import React, { Component } from 'react'\nimport PlayList from './PlayList'\nimport TagSelector from \"./TagSelector\"\nimport './playListPage.css'\n\nclass PlayListPage extends Component {\n\n    render() {\n        return (\n            <div className=\"playlist-content\">\n                <TagSelector />\n                <PlayList />\n            </div>\n        )\n    }\n}\n\nexport default PlayListPage\n","import * as search from './actionTypes.js'\r\nimport {MusicApi} from '../../api/api.js'\r\n\r\n// 搜索框输入改变\r\nexport const inputChange = (input) => ({\r\n    type: search.INPUT_CHANGE,\r\n    input,\r\n})\r\n\r\n// 开始搜索\r\nexport const searchStarted = (data) => ({\r\n    type: search.SEARCH_STARTED,\r\n    data,\r\n})\r\n\r\n// 搜索成功\r\nexport const searchSuccess = (result, searchContent) => ({\r\n    type: search.SEARCH_SUCCESS,\r\n    result,\r\n    searchContent,\r\n})\r\n\r\n// 搜索失败\r\nexport const searchFailure = (error) => ({\r\n    type: search.SEARCH_FAILURE,\r\n    error,\r\n})\r\n\r\n// 拿到搜索数据\r\nexport const fetchSearchResult = (input, page=1, company='netease') => {\r\n    let limit = 20\r\n    let offset = (Number(page)- 1) * limit\r\n    return (dispatch) => {\r\n        let queryObj = {\r\n            input,\r\n            limit,\r\n            offset,\r\n            company,\r\n        }\r\n        dispatch(searchStarted(input))\r\n        let api = new MusicApi()\r\n        api.searchResult(queryObj, (r) => {\r\n            let searchResult = JSON.parse(r.response)\r\n            console.log('搜索完成', searchResult)\r\n            if (searchResult.code === 200) {\r\n                dispatch(searchSuccess(searchResult, queryObj.input))\r\n            } else {\r\n                dispatch(searchFailure(searchResult))\r\n            }\r\n        })\r\n    }\r\n}","export const INPUT_CHANGE = 'NAV/INPUT_CHANGE'\r\n\r\nexport const SEARCH_STARTED = 'NAV/SEARCH_STARTED'\r\n\r\nexport const SEARCH_SUCCESS = 'NAV/SEARCH_SUCCESS'\r\n\r\nexport const SEARCH_FAILURE = 'NAV/SEARCH_FAILURE'","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport  {inputChange, fetchSearchResult} from '../actions'\r\nimport {withRouter} from \"react-router-dom\"\r\nimport {argsFromQuery} from \"../../../utils\"\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.fillSearchContentInSearchBar()\r\n\r\n        this.onSearch = this.onSearch.bind(this)\r\n        this.onChange = this.onChange.bind(this)\r\n        this.onKeyPress = this.onKeyPress.bind(this)\r\n    }\r\n\r\n    parseUrlGetSearchContent(location) {\r\n        let searchObj = argsFromQuery(location.search)\r\n        let searchContent = decodeURI(searchObj['s'])\r\n        if (searchContent !== undefined) {\r\n            return searchContent\r\n        }\r\n    }\r\n\r\n    fillSearchContentInSearchBar() {\r\n        this.value = this.parseUrlGetSearchContent(this.props.location)\r\n        if (this.value === 'undefined') {\r\n            this.value = ''\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.location.search !== this.props.location.search) {\r\n            this.value = this.parseUrlGetSearchContent(prevProps.location)\r\n        }\r\n    }\r\n\r\n    onChange(event) {\r\n        this.value = event.target.value\r\n        this.props.inputChange(this.value)\r\n    }\r\n\r\n    onSearch() {\r\n        let hasInputted = this.props.searchInput === undefined || this.props.searchInput === ''\r\n        if (hasInputted) {\r\n            return 0\r\n        }\r\n        let isEqualToOldSearchContent = this.props.searchContent !== this.props.searchInput\r\n        let isAtSearchPage = window.location.pathname !== '/search'\r\n        if (isEqualToOldSearchContent || isAtSearchPage) {\r\n            let urlObj = this.getSearchUrl()\r\n            this.props.history.push(urlObj)\r\n            // this.props.searchAction(this.props.searchInput)\r\n        }\r\n    }\r\n\r\n    getSearchUrl() {\r\n        console.log('this.props.searchInput', this.props.searchInput)\r\n        let name = this.props.searchInput.trim()\r\n        if (name === undefined) {\r\n            name = ''\r\n        }\r\n        let page = 1\r\n        return {\r\n            pathname: '/search',\r\n            search: `?s=${name}&page=${page}`,\r\n        }\r\n    }\r\n\r\n    onKeyPress(event) {\r\n        if (event.key === 'Enter') {\r\n            this.onSearch()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className={(this.props.searchResult === undefined) ? \"search-bar-container before-searched\" : \"search-bar-container\"}>\r\n                <input type=\"text\" className=\"search-bar-input\" placeholder=\"搜索音乐、MV、歌单、用户\" onChange={this.onChange} onKeyDown={this.onKeyPress} value={this.value || ''}/>\r\n                <button className=\"search-bar-button\" onClick={this.onSearch}>搜索</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.SearchBarReducer\r\n    return {\r\n        searchInput: theState.searchInput,\r\n        searchContent: theState.searchContent,\r\n        searchResult: theState.searchResult,\r\n        status: theState.status,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        searchAction: (input, page) => {\r\n            dispatch(fetchSearchResult(input, page))\r\n        },\r\n        inputChange:  (input) => {\r\n            dispatch(inputChange(input))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(withRouter(SearchBar))","import * as audioController from './actionTypes'\r\nimport {MusicApi} from '../../api/api.js'\r\nimport {parseLyric} from '../../utils'\r\n\r\nexport const changeAudioStatus = (status) => {\r\n    return {\r\n        type: audioController.CHANGE_AUDIO_STATUS,\r\n        status\r\n    }\r\n}\r\n\r\nexport const changePlayMode = (modeType) => {\r\n    return {\r\n        type: audioController.CHANGE_PLAY_MODE,\r\n        modeType,\r\n    }\r\n}\r\n\r\nexport const saveCurrentLyricIndex = (currentLyricIndex) => {\r\n    return {\r\n        type: audioController.GET_CURRENT_TIME,\r\n        currentLyricIndex,\r\n    }\r\n}\r\n\r\nexport const appendTheSong = (songInfo) => {\r\n    return {\r\n        type: audioController.APPEND_THE_SONG,\r\n        songInfo,\r\n    }\r\n}\r\n\r\nexport const deleteTheSong = (songIndex) => {\r\n    return {\r\n        type: audioController.DELETE_THE_SONG,\r\n        songIndex,\r\n    }\r\n}\r\n\r\nexport const playTheSongInPage = (songInfo) => {\r\n    return {\r\n        type: audioController.PLAY_THE_SONG_IN_PAGE,\r\n        songInfo,\r\n    }\r\n}\r\n\r\nexport const playTheSongInList = (songIndex) => {\r\n    return {\r\n        type: audioController.PLAY_THE_SONG_IN_LIST,\r\n        songIndex,\r\n    }\r\n}\r\n\r\nexport const playNextSong = (modeType, loopStep=1) => {\r\n    return {\r\n        type: audioController.PLAY_NEXT_SONG,\r\n        modeType,\r\n        loopStep,\r\n    }\r\n}\r\n\r\nexport const getLyric = (lyric) => {\r\n    return {\r\n        type: audioController.GET_LYRIC,\r\n        lyric,\r\n    }\r\n}\r\n\r\nexport const getLyricFromNet = (lrcUrl) => {\r\n    return (dispatch) => {\r\n        let api = new MusicApi()\r\n        api.getLyric(lrcUrl, (r) => {\r\n            let l = r.response\r\n            let lyricList = l.split('\\n').slice(0, -1)\r\n            if (lyricList.length === 0) {\r\n                lyricList = [l]\r\n            }\r\n            let result = parseLyric(lyricList)\r\n            dispatch(getLyric(result))\r\n        })\r\n    }\r\n}","export const CHANGE_AUDIO_STATUS = 'BAR/CHANGE_AUDIO_STATUS'\r\n\r\nexport const APPEND_THE_SONG = 'PAGE/APPEND_THE_SONG'\r\n\r\nexport const DELETE_THE_SONG = 'AUDIO/DELETE_THE_SONG'\r\n\r\nexport const PLAY_THE_SONG_IN_PAGE = 'PAGE/PLAY_THE_SONG'\r\n\r\nexport const PLAY_THE_SONG_IN_LIST = 'LIST/PLAY_THE_SONG'\r\n\r\nexport const PLAY_NEXT_SONG = 'AUDIO/PLAY_NEXT_SONG'\r\n\r\nexport const GET_LYRIC = 'AUDIO/GET_LYRIC'\r\n\r\nexport const GET_CURRENT_TIME = 'AUDIO/GET_CURRENT_TIME'\r\n\r\nexport const CHANGE_PLAY_MODE = 'AUDIO/CHANGE_PLAY_MODE'","import React, {Component} from 'react'\r\nimport {getCurrentSongInfo, timeFormat} from '../../../utils'\r\nimport {connect} from 'react-redux'\r\nimport {actions} from '../../audioController/'\r\n\r\nconst appendTheSong = actions.appendTheSong\r\nconst playTheSongInPage = actions.playTheSongInPage\r\n\r\nclass SearchItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handlePlay = this.handlePlay.bind(this)\r\n        this.handleAppend = this.handleAppend.bind(this)\r\n        this.handlePause = this.handlePause.bind(this)\r\n    }\r\n\r\n    handlePlay() {\r\n        if (this.props.currentSongId !== this.props.result.id) {\r\n            this.props.playTheSongInPage(this.props.result)\r\n            console.log('this.props.songInfo，第一次放', this.props.result)\r\n        } else {\r\n            let audio = document.querySelector('audio')\r\n            audio.play()\r\n        }\r\n    }\r\n\r\n    handlePause() {\r\n        let audio = document.querySelector('audio')\r\n        audio.pause()\r\n    }\r\n\r\n    getPlayOrPauseButtonSvg() {\r\n        let id = this.props.result.id\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        if (isTheSongPlaying) {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M910.8 303.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S129.8 720.8 129.8 509.2 301.4 126.1 513 126.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C654.6 78.9 585.9 61.5 513 61.5 265.7 61.5 65.3 262 65.3 509.2S265.7 956.9 513 956.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                    <path d=\"M385.4 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.6 0 32-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9zM578.9 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.5 0 31.9-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9z\">\r\n                    </path>\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        } else {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                    <path d=\"M415.8 679.9c5.9 0 11.5-1.6 16.2-4.5l231.1-134.6c10.9-5.2 18.5-16.3 18.5-29.2 0-11.9-6.4-22.3-16-27.8L439.7 352.2c-5.8-6.7-14.4-10.9-23.9-10.9-17.6 0-31.8 14.4-31.8 32.1 0 0.6 0 1.2 0.1 1.8l-0.4 0.2 0.5 269c-0.1 1.1-0.2 2.2-0.2 3.4 0 17.7 14.3 32.1 31.8 32.1z\">\r\n                    </path>\r\n                    <path d=\"M909.8 306.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S128.8 723.8 128.8 512.2 300.4 129.1 512 129.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C653.6 81.9 584.9 64.5 512 64.5 264.7 64.5 64.3 265 64.3 512.2S264.7 959.9 512 959.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        }\r\n    }\r\n\r\n    handleAppend() {\r\n        this.props.appendTheSong(this.props.result)\r\n    }\r\n\r\n    render() {\r\n        let result = this.props.result\r\n        let id = this.props.result.id\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        let isOdd = (this.props.index + 1) % 2 !== 0\r\n        return(\r\n            <div className={isOdd ? \"search-item-container odd\" : \"search-item-container\"}>\r\n                <span className=\"search-item-number\">{`${this.props.index + 1}.`}</span>\r\n                <div className=\"search-item-name\">\r\n                    <span className=\"song-name\" title={result.name}>{result.name}</span>\r\n                    <span className=\"search-item-play\" onClick={isTheSongPlaying ? this.handlePause : this.handlePlay}>\r\n                        {this.getPlayOrPauseButtonSvg()}\r\n                    </span>\r\n                    <span className=\"search-item-append\" onClick={this.handleAppend}>\r\n                        <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M197.3 197.3c-173.8 173.8-173.8 455.5 0 629.3s455.5 173.8 629.3 0 173.8-455.5 0-629.3-455.5-173.7-629.3 0zM907 512c0 51.3-9.7 101.3-28.9 148.7-19.9 49-49.1 92.9-86.8 130.6s-81.7 66.9-130.6 86.8C613.3 897.3 563.3 907 512 907c-51.3 0-101.3-9.7-148.7-28.9-49-19.9-92.9-49.1-130.6-86.8s-66.9-81.7-86.8-130.6C126.7 613.3 117 563.3 117 512c0-51.3 9.7-101.3 28.9-148.7 19.9-49 49.1-92.9 86.8-130.6s81.7-66.9 130.6-86.8C410.7 126.7 460.7 117 512 117c51.3 0 101.3 9.7 148.7 28.9 49 19.9 92.9 49.1 130.6 86.8s66.9 81.7 86.8 130.6C897.3 410.7 907 460.7 907 512zM537 262v225h225v50H537v225h-50V537H262v-50h225V262h50z\">\r\n                        </path>\r\n                        </svg>\r\n                    </span>\r\n                </div>\r\n                <div className=\"search-item-singer name\">\r\n                    <span title={result.singer}>{result.singer}</span>\r\n                </div>\r\n                <div className=\"search-item-time\">\r\n                    {timeFormat(result.time)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    let currentSongId = currentSongInfo.id\r\n    return {\r\n        AudioStatus: theState.AudioStatus,\r\n        currentSongId: currentSongId,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        appendTheSong: (songInfo) => {\r\n            dispatch(appendTheSong(songInfo))\r\n        },\r\n        playTheSongInPage: (songInfo) => {\r\n            dispatch(playTheSongInPage(songInfo))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchItem)","import React, {Component} from 'react'\r\nimport SearchItem from './SearchItem'\r\nimport {connect} from 'react-redux'\r\n\r\nclass SearchList extends Component {\r\n\r\n    render() {\r\n        let searchData = this.props.searchResult.data\r\n        return(\r\n            <div className=\"search-list-container\">\r\n                <span className=\"search-head-number\">\r\n                </span>\r\n                <div className=\"search-head-container\">\r\n                    <div className=\"search-head-name name\">\r\n                        <span title=\"歌名\">歌曲</span>\r\n                    </div>\r\n                    <div className=\"search-head-singer name\">\r\n                        <span title=\"歌手\">歌手</span>\r\n                    </div>\r\n                    <div className=\"search-head-time\">\r\n                        时长\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-list\">\r\n                {searchData.map((value, index) => (\r\n                    <SearchItem key={index} index={index} result={value}/>\r\n                ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.SearchBarReducer\r\n    return {\r\n        searchResult: theState.searchResult\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, null)(SearchList)","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as Status from '../status'\r\nimport {fetchSearchResult, inputChange} from '../actions'\r\nimport SearchBar from './SearchBar'\r\nimport SearchList from './SearchList'\r\nimport {argsFromQuery} from '../../../utils'\r\nimport './SearchPage.css'\r\n\r\nclass SearchPage extends Component {\r\n\r\n    componentDidMount() {\r\n        let s = argsFromQuery(this.props.location.search).s\r\n        if (s !== undefined && s !== this.props.searchContent) {\r\n            this.props.searchAction(s)\r\n            this.props.inputChange(s)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.location.search !== this.props.location.search) {\r\n            let s = argsFromQuery(this.props.location.search).s\r\n            this.props.searchAction(s)\r\n        }\r\n    }\r\n\r\n    showSearchResult() {\r\n        switch (this.props.status) {\r\n            case Status.LOADING: {\r\n                return (\r\n                    <div className=\"loading-container\">\r\n                        <svg className=\"load\" viewBox=\"25 25 50 50\">\r\n                            <circle className=\"loading\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\"/>\r\n                        </svg>\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.SUCCESS: {\r\n                return (\r\n                        <SearchList />\r\n                )\r\n            }\r\n            case Status.FAILURE: {\r\n                return (\r\n                    <div className=\"failed-container\">歌曲搜索失败</div>\r\n                )\r\n            }\r\n            default: {\r\n                return (\r\n                    <div></div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"search-page-content\">\r\n                <SearchBar />\r\n                {this.showSearchResult()}\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.SearchBarReducer\r\n    return {\r\n        status: theState.status,\r\n        searchResult: theState.searchResult,\r\n        searchContent: theState.searchContent,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        searchAction: (input, page) => {\r\n            dispatch(fetchSearchResult(input, page))\r\n        },\r\n        inputChange: (input) => {\r\n            dispatch(inputChange(input))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(SearchPage)","export const LOADING = 'loading'\r\nexport const SUCCESS = 'success'\r\nexport const FAILURE = 'failure'","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {SearchItem} from \"../../searchPage/\"\r\nimport {deleteItemDetail} from '../actions'\r\nimport * as Status from \"../status\"\r\n\r\nclass ModalPortal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.deleteDetailInfo = this.deleteDetailInfo.bind(this)\r\n        this.descriptionToggle = this.descriptionToggle.bind(this)\r\n        this.state = {\r\n            isAllDescriptionShowed: false,\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        let body = document.querySelector(\"body\")\r\n        // let musicPlayer = document.querySelector('.music-controller')\r\n        if (this.props.albumStatus !== Status.INIT) {\r\n            body.classList.add('ban-scroll')\r\n            // musicPlayer.classList.add('ban-scrollbar')\r\n        } else {\r\n            body.classList.remove('ban-scroll')\r\n            // musicPlayer.classList.remove('ban-scrollbar')\r\n        }\r\n    }\r\n\r\n    descriptionToggle() {\r\n        this.setState({\r\n            isAllDescriptionShowed: !this.state.isAllDescriptionShowed,\r\n        })\r\n    }\r\n\r\n    deleteDetailInfo() {\r\n        this.props.deleteItemDetail()\r\n        this.setState({\r\n            isAllDescriptionShowed: false,\r\n        })\r\n    }\r\n\r\n    dataCleaning(fetchedData) {\r\n        let singerList = fetchedData.artists.map(artist => artist.name)\r\n        let singer = singerList.join('/')\r\n        return {\r\n            id: fetchedData.id,\r\n            name: fetchedData.name,\r\n            singer,\r\n            time: fetchedData.duration / 1000,\r\n            pic: fetchedData.album.blurPicUrl,\r\n            lrc: `https://v1.itooi.cn/netease/lrc?id=${fetchedData.id}`,\r\n            url: `https://v1.itooi.cn/netease/url?id=${fetchedData.id}`,\r\n        }\r\n    }\r\n\r\n    showAlbumList() {\r\n        switch (this.props.albumStatus) {\r\n            case Status.INIT: {\r\n                return null\r\n            }\r\n            case Status.LOADING: {\r\n                return (\r\n                    <div className=\"pop-up\">\r\n                        <div className=\"pop-window\">\r\n                            <span className=\"modal-portal-toggle\" onClick={this.deleteDetailInfo}>×</span>\r\n                            <div className=\"loading-container\">\r\n                                <svg className=\"load\" viewBox=\"25 25 50 50\">\r\n                                    <circle className=\"loading\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\"/>\r\n                                </svg>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.SUCCESS: {\r\n                let data = this.props.albumDetailInfo.data\r\n                console.log('data', data)\r\n                return (\r\n                    <div className=\"pop-up\">\r\n                        <div className=\"pop-window\">\r\n                            <span className=\"modal-portal-toggle\" onClick={this.deleteDetailInfo}>×</span>\r\n                            <div className=\"album-list-container\">\r\n                                <div className={this.state.isAllDescriptionShowed ? \"album-list-info all-description-showed\" : \"album-list-info\"}>\r\n                                    <img className=\"album-list-bg\" src={data.coverImgUrl} alt=\"专辑图片\"/>\r\n                                    <span className=\"album-list-pic\">\r\n                                        <img src={data.coverImgUrl} alt=\"专辑图片\"/>\r\n                                    </span>\r\n                                    <div className=\"album-list-name\" title={data.name}>\r\n                                            {`歌单：${data.name}`}\r\n                                    </div>\r\n                                    <p className={this.state.isAllDescriptionShowed ? \"album-list-description all-description-showed\" : \"album-list-description\"}>\r\n                                        <span>介绍：</span><br/>\r\n                                        {`${data.description}`}\r\n                                    </p>\r\n                                    <span className=\"description-toggle\" onClick={this.descriptionToggle}>{this.state.isAllDescriptionShowed ? '收起' : '展开'}</span>\r\n                                </div>\r\n                                <div className=\"album-list-count\">\r\n                                    {`歌曲列表 (${data.trackCount}首歌)`}\r\n                                </div>\r\n                                <div className=\"album-list-items\">\r\n                                    {data.tracks.map((value, index) => {\r\n                                        return <SearchItem key={index} index={index} result={this.dataCleaning(value)}/>\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            default: {\r\n                return null\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"pop-up-container\">\r\n                {this.showAlbumList()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        albumDetailInfo: theState.albumDetailInfo,\r\n        albumStatus: theState.albumStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        deleteItemDetail: () => {\r\n            dispatch(deleteItemDetail())\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalPortal)","import React, {Component} from 'react'\r\n\r\nclass NotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                NotFound\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NotFound","import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport {connect} from 'react-redux'\n\nclass Menu extends Component {\n    constructor(props) {\n        super(props)\n\n        this.onClick = this.onClick.bind(this)\n    }\n\n    onClick() {\n\n    }\n\n    render() {\n        let searchContent = this.props.searchContent\n        let searchPath = `?s=${searchContent}`\n        if (searchContent === '' || searchContent === undefined) {\n            searchPath = ''\n        }\n        let menus = [\n            {\n                text: '首页',\n                pathname: '/',\n                search: '',\n            },\n            {\n                text: '热门歌单',\n                pathname: `/playlist`,\n                search: `?cat=${this.props.activeTag}`,\n            },\n            {\n                text: '搜索',\n                pathname: `/search`,\n                search: searchPath,\n            },\n        ]\n        return (\n            <nav>\n                <ul className=\"nav-container\">\n                    {\n                        menus.map((e, index) => {\n                                let href = `${e.pathname}${e.search}`\n                                let isCurrent = this.props.currentPathname === e.pathname\n                                // Link 组件相当于 a 标签的作用, to 相当于 href 属性\n                                return (\n                                    <li className=\"nav-item\" key={index}>\n                                        <Link className={isCurrent? \"nav-link nav-link-current\" : \"nav-link\"} to={href}>{e.text}</Link>\n                                    </li>\n                                )\n                            }\n                        )\n                    }\n                </ul>\n            </nav>\n        )\n    }\n}\n\nconst mapStateTopProps = (state, ownProps) => {\n    return {\n        activeTag: state.PlayListReducer.activeTag,\n        searchContent: state.SearchBarReducer.searchContent,\n        currentPathname: ownProps.location.pathname,\n    }\n}\n\nexport default withRouter(connect(mapStateTopProps, null)(Menu))\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {changeAudioStatus, getLyricFromNet, saveCurrentLyricIndex, changePlayMode, playNextSong} from \"../actions\"\r\nimport {timeFormat, getCurrentSongInfo} from '../../../utils'\r\n\r\nclass AudioController extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentTime: null,\r\n            duration: null,\r\n            sliding: false,\r\n            hover: false,\r\n        }\r\n        this.audio = React.createRef()\r\n        this.songSlider = React.createRef()\r\n        this.playOrPause = this.playOrPause.bind(this)\r\n        this.clickToSeek = this.clickToSeek.bind(this)\r\n        this.dragToSeek = this.dragToSeek.bind(this)\r\n        this.AfterDragToSeek = this.AfterDragToSeek.bind(this)\r\n        this.handleHover = this.handleHover.bind(this)\r\n        this.changePlayMode = this.changePlayMode.bind(this)\r\n        this.changeToPlayNextSong = this.changeToPlayNextSong.bind(this)\r\n        this.toggleList = this.toggleList.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        const a = this.audio.current\r\n        a.addEventListener('canplay', () => {\r\n            let lrcUrl = this.props.currentSongInfo.lrc\r\n            this.props.getLyricFromNet(lrcUrl)\r\n            const {currentTime, duration} = a\r\n            this.setState({\r\n                currentTime,\r\n                duration\r\n            })\r\n            console.log('加载完了')\r\n            a.play()\r\n        })\r\n        a.addEventListener('play', () => {\r\n            console.log('在播放了')\r\n            this.props.changeAudioStatus('play')\r\n        })\r\n        a.addEventListener('pause', () => {\r\n            console.log('暂停了一下')\r\n            this.props.changeAudioStatus('pause')\r\n        })\r\n        a.addEventListener('timeupdate', () => {\r\n            if (!this.state.sliding) {\r\n                const {currentTime} = a\r\n                this.setState({\r\n                    currentTime\r\n                })\r\n                this.parseCurrentTimeToGetLyricIndex(currentTime)\r\n            }\r\n        })\r\n        a.addEventListener('ended', () => {\r\n            this.props.playNextSong(this.props.playMode)\r\n            if (this.props.lengthOfSongList === 1 || this.props.playMode === 'circle') {\r\n                a.play()\r\n            }\r\n        })\r\n    }\r\n\r\n    parseCurrentTimeToGetLyricIndex(currentTime) {\r\n        let lyricArray = this.props.currentSongExtraInfo.currentLyric\r\n        for (let i = 0; i < lyricArray.length; i++) {\r\n            let time = lyricArray[i][0]\r\n            if (Math.abs(time - currentTime) < 0.3) {\r\n                this.props.saveCurrentLyricIndex(i)\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    getLyricIndexWhenJumpSong(currentTime) {\r\n        let lyricArray = this.props.currentSongExtraInfo.currentLyric\r\n        let index = 0\r\n        for (let i = 0; i < lyricArray.length; i++) {\r\n            let time = lyricArray[i][0]\r\n            if (time > currentTime) {\r\n                index = i - 1\r\n                break\r\n            }\r\n        }\r\n        let theLastLyric = lyricArray[lyricArray.length - 1]\r\n        if ((theLastLyric !== undefined) && (currentTime > theLastLyric[0])) {\r\n            index = lyricArray.length - 1\r\n        }\r\n        this.props.saveCurrentLyricIndex(index)\r\n    }\r\n\r\n    playOrPause() {\r\n        if (this.props.currentSongInfo.id === -1) {\r\n            return 0\r\n        }\r\n        const a = this.audio.current\r\n        if (this.props.AudioStatus === 'pause') {\r\n            a.play()\r\n            this.props.changeAudioStatus('play')\r\n        } else {\r\n            a.pause()\r\n            this.props.changeAudioStatus('pause')\r\n        }\r\n    }\r\n\r\n    getPlayButtonSvg() {\r\n        switch (this.props.AudioStatus) {\r\n            case 'play': {\r\n                return (\r\n                    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M243.2 208h166.4v608H243.2zM614.4 208h166.4v608h-166.4z\">\r\n                        </path>\r\n                    </svg>\r\n                )\r\n            }\r\n            case 'pause': {\r\n                return (\r\n                    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M289.5 844.3V179.7l445 332.3-445 332.3z\">\r\n                        </path>\r\n                    </svg>\r\n                )\r\n            }\r\n            default: {\r\n                return (\r\n                    <div>default</div>\r\n                )\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    clickToSeek(event) {\r\n        const a = this.audio.current\r\n        let target = event.target\r\n        if (!target.classList.contains('slider-point')) {\r\n            let { left, width } = event.currentTarget.getBoundingClientRect()\r\n            let clickPosition = (event.clientX - left) / width\r\n            let currentTime = clickPosition * a.duration\r\n            if (!isNaN(currentTime)) {\r\n                a.currentTime = currentTime\r\n                this.getLyricIndexWhenJumpSong(currentTime)\r\n            } else {\r\n                alert(`currentTime出现NaN了${currentTime}`)\r\n            }\r\n        }\r\n    }\r\n\r\n    dragToSeek() {\r\n        let isRunning = false\r\n        let isFirstDrag = true\r\n        return (event) => {\r\n            event.persist()\r\n            if (isRunning || isFirstDrag ) {\r\n                isFirstDrag = false\r\n                return\r\n            }\r\n            isRunning = true\r\n            window.requestAnimationFrame(() => {\r\n                this.seek(event)\r\n                isRunning = false\r\n            })\r\n            if (!this.state.sliding) {\r\n                this.setState({\r\n                    sliding: true\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    seek(event) {\r\n        const a = this.audio.current\r\n        let {left, width} = this.songSlider.current.getBoundingClientRect()\r\n        let dragPosition = (event.clientX - left) / width\r\n        if (dragPosition >= 0 && dragPosition <= 1) {\r\n            let currentTime = a.duration * dragPosition\r\n            this.setState({\r\n                currentTime\r\n            })\r\n        }\r\n    }\r\n\r\n    AfterDragToSeek() {\r\n        const a = this.audio.current\r\n        a.currentTime = this.state.currentTime\r\n        this.getLyricIndexWhenJumpSong(this.state.currentTime)\r\n        this.setState({\r\n            sliding: false\r\n        })\r\n    }\r\n\r\n    handleHover() {\r\n        this.setState({\r\n            hover: !this.state.hover\r\n        })\r\n    }\r\n\r\n    toggleList() {\r\n        let list = document.querySelector('.song-list')\r\n        list.classList.toggle('hidden')\r\n        let pop = document.querySelector('.pop-up')\r\n        if (pop === null) {\r\n            let body = document.querySelector(\"body\")\r\n            body.classList.toggle('ban-scroll')\r\n        }\r\n        let musicPlayer = document.querySelector('.audio-controller')\r\n        musicPlayer.classList.toggle('playlist-opened')\r\n        const a = this.audio.current\r\n        this.getLyricIndexWhenJumpSong(a.currentTime)\r\n        let songList = document.querySelector(('.song-list-container'))\r\n        let {height} = songList.getBoundingClientRect()\r\n        let i = Math.floor(height / 50 / 2)\r\n        songList.scrollTop = this.props.currentSongExtraInfo.currentSongIndex * 50 - 50 * i\r\n    }\r\n\r\n    changePlayMode() {\r\n        let modeList = ['loop', 'circle', 'random']\r\n        let index = modeList.indexOf(this.props.playMode)\r\n        let nextIndex = (index + 1) % modeList.length\r\n        let nextModeType = modeList[nextIndex]\r\n        this.props.changePlayMode(nextModeType)\r\n    }\r\n\r\n    getModeButtonSvg() {\r\n        switch (this.props.playMode) {\r\n            case 'loop': {\r\n                return (\r\n                    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M922 607.1V887H102V157h612.2V58.2l200 125-200 125V207H152v630h720V607.1h50z\">\r\n                        </path>\r\n                    </svg>\r\n                )\r\n            }\r\n            case 'circle': {\r\n                return (\r\n                    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                        <path\r\n                            d=\"M922 607.1V887H102V157h612.2V58.2l200 125-200 125V207H152v630h720V607.1h50zM560.5 737.6V306.4h-34c-9.2 18.6-24.8 37.7-46.9 57.4-22.1 19.7-47.9 36.5-77.3 50.4v51c16.4-6.1 34.9-15.1 55.5-27.2s37.3-24.2 50-36.3v336h52.7z\">\r\n                        </path>\r\n                    </svg>\r\n                )\r\n            }\r\n            case 'random': {\r\n                return (\r\n                    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M726.6 774H594.4L458.8 512l135.6-262h132.2v98.7l200-125-200-125V200H564.4L430.7 457.7 297.4 200h-200v50h169.2l135.9 262-135.9 262H97.4v50h200l133.3-257.7L564.4 824h162.2v101.3l200-125-200-125z\">\r\n                        </path>\r\n                    </svg>\r\n                )\r\n            }\r\n            default: {\r\n                return <div>default</div>\r\n            }\r\n        }\r\n    }\r\n\r\n    changeToPlayNextSong(loopStep) {\r\n        return () => {\r\n            this.props.playNextSong(this.props.playMode, loopStep)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {currentTime, duration} = this.state\r\n        let {name, singer, pic, url} = this.props.currentSongInfo\r\n        let playMode = this.props.playMode\r\n        let mapEnglishToChinese = {\r\n            loop: '列表循环',\r\n            circle: '单曲循环',\r\n            random: '随机播放',\r\n        }\r\n        let playModeTitle = mapEnglishToChinese[this.props.playMode]\r\n        return (\r\n            <div className=\"audio-controller\">\r\n                <audio src={url} ref={this.audio}>\r\n                </audio>\r\n                <div className=\"album-cover\">\r\n                    <img src={pic} alt=\"专辑图片\" />\r\n                </div>\r\n                <div className=\"extra-info-container\">\r\n                    <div className={this.state.hover? \"song-slider hover\" : \"song-slider\"} onClick={this.clickToSeek} onMouseOver={this.handleHover} onMouseOut={this.handleHover} ref={this.songSlider}>\r\n                        <div className=\"slider-bg\">\r\n                        </div>\r\n                        <div className=\"slider-progress\" style={{width: `${ currentTime / duration * 100 }%`}}>\r\n                        <span className=\"slider-point\" draggable=\"true\" onDrag={this.dragToSeek()} onDragEnd={this.AfterDragToSeek}>\r\n                        </span>\r\n                        </div>\r\n                    </div>\r\n                    <span className=\"music-timeline\">\r\n                        <span id=\"music-time-now\">{timeFormat(currentTime)}</span>\r\n                        <span> / </span>\r\n                        <span id=\"music-time-all\">{timeFormat(duration)}</span>\r\n                    </span>\r\n                    <div className=\"song-info\">\r\n                        <div className=\"song-info-name\" title={name}>{name}</div>\r\n                        <div className=\"song-info-singer\" title={singer}>{singer}</div>\r\n                    </div>\r\n                    <div className=\"controller-btn\">\r\n                        <span className=\"back-btn\" title=\"上一首(ctrl+←)\" onClick={this.changeToPlayNextSong(-1)}>\r\n                            <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                                <path d=\"M362.3 512l445-332.3v664.5L362.3 512zM216.7 179.7h80v664.5h-80V179.7z\">\r\n                                </path>\r\n                            </svg>\r\n                        </span>\r\n                        <span className={[\"play-btn\", this.props.AudioStatus].join(' ')} title=\"播放/暂停(p)\" onClick={this.playOrPause}>\r\n                            {this.getPlayButtonSvg()}\r\n                        </span>\r\n                        <span className=\"next-btn\" title=\"下一首(ctrl+→)\" onClick={this.changeToPlayNextSong(1)}>\r\n                            <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                                <path d=\"M216.7 844.3V179.7l445 332.3-445 332.3z m590.6 0h-80V179.7h80v664.6z\">\r\n                                </path>\r\n                            </svg>\r\n                        </span>\r\n                        <span className=\"volume-btn icon\">\r\n                            <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                                <path d=\"M697.5 76l-497 230.6-147.3-20v420l147.3-20 497 230.6V76z m-50 760.7l-424.9-195-13.7-6.8-15.2 2.1-90.6 12.3V343.8l90.6 12.3 15.2 2.1 13.7-6.8 424.9-194.9v680.2zM812 612h-50V412h50v200z m204.7 200h-50V212h50v600zM914.3 712h-50V312h50v400z\">\r\n                                </path>\r\n                            </svg>\r\n                        </span>\r\n                        <span className={`mode-btn icon ${playMode}`} data-mode={playMode} title={playModeTitle} onClick={this.changePlayMode}>\r\n                            {this.getModeButtonSvg()}\r\n                        </span>\r\n                        <span className=\"list-btn icon\" title=\"播放列表\" onClick={this.toggleList}>\r\n                            <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n                                <path d=\"M91.9 165.2h50v50h-50v-50z m150.2 0v50h690v-50h-690zM91.9 429.7h50v-50h-50v50z m150.2 0h690v-50h-690v50zM91.9 644.3h50v-50h-50v50z m150.2 0h690v-50h-690v50zM91.9 858.8h50v-50h-50v50z m150.2 0h690v-50h-690v50z\">\r\n                                </path>\r\n                            </svg>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    let lengthOfSongList = theState.songList.length\r\n    return {\r\n        lengthOfSongList: lengthOfSongList,\r\n        AudioStatus: theState.AudioStatus,\r\n        currentSongInfo: currentSongInfo,\r\n        currentSongExtraInfo: theState.currentSongExtraInfo,\r\n        playMode: theState.playMode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeAudioStatus: (status) => {\r\n            dispatch(changeAudioStatus(status))\r\n        },\r\n        getLyricFromNet: (url) => {\r\n            dispatch(getLyricFromNet(url))\r\n        },\r\n        saveCurrentLyricIndex: (currentLyricIndex) => {\r\n            dispatch(saveCurrentLyricIndex(currentLyricIndex))\r\n        },\r\n        changePlayMode: (modeType) => {\r\n            dispatch(changePlayMode(modeType))\r\n        },\r\n        playNextSong: (modeType, loopStep) => {\r\n            dispatch(playNextSong(modeType, loopStep))\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AudioController)","import React, {Component} from 'react'\r\nimport {timeFormat, getCurrentSongInfo} from '../../../utils'\r\nimport {connect} from \"react-redux\"\r\nimport {playTheSongInList, deleteTheSong} from '../actions'\r\n\r\nclass SongItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handlePlay = this.handlePlay.bind(this)\r\n        this.handlePause = this.handlePause.bind(this)\r\n        // this.handleDelete = this.handleDelete.bind(this)\r\n    }\r\n\r\n    handlePlay() {\r\n        if (this.props.currentSongId !== this.props.songInfo.id) {\r\n            this.props.playTheSongInList(this.props.songIndex)\r\n            console.log('this.props.songInfo，第一次放', this.props.songInfo)\r\n        } else {\r\n            let audio = document.querySelector('audio')\r\n            audio.play()\r\n        }\r\n    }\r\n\r\n    handlePause() {\r\n        let audio = document.querySelector('audio')\r\n        audio.pause()\r\n    }\r\n\r\n    getPlayOrPauseButtonSvg() {\r\n        let {id} = this.props.songInfo\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        if (isTheSongPlaying) {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M910.8 303.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S129.8 720.8 129.8 509.2 301.4 126.1 513 126.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C654.6 78.9 585.9 61.5 513 61.5 265.7 61.5 65.3 262 65.3 509.2S265.7 956.9 513 956.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                    <path d=\"M385.4 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.6 0 32-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9zM578.9 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.5 0 31.9-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9z\">\r\n                    </path>\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        } else {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                    <path d=\"M415.8 679.9c5.9 0 11.5-1.6 16.2-4.5l231.1-134.6c10.9-5.2 18.5-16.3 18.5-29.2 0-11.9-6.4-22.3-16-27.8L439.7 352.2c-5.8-6.7-14.4-10.9-23.9-10.9-17.6 0-31.8 14.4-31.8 32.1 0 0.6 0 1.2 0.1 1.8l-0.4 0.2 0.5 269c-0.1 1.1-0.2 2.2-0.2 3.4 0 17.7 14.3 32.1 31.8 32.1z\">\r\n                    </path>\r\n                    <path d=\"M909.8 306.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S128.8 723.8 128.8 512.2 300.4 129.1 512 129.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C653.6 81.9 584.9 64.5 512 64.5 264.7 64.5 64.3 265 64.3 512.2S264.7 959.9 512 959.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {id, name, singer, time} = this.props.songInfo\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        return (\r\n            <div className=\"song-list-item-container\" style={isTheSongPlaying ? {color: 'rgb(255, 255, 255)'} : {}}>\r\n                <div className=\"song-list-item-name\">\r\n                    <span className=\"song-name\" title={name}>{name}</span>\r\n                    <span className=\"song-list-item-play\" onClick={isTheSongPlaying ? this.handlePause : this.handlePlay}>\r\n                        {this.getPlayOrPauseButtonSvg()}\r\n                    </span>\r\n                    <span className=\"song-list-item-delete\" onClick={this.props.deleteTheSong.bind(this, this.props.songIndex)}>\r\n                        <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                            <path d=\"M897.2 128H578.7c-1.6-34.7-30.2-62.4-65.3-62.4s-63.8 27.7-65.3 62.4h-320c-17.5 0-31.9 14.4-31.9 31.9s14.4 31.9 31.9 31.9H192v639.8c0 70.4 57.6 128 128 128h384.1c70.4 0 128-57.6 128-128V676.2c0.1-1.2 0.2-2.4 0.2-3.6 0.1-17.8-14.4-32.1-32.1-32.1-17.8 0-32.2 14.4-32.2 32.1v159.1c0 35.2-28.8 64-64 64H320c-35.2 0-64-28.8-64-64V191.8h511.9v223.1c0 17.7 14.4 32.1 32.2 32.1s32.2-14.4 32.2-32.1c0-1.2-0.1-2.4-0.2-3.6V191.8h65.1c17.6 0 31.9-14.4 31.9-31.9S914.7 128 897.2 128z\">\r\n                            </path>\r\n                            <path d=\"M386.9 350.6v386.6c0 16.8 13.8 30.6 30.6 30.6s30.6-13.8 30.6-30.5V350.6c0-16.8-13.8-30.6-30.6-30.6s-30.6 13.8-30.6 30.6zM576.7 350.6v386.6c0 16.8 13.8 30.6 30.6 30.6s30.6-13.8 30.6-30.5V350.6c0-16.8-13.8-30.6-30.6-30.6s-30.6 13.8-30.6 30.6z\">\r\n                            </path>\r\n                            <path d=\"M768 543.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                            </path>\r\n                        </svg>\r\n                    </span>\r\n                </div>\r\n                <div className=\"song-list-item-singer name\">\r\n                    <span title={singer}>{singer}</span>\r\n                </div>\r\n                <div className=\"song-list-item-time\">\r\n                    {timeFormat(time)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    let currentSongId = currentSongInfo.id\r\n    return {\r\n        AudioStatus: theState.AudioStatus,\r\n        currentSongId: currentSongId,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        playTheSongInList: (songInfo) => {\r\n            dispatch(playTheSongInList(songInfo))\r\n        },\r\n        deleteTheSong: (songIndex) => {\r\n            dispatch(deleteTheSong(songIndex))\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SongItem)","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport SongItem from './SongItem'\r\nimport {getCurrentSongInfo} from '../../../utils'\r\n\r\nclass SongList extends Component {\r\n    autoScrollLyricList(div, currentLyricIndex) {\r\n        if (div !== null) {\r\n            let {height} = div.getBoundingClientRect()\r\n            let i = Math.floor(height / 46 / 2)\r\n            div.scrollTop = currentLyricIndex * 46 - 46 * i\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {pic} = this.props.currentSongInfo\r\n        let defaultPic = \"http://s4.music.126.net/style/web2/img/default/default_album.jpg\"\r\n        let picUrl = pic || defaultPic\r\n        let lyric = this.props.currentSongExtraInfo.currentLyric\r\n        let currentLyricIndex = this.props.currentSongExtraInfo.currentLyricIndex\r\n        return (\r\n            <div className=\"song-list hidden\">\r\n                <div className=\"song-list-bg\">\r\n                </div>\r\n                <div className=\"song-list-img\" style={{backgroundImage: `url(${picUrl})`}}>\r\n                </div>\r\n                <div className=\"song-list-header\">播放列表</div>\r\n                <div className=\"song-list-container\">\r\n                    <div className=\"song-list-head-container\">\r\n                        <div className=\"song-list-item-name\">\r\n                            <span title=\"\">歌曲</span>\r\n                        </div>\r\n                        <div className=\"song-list-item-singer\">\r\n                            <span title=\"\">歌手</span>\r\n                        </div>\r\n                        <div className=\"song-list-item-time\">时长</div>\r\n                    </div>\r\n                    {this.props.songList.map((value, index) => {\r\n                        return <SongItem key={index} songIndex={index} songInfo={value}/>\r\n                    })}\r\n                </div>\r\n                <div className=\"lyric-list\" ref={(div) => {this.autoScrollLyricList(div, currentLyricIndex)}}>\r\n                    {\r\n                        lyric.map((value, index) => {\r\n                            return <p className={(currentLyricIndex === index)? \"lyric-item active\" : \"lyric-item\"} key={index}>{value[1]}</p>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    return {\r\n        songList: theState.songList,\r\n        currentSongInfo: currentSongInfo,\r\n        currentSongExtraInfo: theState.currentSongExtraInfo,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(SongList)","import React, {Component} from 'react'\r\nimport AudioController from \"./AudioController\"\r\nimport SongList from \"./SongList\"\r\nimport './MusicController.css'\r\n\r\nclass MusicController extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"music-player\">\r\n                <AudioController />\r\n                <SongList />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MusicController","import React, {Component} from 'react'\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"page-footer\">\r\n                页脚\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React, {Component} from 'react'\n// import a as b from module 相当于给 a 模块起了一个别名 b,\n// 这样在其他地方使用可以直接使用 b 这个变量名\nimport { BrowserRouter as Router, Route, Switch} from \"react-router-dom\"\nimport Home from \"./Home\"\nimport {view as PlayListPage} from \"./playListPage/\"\nimport {ModalPortal} from \"./playListPage/\"\nimport {view as SearchPage} from \"./searchPage/\"\nimport NotFound from \"./NotFound\"\nimport Menu from './Menu'\nimport MusicController from \"./audioController/views/MusicController\"\nimport Footer from './Footer'\nimport './App.css'\n\n\nclass App extends Component {\n\n    render() {\n        return (\n            // BrowserRouter 会使用 HTML5 的 history API 渲染单页路由\n            <Router>\n                <React.Fragment>\n                    <Menu />\n                {/*Router 只能有一个子元素*/}\n                {/*也可以放一个 Switch 组件*/}\n                    <div className=\"content-container\">\n                        <Switch>\n                            {/*Route 组件用来匹配 location.path 的值, 并且渲染相应的组件 */}\n                            {/*exact 表示路径完全匹配时才算匹配*/}\n                            {/*比如 /todo/1 与 /todo 并不是完全匹配, 与 /todo/:id 完全匹配*/}\n                            <Route exact path=\"/\" component={Home} />\n                            <Route exact path=\"/playlist\" component={PlayListPage} />\n                            <Route exact path=\"/search\" component={SearchPage} />\n                            <Route component={NotFound} />\n                        </Switch>\n                    </div>\n                    <Footer />\n                    <MusicController />\n                    <ModalPortal />\n                </React.Fragment>\n            </Router>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { applyMiddleware, createStore, combineReducers} from 'redux'\r\nimport {reducer as SearchBarReducer} from './components/searchPage/'\r\nimport {reducer as PlayListReducer} from './components/playListPage/'\r\nimport {reducer as AudioReducer} from './components/audioController/'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport {loadSongListInLocalStorage} from './utils'\r\n\r\nconst initValue = {\r\n    SearchBarReducer: {\r\n        searchContent: ''\r\n    },\r\n    PlayListReducer: {\r\n        activeTag: '全部',\r\n        albumStatus: '',\r\n        albumDetailInfo: '',\r\n    },\r\n    AudioReducer: {\r\n        AudioStatus: 'pause',\r\n        songList: loadSongListInLocalStorage(),\r\n        currentSongExtraInfo: {\r\n            currentSongIndex: -1,\r\n            currentLyric: [],\r\n            currentLyricIndex: -1,\r\n        },\r\n        playMode: 'loop',\r\n        initSongInfo: {\r\n            id: -1,\r\n            name: '歌曲',\r\n            singer: '歌手',\r\n            lrc: null,\r\n            pic: \"http://s4.music.126.net/style/web2/img/default/default_album.jpg\",\r\n            url: null,\r\n            time: null,\r\n        },\r\n    },\r\n}\r\n\r\nconst reducerObj = {\r\n    SearchBarReducer,\r\n    PlayListReducer,\r\n    AudioReducer,\r\n}\r\n\r\nconst reducer = combineReducers(reducerObj)\r\n\r\nconst middleware = [thunkMiddleware]\r\n\r\nconst storeEnhancers = composeWithDevTools(applyMiddleware(...middleware))\r\n\r\nconst Store = createStore(reducer, initValue, storeEnhancers)\r\n\r\nexport default Store","import * as search from './actionTypes.js'\r\nimport * as Status from './status.js'\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case search.INPUT_CHANGE: {\r\n            return {\r\n                ...state,\r\n                searchInput: action.input\r\n            }\r\n        }\r\n        case search.SEARCH_STARTED: {\r\n            return {...state,\r\n                status: Status.LOADING\r\n            }\r\n        }\r\n        case search.SEARCH_SUCCESS: {\r\n            return {...state,\r\n                status: Status.SUCCESS,\r\n                searchResult: action.result,\r\n                searchContent: action.searchContent\r\n            }\r\n        }\r\n        case search.SEARCH_FAILURE: {\r\n            return {\r\n                status: Status.FAILURE\r\n            }\r\n        }\r\n        default: {\r\n            return state === undefined ? [] : state\r\n        }\r\n    }\r\n}","import * as playList from './actionTypes.js'\r\nimport * as Status from './status.js'\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case playList.PLAYLIST_TAG_CHANGE: {\r\n            return {...state,\r\n                activeTag: action.tagName\r\n            }\r\n        }\r\n        case playList.LOAD_ITEM_DETAIL_STARTED: {\r\n            return {...state,\r\n                albumStatus: Status.LOADING\r\n            }\r\n        }\r\n        case playList.LOAD_ITEM_DETAIL_SUCCESS: {\r\n            return {...state,\r\n                albumStatus: Status.SUCCESS,\r\n                albumDetailInfo: action.albumDetailInfo\r\n            }\r\n        }\r\n        case playList.DELETE_ITEM_DETAIL: {\r\n            return{...state,\r\n                albumStatus: '',\r\n                albumDetailInfo: ''\r\n            }\r\n        }\r\n        case playList.PLAYLIST_LOAD_STARTED: {\r\n            return {...state,\r\n                playListStatus: Status.LOADING\r\n            }\r\n        }\r\n        case playList.PLAYLIST_LOAD_SUCCESS: {\r\n            return {...state,\r\n                playListStatus: Status.SUCCESS,\r\n                playListResult: action.playListResult\r\n            }\r\n        }\r\n        case playList.PLAYLIST_LOAD_FAILURE: {\r\n            return {\r\n                playListStatus: Status.FAILURE\r\n            }\r\n        }\r\n        default: {\r\n            return state === undefined ? {} : state\r\n        }\r\n    }\r\n}","import * as audioController from './actionTypes'\r\nimport {saveSongToLocalStorage, deleteSongInLocalStorage} from \"../../utils\"\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case audioController.CHANGE_AUDIO_STATUS: {\r\n            return {...state,\r\n                AudioStatus: action.status\r\n            }\r\n        }\r\n        case audioController.APPEND_THE_SONG: {\r\n            let songList = state['songList']\r\n            let isTheSongNotExisted = songList.every((value) => {\r\n                return (value.id !== action.songInfo.id)\r\n            })\r\n            if (isTheSongNotExisted) {\r\n                let cloneList = JSON.parse(JSON.stringify(songList))\r\n                cloneList.push(action.songInfo)\r\n                saveSongToLocalStorage(action.songInfo)\r\n                return {\r\n                    ...state,\r\n                    songList: cloneList,\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n        }\r\n        case audioController.DELETE_THE_SONG: {\r\n            let songList = state['songList']\r\n            let cloneList = JSON.parse(JSON.stringify(songList))\r\n            let songIndex = action.songIndex\r\n            let currentSongIndex = state.currentSongExtraInfo.currentSongIndex\r\n            let listLength = cloneList.length\r\n            deleteSongInLocalStorage(songIndex)\r\n            cloneList.splice(songIndex, 1)\r\n            if (listLength === 1) {\r\n                return {\r\n                    ...state,\r\n                    songList: [],\r\n                    currentSongExtraInfo: {\r\n                        ...state.currentSongExtraInfo,\r\n                        currentSongIndex: -1,\r\n                    }\r\n                }\r\n            }\r\n            if (currentSongIndex !== songIndex) {\r\n                if (currentSongIndex < songIndex) {\r\n                    return {\r\n                        ...state,\r\n                        songList: cloneList,\r\n                    }\r\n                } else {\r\n                    let newSongIndex = currentSongIndex - 1\r\n                    console.log('删除了前面的歌')\r\n                    return {\r\n                        ...state,\r\n                        songList: cloneList,\r\n                        currentSongExtraInfo: {\r\n                            ...state.currentSongExtraInfo,\r\n                            currentSongIndex: newSongIndex,\r\n                        }\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                if (currentSongIndex !== listLength - 1) {\r\n                    let newSongIndex = currentSongIndex\r\n                    return {\r\n                        ...state,\r\n                        songList: cloneList,\r\n                        currentSongExtraInfo: {\r\n                            ...state.currentSongExtraInfo,\r\n                            currentSongIndex: newSongIndex,\r\n                        }\r\n                    }\r\n                } else {\r\n                    let newSongIndex = currentSongIndex - 1\r\n                    return {\r\n                        ...state,\r\n                        songList: cloneList,\r\n                        currentSongExtraInfo: {\r\n                            ...state.currentSongExtraInfo,\r\n                            currentSongIndex: newSongIndex,\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        case audioController.PLAY_THE_SONG_IN_PAGE: {\r\n            let songList = state['songList']\r\n            let currentSongIndex = -1\r\n            let isTheSongNotExisted = songList.every((value, index) => {\r\n                currentSongIndex = index\r\n                return (value.id !== action.songInfo.id)\r\n            })\r\n            console.log('currentSongIndex', currentSongIndex)\r\n            if (isTheSongNotExisted) {\r\n                let cloneList = JSON.parse(JSON.stringify(songList))\r\n                cloneList.push(action.songInfo)\r\n                saveSongToLocalStorage(action.songInfo)\r\n                return {\r\n                    ...state,\r\n                    songList: cloneList,\r\n                    currentSongExtraInfo: {\r\n                        ...state.currentSongExtraInfo,\r\n                        currentSongIndex: cloneList.length - 1,\r\n                        currentLyricIndex: -1,\r\n                    },\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    currentSongExtraInfo: {\r\n                        ...state.currentSongExtraInfo,\r\n                        currentSongIndex,\r\n                        currentLyricIndex: -1,\r\n                    },\r\n                }\r\n            }\r\n        }\r\n        case audioController.PLAY_THE_SONG_IN_LIST: {\r\n            return {\r\n                ...state,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentSongIndex: action.songIndex,\r\n                    currentLyricIndex: -1,\r\n                }\r\n            }\r\n        }\r\n        case audioController.PLAY_NEXT_SONG: {\r\n            let modeType = action.modeType\r\n            let currentSongIndex = state.currentSongExtraInfo.currentSongIndex\r\n            let LengthOfSongList = state.songList.length\r\n            let mapModeTypeToNextStep = {\r\n                loop: action.loopStep,\r\n                circle: 0,\r\n                random: parseInt(LengthOfSongList * Math.random()),\r\n            }\r\n            let step = mapModeTypeToNextStep[modeType]\r\n            let nextSongIndex = (currentSongIndex + step + LengthOfSongList) % LengthOfSongList\r\n            return {\r\n                ...state,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentSongIndex: nextSongIndex,\r\n                    currentLyric: [],\r\n                    currentLyricIndex: -1,\r\n                },\r\n            }\r\n        }\r\n        case audioController.GET_LYRIC: {\r\n            return {\r\n                ...state,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentLyric: action.lyric,\r\n                },\r\n            }\r\n        }\r\n        case audioController.GET_CURRENT_TIME: {\r\n            let index = action.currentLyricIndex\r\n            if (index === undefined) {\r\n                return {\r\n                    ...state,\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    currentSongExtraInfo: {\r\n                        ...state.currentSongExtraInfo,\r\n                        currentLyricIndex: index,\r\n                    },\r\n                }\r\n            }\r\n        }\r\n        case audioController.CHANGE_PLAY_MODE: {\r\n            return {\r\n                ...state,\r\n                playMode: action.modeType,\r\n            }\r\n        }\r\n        default: {\r\n            return state === undefined ? {} : state\r\n        }\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PlayerApp from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport Store from './Store'\n\nReactDOM.render(\n    <Provider store={Store}>\n        <PlayerApp />\n    </Provider>,\n    document.getElementById('root')\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}