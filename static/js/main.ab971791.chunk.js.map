{"version":3,"sources":["api/api.js","components/homePage/actions.js","components/homePage/views/ImageSlider.js","components/homePage/actionTypes.js","components/homePage/views/Home.js","components/playListPage/actions.js","components/playListPage/actionTypes.js","utils.js","components/playListPage/views/PlayListItem.js","components/common/PageSelector.js","components/playListPage/views/PlayList.js","components/playListPage/status.js","components/playListPage/views/TagItem.js","components/playListPage/views/TagSelector.js","components/playListPage/views/icon.js","components/common/icon.js","components/searchPage/actions.js","components/searchPage/actionTypes.js","components/searchPage/views/SearchBar.js","components/audioController/actions.js","components/audioController/actionTypes.js","components/audioController/views/icon.js","components/audioController/views/AudioController.js","components/audioController/views/SongItem.js","components/audioController/views/SongList.js","components/audioController/views/MusicController.js","components/searchPage/views/SearchItem.js","components/searchPage/views/SearchList.js","components/searchPage/views/SearchPage.js","components/searchPage/status.js","components/playListPage/views/AlbumDetail.js","components/playListPage/views/ModalPortal.js","components/playListPage/views/PlayListPage.js","components/NotFound.js","components/Menu.js","components/Footer.js","components/App.js","serviceWorker.js","Store.js","components/homePage/reducer.js","components/searchPage/reducer.js","components/playListPage/reducer.js","components/audioController/reducer.js","index.js"],"names":["MusicApi","queryObj","callback","_queryObj","Object","objectSpread","input","pageSize","page","company","path","concat","this","get","_queryObj2","category","_queryObj3","albumId","ajax","abortObj","albumDetail","abort","bind","lrcUrl","Api","classCallCheck","baseUrl","isPathEqualToUrl","url","args","_args","method","data","r","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","console","log","send","ImageSlider","props","_this","possibleConstructorReturn","getPrototypeOf","call","handlerNextImage","assertThisInitialized","autoPlay","stopAutoPlay","handlerClickPoint","images","length","fetchImgInHomePage","step","lengthOfImages","indexOfNextImg","indexOfCurrentImg","changeTheIndexOfImg","event","Number","target","dataset","playNextImage","_this2","timerID","setInterval","clearInterval","index","_this3","widthOfSlider","offset","react_default","a","createElement","className","onMouseOver","onMouseOut","onClick","data-step","style","width","height","transform","map","value","key","src","picUrl","alt","getClassNameOfPoints","data-index","Component","connect","state","theState","homePageReducer","dispatch","getImgInHomePage","imgObj","JSON","parse","response","type","Home","views_ImageSlider","playListTagChange","tagName","timeFormat","seconds","m","String","Math","floor","s","saveCurrentSongIndexInLocalStorage","localStorage","setItem","stringify","saveSongToLocalStorage","songInfo","songList","getItem","push","getCurrentSongInfo","currentSongIndex","currentSongExtraInfo","initSongInfo","parseLyric","lyric","oneLyricInfo","indexOfTime","indexOf","oneLyric","slice","time","timeInfo","timeList","split","exp","pow","timeDeFormat","argsFromQuery","query","o","forEach","e","_e$split","_e$split2","slicedToArray","k","v","changeImgResolution","pixel","list","PlayListItem","_this$props$itemInfo","itemInfo","id","name","coverImgUrl","coverThumbImgUrl","data-id","fetchAlbumDetailInfo","title","AlbumId","arguments","undefined","albumDetailInfo","playListResult","code","PageSelector","handleChangePage","isPreviousAndNextCanBeClicked","_this$props$selectorI","selectorInfo","totalPage","currentPage","getPageSelector","changePage","pushHistory","_this$props$selectorI2","previousCanNotBeClicked","nextCanNotBeClicked","previousClassName","nextClassName","previousAndNext","_previousAndNext","disabled","showMiddleTag","endPage","totalTagCount","result","i","lastList","startList","changingTagCount","end","unshift","toConsumableArray","PlayList","getSelectorInfo","params","location","search","activeTag","cat","fetchHotPlayList","decodeURI","prevProps","prevState","snapshot","newPage","history","viewBox","cx","cy","fill","views_PlayListItem","common_PageSelector","showHotPlayList","PlayListReducer","playListStatus","hotPlayList","playListLoadSuccess","playListPageChangePage","withRouter","TagItem","toggleShow","rowData","theTagTabs","getClassName","Link","to","tagChange","TagSelector","mainTags","styleTags","languageTags","senceTags","emotionTags","themeTags","mapTagToMain","语种","风格","场景","情感","主题","show","hide","clickOnBlankArea","document","onclick","nativeEvent","stopImmediatePropagation","setState","classNameOfIcon","classNameOfTagsContainer","classNameOfMainTag","d","pathname","views_TagItem","loadingIcon","inputChange","SearchBar","fillSearchContentInSearchBar","onSearch","onChange","onKeyPress","searchObj","searchContent","parseUrlGetSearchContent","searchInput","isEqualToOldSearchContent","isAtSearchPage","window","urlObj","getSearchUrl","trim","searchResult","placeholder","onKeyDown","SearchBarReducer","toggleSongListWindow","changeAudioStatus","changePlayMode","modeType","saveCurrentLyricIndex","currentLyricIndex","appendTheSong","deleteTheSong","songIndex","playTheSongInPage","playTheSongInList","playNextSong","loopStep","getLyric","getLyricFromNet","l","lyricList","lyricsArray","_loop","_parseLyric","repeatIndex","findIndex","theLyric","lyricBeforeTranslated","element","translatedLyric","clearTimeRepeat","isNaN","lyricItem","sort","prev","current","parseLyricArray","previousBtn","nextBtn","volumeBtn","listBtn","AudioController","mapEnglishToChinese","loop","circle","random","isFirstLoad","currentTime","duration","isSliding","isHovering","audio","React","createRef","songSlider","playOrPause","clickToSeek","dragToSeek","AfterDragToSeek","handleHover","changeToPlayNextSong","toggleSongList","addEventListener","currentSongInfo","lrc","play","parseLyricIndex","_this2$props","lengthOfSongList","playMode","deltaTime","theLastLyricTime","lyricInfo","isStart","isNotEnd","currentLyric","getNextLyricIndex","currentSrc","AudioStatus","pause","classList","contains","_event$currentTarget$","currentTarget","getBoundingClientRect","left","clientX","isRunning","isFirstDrag","persist","requestAnimationFrame","seek","_this$songSlider$curr","dragPosition","querySelector","toggle","modeList","nextModeType","_this4","_this$state","_this$props$currentSo","singer","pic","mode","playModeTitle","showSongListWindow","ref","draggable","onDrag","onDragEnd","icon","join","data-mode","AudioReducer","SongItem","handlePlay","handlePause","currentSongId","_this$props$songInfo","isTheSongPlaying","color","getPlayOrPauseButtonSvg","SongList","activeLyric","scrollTop","offsetTop","getTheActiveLyricOffset","backgroundImage","views_SongItem","MusicController","views_AudioController","views_SongList","actions","SearchItem","handleAppend","isOdd","SearchList","ar","artist","privilege","dt","al","totalCount","songCount","ceil","searchPage","searchData","songs","num","views_SearchItem","dataCleaning","SearchPage","fetchSearchResult","views_SearchList","views_SearchBar","showSearchResult","error","AlbumDetail","isAllDescriptionShowed","descriptionToggle","trackCount","albumPageSize","albumCurrentPage","description","_this$props","start","dataOfShowedAlbums","tracks","classNameOfAlbumInfo","classNameOfDescription","fetchedData","artists","album","blurPicUrl","albumChangePage","ModalPortal","deleteDetailInfo","container","body","albumStatus","add","remove","deleteItemDetail","views_AlbumDetail","ReactDOM","createPortal","showAlbumList","PlayListPage","views_TagSelector","views_PlayList","views_ModalPortal","NotFound","Menu","_this$props$searchBar","searchBar","searchPath","menus","text","playList","href","isCurrent","currentPathname","ownProps","Footer","App","BrowserRouter","Fragment","components_Menu","Switch","Route","exact","component","components_Footer","audioController_views_MusicController","Boolean","hostname","match","initValue","loadSongListInLocalStorage","loadCurrentSongIndexInLocalStorage","reducerObj","action","cloneList","every","deleteSongIndex","listLength","splice","deleteSongInLocalStorage","justOneSong","isCurrentSong","isTheLastSong","beforeCurrentSong","updateCurrentSongIndex","updateCurrentLyric","song","LengthOfSongList","nextSongIndex","parseInt","reducer","combineReducers","middleware","thunkMiddleware","storeEnhancers","composeWithDevTools","applyMiddleware","apply","Store","createStore","app","es","store","src_components_App","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab971791.chunk.js","sourcesContent":["const ajax = function(args, callback) {\r\n    let {method, url, data} = {...args}\r\n    let r = new XMLHttpRequest()\r\n    r.open(method, url, true)\r\n    // r.setRequestHeader('Content-Type', 'application/json')\r\n    r.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\r\n    r.onreadystatechange = () => {\r\n        if (r.readyState === 4) {\r\n            if ((r.status >= 200 && r.status < 300) || r.status === 304) {\r\n                callback(r)\r\n            } else {\r\n                console.log('error')\r\n            }\r\n        }\r\n    }\r\n    r.send(data)\r\n    return r\r\n}\r\n\r\nclass Api {\r\n    constructor() {\r\n        this.baseUrl = 'https://v1.itooi.cn/'\r\n    }\r\n\r\n    get(path, callback, isPathEqualToUrl) {\r\n        let method = 'GET'\r\n        let url = this.baseUrl + path\r\n        if (isPathEqualToUrl) {\r\n            url = path\r\n        }\r\n        let args = {\r\n            method,\r\n            url,\r\n            data: null,\r\n        }\r\n        return ajax(args, callback)\r\n    }\r\n}\r\n\r\nclass MusicApi extends Api {\r\n    searchResult(queryObj, callback) {\r\n        let {input, pageSize, page, company} = {...queryObj}\r\n        let path = `${company}/search?keyword=${input}&type=song&pageSize=${pageSize}&page=${(page - 1) * pageSize}`\r\n        // 如果需要源数据，加上 &format=1\r\n        this.get(path, callback)\r\n    }\r\n\r\n    hotPlayList(queryObj, callback) {\r\n        let {category, pageSize, page, company} = {...queryObj}\r\n        let path = `${company}/songList/hot?categoryType=${category}&pageSize=${pageSize}&page=${(page - 1) * pageSize}`\r\n        this.get(path, callback)\r\n    }\r\n\r\n    albumDetailInfo(queryObj, callback) {\r\n        let {albumId, company} = {...queryObj}\r\n        let path = `${company}/songList?id=${albumId}`\r\n        let ajax = this.get(path, callback)\r\n        MusicApi.abortObj.albumDetail = ajax.abort.bind(ajax)\r\n    }\r\n\r\n    getLyric(lrcUrl, callback) {\r\n        this.get(lrcUrl, callback, true)\r\n    }\r\n\r\n    getImgInHomePage(callback) {\r\n        let url = 'https://v1.itooi.cn/netease/banner'\r\n        this.get(url, callback, true)\r\n    }\r\n}\r\n\r\nMusicApi.abortObj = {}\r\n\r\nexport {\r\n    MusicApi,\r\n}","import * as homePage from './actionTypes'\r\nimport {MusicApi} from '../../api/api.js'\r\n\r\nexport const getImgInHomePage = (imgObj) => ({\r\n    type: homePage.GET_HOMEPAGE_IMG,\r\n    imgObj,\r\n})\r\n\r\nexport const changeTheIndexOfImg = (index) => ({\r\n    type: homePage.CHANGE_THE_INDEX_OF_IMG,\r\n    index,\r\n})\r\n\r\nexport const fetchImgInHomePage = () => {\r\n    return (dispatch) => {\r\n        let api = new MusicApi()\r\n        api.getImgInHomePage((r) => {\r\n            let imgObj = JSON.parse(r.response).data\r\n            dispatch(getImgInHomePage(imgObj))\r\n            console.log('轮播图信息', imgObj)\r\n        })\r\n    }\r\n}","import React, { Component } from \"react\"\r\nimport {connect} from 'react-redux'\r\nimport {fetchImgInHomePage, changeTheIndexOfImg} from '../actions'\r\n\r\nclass ImageSlider extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handlerNextImage = this.handlerNextImage.bind(this)\r\n        this.autoPlay = this.autoPlay.bind(this)\r\n        this.stopAutoPlay = this.stopAutoPlay.bind(this)\r\n        this.handlerClickPoint = this.handlerClickPoint.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.images.length === 0) {\r\n            this.props.fetchImgInHomePage()\r\n        }\r\n        this.autoPlay()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stopAutoPlay()\r\n    }\r\n\r\n    playNextImage(step) {\r\n        let lengthOfImages = this.props.images.length\r\n        let indexOfNextImg = (this.props.indexOfCurrentImg + step + lengthOfImages) % lengthOfImages\r\n        this.props.changeTheIndexOfImg(indexOfNextImg)\r\n    }\r\n\r\n    handlerNextImage(event) {\r\n        let step = Number(event.target.dataset.step)\r\n        this.playNextImage(step)\r\n    }\r\n\r\n    autoPlay() {\r\n        this.timerID = setInterval(() => {\r\n            this.playNextImage(1)\r\n        }, 5000)\r\n    }\r\n\r\n    stopAutoPlay() {\r\n        clearInterval(this.timerID)\r\n    }\r\n\r\n    getClassNameOfPoints(index) {\r\n        return index === this.props.indexOfCurrentImg? 'slide-point active-point' : 'slide-point'\r\n    }\r\n\r\n    handlerClickPoint(event) {\r\n        let index = Number(event.target.dataset.index)\r\n        this.props.changeTheIndexOfImg(index)\r\n    }\r\n\r\n    render() {\r\n        let widthOfImg = 730\r\n        let heightOfSlider = 336\r\n        let images = this.props.images || []\r\n        let widthOfSlider = images.length * widthOfImg\r\n        let offset = -(this.props.indexOfCurrentImg % widthOfSlider) * widthOfImg || 0\r\n        return(\r\n            <div className='image-slider' onMouseOver={this.stopAutoPlay} onMouseOut={this.autoPlay}>\r\n                <button className='slide-button slide-left vertical-center' onClick={this.handlerNextImage} data-step=\"-1\">&lt;</button>\r\n                {/*<div className='image-slider-container' style={{width: widthOfSlider, height: heightOfSlider, left: offset}}>*/}\r\n                <div className='image-slider-container' style={{width: widthOfSlider, height: heightOfSlider, transform: `translate3d(${offset}px, 0px, 0px)`}}>\r\n                    {\r\n                        images.map((value, index) => {\r\n                            return (\r\n                                <img key={index} src={value.picUrl} alt=\"轮播图\" />\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                <button className='slide-button slide-right vertical-center' onClick={this.handlerNextImage} data-step=\"1\">&gt;</button>\r\n                <div className='slide-point-container'>\r\n                    {\r\n                        images.map((value, index) => {\r\n                            return (\r\n                                <span className={this.getClassNameOfPoints(index)} key={index} data-index={index} onClick={this.handlerClickPoint}> </span>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.homePageReducer\r\n    return {\r\n        images: theState.images,\r\n        indexOfCurrentImg: theState.indexOfCurrentImg,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchImgInHomePage: () => {\r\n            dispatch(fetchImgInHomePage())\r\n        },\r\n        changeTheIndexOfImg: (index) => {\r\n            dispatch(changeTheIndexOfImg(index))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageSlider)","export const GET_HOMEPAGE_IMG = 'HOMEPAGE/GET_IMG'\r\nexport const CHANGE_THE_INDEX_OF_IMG = 'HOMEPAGE/CHANGE_THE_INDEX_OF_IMG'","import React, { Component } from 'react'\nimport ImageSlider from \"./ImageSlider\"\nimport './Home.css'\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <ImageSlider />\n            </div>\n        )\n    }\n}\n\nexport default Home\n","import * as playList from './actionTypes.js'\r\nimport {MusicApi} from '../../api/api.js'\r\n\r\n// 热门歌单标签切换\r\nexport const playListTagChange = (tagName) => ({\r\n    type: playList.PLAYLIST_TAG_CHANGE,\r\n    tagName\r\n    })\r\n\r\n// 开始加载歌单具体信息\r\nexport const loadItemDetailStarted = () => ({\r\n    type: playList.LOAD_ITEM_DETAIL_STARTED,\r\n})\r\n\r\n// 加载歌单具体信息成功\r\nexport const loadItemDetailSuccess = (albumDetailInfo) => ({\r\n    type: playList.LOAD_ITEM_DETAIL_SUCCESS,\r\n    albumDetailInfo\r\n})\r\n\r\n// 删除歌单具体信息，即初始化模态弹窗\r\nexport const deleteItemDetail = () => ({\r\n    type: playList.DELETE_ITEM_DETAIL,\r\n})\r\n\r\n// 热门歌单列表开始加载\r\nexport const playListLoadStarted = () => ({\r\n    type: playList.PLAYLIST_LOAD_STARTED,\r\n})\r\n\r\n// 热门歌单列表加载成功\r\nexport const playListLoadSuccess = (playListResult) => ({\r\n    type: playList.PLAYLIST_LOAD_SUCCESS,\r\n    playListResult,\r\n})\r\n\r\n// 热门歌单列表加载成功\r\nexport const playListLoadFailure = () => ({\r\n    type: playList.PLAYLIST_LOAD_FAILURE,\r\n})\r\n\r\nexport const playListPageChangePage = (page) => ({\r\n    type: playList.PLAYLIST_PAGE_CHANGE,\r\n    page,\r\n})\r\n\r\nexport const albumChangePage = (page) => ({\r\n    type: playList.ALBUM_PAGE_CHANGE,\r\n    page,\r\n})\r\n\r\n// 异步加载热门歌单列表\r\nexport const fetchHotPlayList = (category=\"全部\", page=1, pageSize=60, company='netease') => {\r\n    return (dispatch) => {\r\n        let queryObj = {\r\n            category,\r\n            pageSize,\r\n            page,\r\n            company,\r\n        }\r\n        dispatch(playListLoadStarted())\r\n        let api = new MusicApi()\r\n        api.hotPlayList(queryObj, (r) => {\r\n            let playListResult = JSON.parse(r.response)\r\n            console.log('加载热门歌单列表完成', playListResult)\r\n            if (playListResult.code === 200) {\r\n                dispatch(playListLoadSuccess(playListResult.data))\r\n            } else {\r\n                dispatch(playListLoadFailure())\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n// 加载歌单具体信息\r\nexport const fetchAlbumDetailInfo = (albumId, company='netease') => {\r\n    console.log('albumId', albumId)\r\n    return (dispatch) => {\r\n        let args = {\r\n            albumId,\r\n            company,\r\n        }\r\n        dispatch(loadItemDetailStarted())\r\n        let api = new MusicApi()\r\n        api.albumDetailInfo(args, (r) => {\r\n            let playListResult = JSON.parse(r.response)\r\n            console.log('加载歌单完成', playListResult)\r\n            if (playListResult.code === 200) {\r\n                dispatch(loadItemDetailSuccess(playListResult))\r\n            } else {\r\n                dispatch(playListLoadFailure())\r\n            }\r\n        })\r\n    }\r\n}","export const PLAYLIST_TAG_CHANGE = \"PAGE/PLAYLIST_TAG_CHANGE\"\r\n\r\nexport const LOAD_ITEM_DETAIL_STARTED = \"PAGE/LOAD_ITEM_DETAIL_STARTED\"\r\n\r\nexport const LOAD_ITEM_DETAIL_SUCCESS = \"PAGE/LOAD_ITEM_DETAIL_SUCCESS\"\r\n\r\nexport const DELETE_ITEM_DETAIL = 'PAGE/DELETE_ITEM_DETAIL'\r\n\r\nexport const PLAYLIST_LOAD_STARTED = 'PAGE/PLAYLIST_LOAD_STARTED'\r\n\r\nexport const PLAYLIST_LOAD_SUCCESS = 'PAGE/LIST_LOAD_SUCCESS'\r\n\r\nexport const PLAYLIST_LOAD_FAILURE = 'PAGE/PLAYLIST_LOAD_FAILURE'\r\n\r\nexport const PLAYLIST_PAGE_CHANGE = 'PAGE/PLAYLIST_PAGE_CHANGE'\r\n\r\nexport const ALBUM_PAGE_CHANGE = 'PAGE/ALBUM_PAGE_CHANGE'","export const timeFormat = function(seconds) {\r\n    if (!seconds) {\r\n        return '00:00'\r\n    }\r\n    let m = String(Math.floor(seconds / 60))\r\n    let s = String(Math.floor(seconds % 60))\r\n    if (s.length === 1) {\r\n        s = \"0\" + s\r\n    }\r\n    if (m.length === 1) {\r\n        m = \"0\" + m\r\n    }\r\n    return `${m}:${s}`\r\n}\r\n\r\nexport const timeDeFormat = (timeInfo) => {\r\n    let timeList = timeInfo.split(':')\r\n    let length = timeList.length\r\n    let time = 0\r\n    timeList.map((value, index) => {\r\n        let exp = length - index - 1\r\n        time += value * 60 ** exp\r\n        return 0\r\n    })\r\n    return time\r\n}\r\n\r\nexport const loadCurrentSongIndexInLocalStorage = () => {\r\n    let currentSongIndex = JSON.parse(localStorage.getItem('currentSongIndex'))\r\n    if (currentSongIndex === null) {\r\n        currentSongIndex = -1\r\n    }\r\n    return currentSongIndex\r\n}\r\n\r\nexport const saveCurrentSongIndexInLocalStorage = (index) => {\r\n    localStorage.setItem('currentSongIndex', JSON.stringify(index))\r\n}\r\n\r\nexport const loadSongListInLocalStorage = () => {\r\n    let songList = JSON.parse(localStorage.getItem('songList'))\r\n    if (songList === null) {\r\n        songList = []\r\n    }\r\n    return songList\r\n}\r\n\r\nexport const saveSongToLocalStorage = (songInfo) => {\r\n    let songList = JSON.parse(localStorage.getItem('songList'))\r\n    if (songList === null) {\r\n        songList = []\r\n    }\r\n    songList.push(songInfo)\r\n    localStorage.setItem('songList', JSON.stringify(songList))\r\n}\r\n\r\nexport const deleteSongInLocalStorage = (songIndex) => {\r\n    let songList = JSON.parse(localStorage.getItem('songList'))\r\n    songList.splice(songIndex, 1)\r\n    localStorage.setItem('songList', JSON.stringify(songList))\r\n}\r\n\r\nexport const getCurrentSongInfo = (theState) => {\r\n    let songList = theState.songList\r\n    let currentSongIndex = theState.currentSongExtraInfo.currentSongIndex\r\n    let currentSongInfo = {}\r\n    if (currentSongIndex === -1) {\r\n        currentSongInfo = theState.initSongInfo\r\n    } else {\r\n        currentSongInfo = songList[currentSongIndex]\r\n    }\r\n    return currentSongInfo\r\n}\r\n\r\nconst clearTimeRepeat = (lyricList, repeatIndex, lyricBeforeTranslated) => {\r\n    let result = lyricList\r\n    let element = result[repeatIndex].lyric\r\n    if (element === '...') {\r\n        result[repeatIndex].lyric = lyricBeforeTranslated\r\n    } else {\r\n        result[repeatIndex].translatedLyric = element\r\n        result[repeatIndex].lyric = lyricBeforeTranslated\r\n    }\r\n}\r\n\r\nconst parseLyric = (lyric) => {\r\n    let oneLyricInfo = lyric\r\n    let indexOfTime = oneLyricInfo.indexOf(']')\r\n    let oneLyric = oneLyricInfo.slice(indexOfTime + 1)\r\n    let timeInfo = oneLyricInfo.slice(1, indexOfTime)\r\n    let time = timeDeFormat(timeInfo)\r\n    return {\r\n        oneLyric,\r\n        time\r\n    }\r\n}\r\n\r\nexport const parseLyricArray = (lyricsArray) => {\r\n    let result = []\r\n    for (let i = 0; i < lyricsArray.length; i++) {\r\n        let oneLyricInfo = lyricsArray[i]\r\n        let {oneLyric, time} = parseLyric(oneLyricInfo)\r\n        let repeatIndex = result.findIndex((theLyric) => {\r\n            return theLyric.time === time\r\n        })\r\n        let isTimeRepeat = repeatIndex !== -1\r\n        if (isTimeRepeat) {\r\n            clearTimeRepeat(result, repeatIndex, oneLyric)\r\n        } else {\r\n            if (isNaN(time)) {\r\n                continue\r\n            }\r\n            if (oneLyric === '') {\r\n                oneLyric = '...'\r\n            }\r\n            let lyricItem = {\r\n                time,\r\n                lyric: oneLyric,\r\n                translatedLyric: null,\r\n            }\r\n            result.push((lyricItem))\r\n        }\r\n    }\r\n    result.sort((prev, current) => prev.time - current.time)\r\n    return result\r\n}\r\n\r\nexport const argsFromQuery = (query) => {\r\n    if (query[0] === '?') {\r\n        query = query.slice(1)\r\n    }\r\n    let o = {}\r\n    if (query.length === 0) {\r\n        return o\r\n    }\r\n    query.split('&').forEach(e => {\r\n        let [k, v] = e.split('=')\r\n        o[k] = v\r\n    })\r\n    return o\r\n}\r\n\r\nexport const changeImgResolution = (url, pixel) => {\r\n    let list = url.split('?')\r\n    return `${list[0]}?param=${pixel}y${pixel}`\r\n}","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {fetchAlbumDetailInfo} from '../actions'\r\nimport {changeImgResolution} from '../../../utils'\r\n\r\nclass PlayListItem extends Component {\r\n\r\n    render() {\r\n        let {id, name, coverImgUrl} = {...this.props.itemInfo}\r\n        let coverThumbImgUrl = changeImgResolution(coverImgUrl, 400)\r\n        return (\r\n            <div className=\"album-container\">\r\n                <div className=\"album-img\" data-id={id} onClick={this.props.fetchAlbumDetailInfo.bind(this, id)}>\r\n                    <img src={coverThumbImgUrl} alt=\"歌单封面\"/>\r\n                </div>\r\n                <div className=\"album-info\" title={name}>\r\n                    <span>{name}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchAlbumDetailInfo: (AlbumId) => {\r\n            dispatch(fetchAlbumDetailInfo(AlbumId))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(PlayListItem)","import React, {Component} from 'react'\r\nimport './common.css'\r\n\r\nclass PageSelector extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handleChangePage = this.handleChangePage.bind(this)\r\n        this.isPreviousAndNextCanBeClicked = this.isPreviousAndNextCanBeClicked.bind(this)\r\n    }\r\n\r\n    static getPageSelector (endPage, currentPage, totalTagCount) {\r\n        if (endPage <= totalTagCount) {\r\n            let result = []\r\n            for (let i = 1; i <= endPage; i++) {\r\n                result.push(i)\r\n            }\r\n            return result\r\n        }\r\n        let list = []\r\n        let lastList = []\r\n        let startList = []\r\n        let changingTagCount = totalTagCount - 3\r\n        let start = currentPage - changingTagCount/ 2\r\n        let end = currentPage + changingTagCount / 2\r\n        for (let i = start; i <= end; i++) {\r\n            if (i <= 1) {\r\n                lastList.push(changingTagCount + i + 1)\r\n            } else if (i >= endPage) {\r\n                startList.push(i - changingTagCount - 1)\r\n            } else {\r\n                list.push(i)\r\n            }\r\n        }\r\n        let result = [...startList,...list,...lastList]\r\n        if (result[0] !== 2) {\r\n            result.unshift('...')\r\n        }\r\n        if (result[result.length - 1] < endPage - 1) {\r\n            result.push('...')\r\n        }\r\n        result = [1, ...result, endPage]\r\n        return result\r\n    }\r\n\r\n    showMiddleTag() {\r\n        let {totalPage, currentPage} = {...this.props.selectorInfo}\r\n        if (totalPage === 0) {\r\n            return\r\n        }\r\n        let pageList = PageSelector.getPageSelector(totalPage, currentPage, 9)\r\n        return pageList.map((page, index) => {\r\n            if (page === '...') {\r\n                return (\r\n                    <span className=\"page-selector-ellipsis\" key={index}>...</span>\r\n                )\r\n            } else if (page === currentPage) {\r\n                return (\r\n                    <button className=\"page-selector-current page-selector-tag page-btn\" key={index}>{page}</button>\r\n                )\r\n            } else {\r\n                return (\r\n                    <button className=\"page-selector-tag page-btn\" key={index} onClick={this.handleChangePage(page)}>{page}</button>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    handleChangePage(page) {\r\n        return () => {\r\n            this.props.changePage(page)\r\n            if (this.props.pushHistory) {\r\n                this.props.pushHistory(page)\r\n            }\r\n        }\r\n    }\r\n\r\n    isPreviousAndNextCanBeClicked() {\r\n        let {totalPage, currentPage} = {...this.props.selectorInfo}\r\n        let previousCanNotBeClicked = false\r\n        let nextCanNotBeClicked = false\r\n        if (totalPage === 1) {\r\n            previousCanNotBeClicked = true\r\n            nextCanNotBeClicked = true\r\n        }\r\n        if (currentPage === 1) {\r\n            previousCanNotBeClicked = true\r\n        } else if (currentPage === totalPage) {\r\n            nextCanNotBeClicked = true\r\n        }\r\n        let previousClassName = previousCanNotBeClicked ? 'previous-ban-click' : 'previous-can-click'\r\n        let nextClassName = nextCanNotBeClicked ? 'next-ban-click' : 'next-can-click'\r\n        return {\r\n            previousCanNotBeClicked,\r\n            nextCanNotBeClicked,\r\n            previousClassName,\r\n            nextClassName,\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {currentPage} = {...this.props.selectorInfo}\r\n        let previousAndNext = this.isPreviousAndNextCanBeClicked()\r\n        let {previousCanNotBeClicked, nextCanNotBeClicked, previousClassName, nextClassName} = {...previousAndNext}\r\n        return (\r\n            <div className=\"page-selector\">\r\n                <button className={`${previousClassName} page-btn`} disabled={previousCanNotBeClicked} onClick={this.handleChangePage(currentPage - 1)}>&lt;</button>\r\n                {this.showMiddleTag()}\r\n                <button className={`${nextClassName} page-btn`} disabled={nextCanNotBeClicked} onClick={this.handleChangePage(currentPage + 1)}>&gt;</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PageSelector","import React, { Component } from 'react'\r\nimport * as Status from '../status'\r\nimport {connect} from 'react-redux'\r\nimport {fetchHotPlayList, playListTagChange, playListPageChangePage} from '../actions'\r\nimport {withRouter} from 'react-router-dom'\r\nimport PlayListItem from './PlayListItem'\r\nimport {argsFromQuery} from '../../../utils'\r\nimport PageSelector from '../../common/PageSelector'\r\n\r\nclass PlayList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.pushHistory = this.pushHistory.bind(this)\r\n        this.getSelectorInfo = this.getSelectorInfo.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.status !== 'success') {\r\n            let params = argsFromQuery(this.props.location.search)\r\n            let activeTag = params.cat\r\n            let page = params.page\r\n            this.props.fetchHotPlayList(activeTag, page)\r\n            this.props.playListTagChange(decodeURI(activeTag))\r\n            this.props.changePage(page)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.location !== prevProps.location) {\r\n            let params = argsFromQuery(this.props.location.search)\r\n            let activeTag = params.cat\r\n            let page = params.page\r\n            this.props.fetchHotPlayList(activeTag, page)\r\n        }\r\n    }\r\n\r\n    pushHistory(newPage) {\r\n        this.props.history.push(`playlist?cat=${this.props.activeTag}&page=${newPage}`)\r\n    }\r\n\r\n    getSelectorInfo() {\r\n        return {\r\n            totalPage: this.props.totalPage,\r\n            currentPage: Number(this.props.currentPage),\r\n        }\r\n    }\r\n\r\n    showHotPlayList() {\r\n        switch (this.props.status) {\r\n            case Status.LOADING: {\r\n                return (\r\n                    <div className=\"loading-container\">\r\n                        <svg className=\"load\" viewBox=\"25 25 50 50\">\r\n                            <circle className=\"loading\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\"/>\r\n                        </svg>\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.SUCCESS: {\r\n                let playListResult = this.props.playListResult\r\n                return (\r\n                    <div className=\"playlist-result\">\r\n                        {playListResult.map((value, index) => {\r\n                            return <PlayListItem key={index} itemInfo={value} />\r\n                        })}\r\n                        <PageSelector selectorInfo={this.getSelectorInfo()} changePage={this.props.changePage} pushHistory={this.pushHistory}/>\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.FAILURE: {\r\n                return (\r\n                    <div className=\"failed-container\">热门歌单加载失败</div>\r\n                )\r\n            }\r\n            default: {\r\n                return (\r\n                    <div>PlayList</div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.showHotPlayList()\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        status: theState.playListStatus,\r\n        playListResult: theState.playListResult,\r\n        activeTag: theState.activeTag,\r\n        currentPage: theState.currentPage,\r\n        pageSize: theState.pageSize,\r\n        totalPage: theState.totalPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchHotPlayList: (category, page) => {\r\n            dispatch(fetchHotPlayList(category, page))\r\n        },\r\n        playListTagChange: (tagName) => {\r\n            dispatch(playListTagChange(tagName))\r\n        },\r\n        changePage: (page) => {\r\n            dispatch(playListPageChangePage(page))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(withRouter(PlayList))","export const INIT = ''\r\nexport const LOADING = 'loading'\r\nexport const SUCCESS = 'success'\r\nexport const FAILURE = 'failure'","import React, { Component } from 'react'\r\nimport {Link} from \"react-router-dom\"\r\nimport {connect} from 'react-redux'\r\nimport {playListTagChange} from \"../actions\"\r\n\r\nclass TagItem extends Component {\r\n\r\n    tagChange(value) {\r\n        this.props.playListTagChange(value)\r\n        this.props.toggleShow()\r\n    }\r\n\r\n    getClassName(value) {\r\n        return this.props.activeTag === value ? \"playlist-tag active-tag\" : \"playlist-tag\"\r\n    }\r\n\r\n    getTagTable(i) {\r\n        let rowData = this.props.theTagTabs.slice(i, i + 6)\r\n        return (\r\n            <tbody key={i}>\r\n                <tr>\r\n                    {rowData.map((value, index) => {\r\n                        return (\r\n                            <td key={index} className={this.getClassName(value)}>\r\n                                <Link  to={`/playlist?cat=${value}`} onClick={this.tagChange.bind(this, value)}>{value}</Link>\r\n                            </td>\r\n                        )\r\n                    })}\r\n                </tr>\r\n            </tbody>\r\n         )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"playlist-tag-tabs\">\r\n                {this.props.theTagTabs.map((value, index) => {\r\n                    return (\r\n                            <Link key={index} className={this.getClassName(value)} to={`/playlist?cat=${value}&page=1`} onClick={this.tagChange.bind(this, value)}>{value}</Link>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        activeTag: theState.activeTag\r\n    }\r\n}\r\n\r\nconst mapDispatchTopProps = (dispatch) => {\r\n    return {\r\n        playListTagChange: (tagName) => {\r\n            dispatch(playListTagChange(tagName))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchTopProps)(TagItem)","import React, { Component } from 'react'\r\nimport {playListTagChange} from '../actions'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from 'react-router-dom'\r\nimport TagItem from './TagItem'\r\nimport {getSelectIcon} from './icon'\r\n\r\nclass TagSelector extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.mainTags = ['语种', '风格', '场景', '情感', '主题']\r\n        this.styleTags = ['流行', '摇滚', '民谣', '电子', '舞曲', '说唱', '轻音乐', '爵士', '乡村', 'R&B/Soul', '古典', '民族', '英伦', '金属', '朋克', '蓝调', '雷鬼', '拉丁', '古风', 'Bossa Nova']\r\n        this.languageTags = ['华语', '欧美', '日语', '韩语', '粤语', '小语种']\r\n        this.senceTags = ['清晨', '夜晚', '学习', '工作', '午休', '下午茶', '地铁', '驾车', '运动', '旅行', '散步', '酒吧']\r\n        this.emotionTags = ['怀旧', '清新', '浪漫', '性感', '伤感', '治愈', '放松', '孤独', '感动', '兴奋', '快乐', '安静', '思念']\r\n        this.themeTags = ['影视原声', 'ACG', '儿童', '校园', '游戏', '70后', '80后', '90后', '网络歌曲', 'KTV', '经典', '翻唱', '吉他', '钢琴', '器乐', '榜单', '00后']\r\n        this.mapTagToMain = {\r\n            '语种': this.languageTags,\r\n            '风格': this.styleTags,\r\n            '场景': this.senceTags,\r\n            '情感': this.emotionTags,\r\n            '主题': this.themeTags\r\n        }\r\n        this.state = {\r\n            show: false\r\n        }\r\n\r\n        this.toggleShow = this.toggleShow.bind(this)\r\n        this.hide = this.hide.bind(this)\r\n        this.clickOnBlankArea = this.clickOnBlankArea.bind(this)\r\n        document.onclick = this.hide\r\n    }\r\n\r\n    tagChange(value) {\r\n        this.props.playListTagChange(value)\r\n        this.toggleShow()\r\n    }\r\n\r\n    clickOnBlankArea(e) {\r\n        e.nativeEvent.stopImmediatePropagation()\r\n    }\r\n\r\n    toggleShow(e) {\r\n        this.setState((state) => ({\r\n            show: !state.show,\r\n        }))\r\n        if (e !== undefined) {\r\n            e.nativeEvent.stopImmediatePropagation()\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        this.setState({\r\n            show: false\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.setState = () => {\r\n            return false\r\n        }\r\n    //  防止组件卸载的时候调用 setState 导致 react 报错\r\n    }\r\n\r\n    render() {\r\n        let classNameOfIcon = this.state.show ? \"select-icon rotated\" : \"select-icon\"\r\n        let classNameOfTagsContainer = this.state.show ? \"playlist-tags-container\" : \"playlist-tags-container hidden\"\r\n        let classNameOfMainTag = this.props.activeTag === '全部' ? \"playlist-main-tag active-tag\" : \"playlist-main-tag\"\r\n        return (\r\n            <div className=\"playlist-tags\">\r\n                <span className=\"active-tag-name\" >{this.props.activeTag}</span>\r\n                <span className=\"select-tag-button\" onClick={this.toggleShow}>\r\n                    {this.state.show ? '收起 ' : '展开 '}\r\n                    {getSelectIcon(classNameOfIcon)}\r\n                </span>\r\n                <div className={classNameOfTagsContainer} onClick={this.clickOnBlankArea}>\r\n                    <Link className={classNameOfMainTag}\r\n                          to={{pathname: 'playlist', search: '?cat=全部&page=1'}}\r\n                          onClick={this.tagChange.bind(this, '全部')}\r\n                    >\r\n                        全部\r\n                    </Link>\r\n                    {this.mainTags.map((value, index) => {\r\n                        let theTagTabs = this.mapTagToMain[value]\r\n                        return(\r\n                            <div key={index} className=\"playlist-tag-container\">\r\n                                <div className=\"playlist-tag-class\">{value}</div>\r\n                                <TagItem theTagTabs={theTagTabs} toggleShow={this.toggleShow}/>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        activeTag: theState.activeTag\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        playListTagChange: (tagName) => {\r\n            dispatch(playListTagChange(tagName))\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(TagSelector)","import React from \"react\"\r\n\r\nconst getSelectIcon = (className) => {\r\n    return (\r\n        <svg className={className} viewBox=\"0 0 1024 1024\">\r\n            <path d=\"M127.5 330.9l0.7-0.7c12.3-12.3 32.4-12.3 44.7 0l339.9 339.9L853 330c12.5-12.5 32.9-12.5 45.4 0s12.5 32.9 0 45.4L536 737.8s-0.1 0.1-0.1 0.2l-0.7 0.7c-12.3 12.3-32.4 12.3-44.7 0l-363-363c-12.3-12.4-12.3-32.5 0-44.8z\">\r\n            </path>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport {\r\n    getSelectIcon,\r\n}","import React from \"react\"\r\n\r\nconst loadingIcon = (\r\n    <svg className=\"load\" viewBox=\"25 25 50 50\">\r\n        <circle className=\"loading\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\"/>\r\n    </svg>\r\n)\r\n\r\nexport {\r\n    loadingIcon,\r\n}","import * as search from './actionTypes.js'\r\nimport {MusicApi} from '../../api/api.js'\r\n\r\n// 搜索框输入改变\r\nexport const inputChange = (input) => ({\r\n    type: search.INPUT_CHANGE,\r\n    input,\r\n})\r\n\r\n// 开始搜索\r\nexport const searchStarted = (data) => ({\r\n    type: search.SEARCH_STARTED,\r\n    data,\r\n})\r\n\r\n// 搜索成功\r\nexport const searchSuccess = (result, searchContent, searchPage) => ({\r\n    type: search.SEARCH_SUCCESS,\r\n    result,\r\n    searchContent,\r\n    searchPage,\r\n})\r\n\r\n// 搜索失败\r\nexport const searchFailure = (error) => ({\r\n    type: search.SEARCH_FAILURE,\r\n    error,\r\n})\r\n\r\nexport const changePage = (page) => ({\r\n    type: search.CHANGE_PAGE,\r\n    page\r\n})\r\n\r\n// 拿到搜索数据\r\nexport const fetchSearchResult = (input, page=1, pageSize=20, company='netease') => {\r\n    return (dispatch) => {\r\n        let queryObj = {\r\n            input,\r\n            pageSize,\r\n            page,\r\n            company,\r\n        }\r\n        dispatch(searchStarted(input))\r\n        let api = new MusicApi()\r\n        api.searchResult(queryObj, (r) => {\r\n            let searchResult = JSON.parse(r.response)\r\n            console.log('搜索完成', searchResult)\r\n            if (searchResult.code === 200) {\r\n                dispatch(searchSuccess(searchResult, queryObj.input, page))\r\n            } else {\r\n                dispatch(searchFailure(searchResult))\r\n            }\r\n        })\r\n    }\r\n}","export const INPUT_CHANGE = 'NAV/INPUT_CHANGE'\r\n\r\nexport const SEARCH_STARTED = 'NAV/SEARCH_STARTED'\r\n\r\nexport const SEARCH_SUCCESS = 'NAV/SEARCH_SUCCESS'\r\n\r\nexport const SEARCH_FAILURE = 'NAV/SEARCH_FAILURE'\r\n\r\nexport const CHANGE_PAGE = 'PAGE/CHANGE_PAGE'","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport  {inputChange} from '../actions'\r\nimport {withRouter} from \"react-router-dom\"\r\nimport {argsFromQuery} from \"../../../utils\"\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.fillSearchContentInSearchBar()\r\n\r\n        this.onSearch = this.onSearch.bind(this)\r\n        this.onChange = this.onChange.bind(this)\r\n        this.onKeyPress = this.onKeyPress.bind(this)\r\n    }\r\n\r\n    parseUrlGetSearchContent(location) {\r\n        let searchObj = argsFromQuery(location.search)\r\n        let searchContent = decodeURI(searchObj['s'])\r\n        if (searchContent !== undefined) {\r\n            return searchContent\r\n        }\r\n    }\r\n\r\n    fillSearchContentInSearchBar() {\r\n        this.value = this.parseUrlGetSearchContent(this.props.location)\r\n        if (this.value === 'undefined') {\r\n            this.value = ''\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.location.search !== this.props.location.search) {\r\n            this.value = this.parseUrlGetSearchContent(this.props.location)\r\n        }\r\n    }\r\n\r\n    onChange(event) {\r\n        this.value = event.target.value\r\n        this.props.inputChange(this.value)\r\n    }\r\n\r\n    onSearch() {\r\n        let hasInputted = this.props.searchInput === undefined || this.props.searchInput === ''\r\n        if (hasInputted) {\r\n            return 0\r\n        }\r\n        let isEqualToOldSearchContent = this.props.searchContent !== this.props.searchInput\r\n        let isAtSearchPage = window.location.pathname !== '/search'\r\n        if (isEqualToOldSearchContent || isAtSearchPage) {\r\n            let urlObj = this.getSearchUrl()\r\n            this.props.history.push(urlObj)\r\n        }\r\n    }\r\n\r\n    getSearchUrl() {\r\n        console.log('this.props.searchInput', this.props.searchInput)\r\n        let name = this.props.searchInput.trim()\r\n        if (name === undefined) {\r\n            name = ''\r\n        }\r\n        let page = 1\r\n        return {\r\n            pathname: '/search',\r\n            search: `?s=${name}&page=${page}`,\r\n        }\r\n    }\r\n\r\n    onKeyPress(event) {\r\n        if (event.key === 'Enter') {\r\n            this.onSearch()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className={(this.props.searchResult === undefined) ? \"search-bar-container before-searched\" : \"search-bar-container\"}>\r\n                <input type=\"text\" className=\"search-bar-input\" placeholder=\"搜索音乐、MV、歌单、用户\" onChange={this.onChange} onKeyDown={this.onKeyPress} value={this.value || ''}/>\r\n                <button className=\"search-bar-button\" onClick={this.onSearch}>搜索</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.SearchBarReducer\r\n    return {\r\n        searchInput: theState.searchInput,\r\n        searchContent: theState.searchContent,\r\n        searchResult: theState.searchResult,\r\n        status: theState.status,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        inputChange:  (input) => {\r\n            dispatch(inputChange(input))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(withRouter(SearchBar))","import * as audioController from './actionTypes'\r\nimport {MusicApi} from '../../api/api.js'\r\nimport {parseLyricArray} from '../../utils'\r\n\r\nexport  const toggleSongListWindow = () => {\r\n    return {\r\n        type: audioController.TOGGLE_SONG_LIST_WINDOW,\r\n    }\r\n}\r\n\r\nexport const changeAudioStatus = (status) => {\r\n    return {\r\n        type: audioController.CHANGE_AUDIO_STATUS,\r\n        status\r\n    }\r\n}\r\n\r\nexport const changePlayMode = (modeType) => {\r\n    return {\r\n        type: audioController.CHANGE_PLAY_MODE,\r\n        modeType,\r\n    }\r\n}\r\n\r\nexport const saveCurrentLyricIndex = (currentLyricIndex) => {\r\n    return {\r\n        type: audioController.GET_CURRENT_INDEX,\r\n        currentLyricIndex,\r\n    }\r\n}\r\n\r\nexport const appendTheSong = (songInfo) => {\r\n    return {\r\n        type: audioController.APPEND_THE_SONG,\r\n        songInfo,\r\n    }\r\n}\r\n\r\nexport const deleteTheSong = (songIndex) => {\r\n    return {\r\n        type: audioController.DELETE_THE_SONG,\r\n        songIndex,\r\n    }\r\n}\r\n\r\nexport const playTheSongInPage = (songInfo) => {\r\n    return {\r\n        type: audioController.PLAY_THE_SONG_IN_PAGE,\r\n        songInfo,\r\n    }\r\n}\r\n\r\nexport const playTheSongInList = (songIndex) => {\r\n    return {\r\n        type: audioController.PLAY_THE_SONG_IN_LIST,\r\n        songIndex,\r\n    }\r\n}\r\n\r\nexport const playNextSong = (modeType, loopStep=1) => {\r\n    return {\r\n        type: audioController.PLAY_NEXT_SONG,\r\n        modeType,\r\n        loopStep,\r\n    }\r\n}\r\n\r\nexport const getLyric = (lyric) => {\r\n    return {\r\n        type: audioController.GET_LYRIC,\r\n        lyric,\r\n    }\r\n}\r\n\r\nexport const getLyricFromNet = (lrcUrl) => {\r\n    return (dispatch) => {\r\n        let api = new MusicApi()\r\n        api.getLyric(lrcUrl, (r) => {\r\n            let l = r.response\r\n            console.log(lrcUrl)\r\n            let lyricList = l.split('\\n').slice(0, -1)\r\n            if (lyricList.length === 0) {\r\n                lyricList = [l]\r\n            }\r\n            let result = parseLyricArray(lyricList)\r\n            dispatch(getLyric(result))\r\n        })\r\n    }\r\n}","export const CHANGE_AUDIO_STATUS = 'BAR/CHANGE_AUDIO_STATUS'\r\n\r\nexport const APPEND_THE_SONG = 'PAGE/APPEND_THE_SONG'\r\n\r\nexport const DELETE_THE_SONG = 'AUDIO/DELETE_THE_SONG'\r\n\r\nexport const PLAY_THE_SONG_IN_PAGE = 'PAGE/PLAY_THE_SONG'\r\n\r\nexport const PLAY_THE_SONG_IN_LIST = 'LIST/PLAY_THE_SONG'\r\n\r\nexport const PLAY_NEXT_SONG = 'AUDIO/PLAY_NEXT_SONG'\r\n\r\nexport const GET_LYRIC = 'AUDIO/GET_LYRIC'\r\n\r\nexport const GET_CURRENT_INDEX = 'AUDIO/GET_CURRENT_INDEX'\r\n\r\nexport const CHANGE_PLAY_MODE = 'AUDIO/CHANGE_PLAY_MODE'\r\n\r\nexport  const TOGGLE_SONG_LIST_WINDOW = 'AUDIO/TOGGLE_SONG_LIST_WINDOW'","import React from \"react\"\r\n\r\nconst previousBtn = (\r\n    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n        <path d=\"M362.3 512l445-332.3v664.5L362.3 512zM216.7 179.7h80v664.5h-80V179.7z\">\r\n        </path>\r\n    </svg>\r\n)\r\n\r\nconst nextBtn = (\r\n    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n        <path d=\"M216.7 844.3V179.7l445 332.3-445 332.3z m590.6 0h-80V179.7h80v664.6z\">\r\n        </path>\r\n    </svg>\r\n)\r\n\r\nconst volumeBtn = (\r\n    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n        <path d=\"M697.5 76l-497 230.6-147.3-20v420l147.3-20 497 230.6V76z m-50 760.7l-424.9-195-13.7-6.8-15.2 2.1-90.6 12.3V343.8l90.6 12.3 15.2 2.1 13.7-6.8 424.9-194.9v680.2zM812 612h-50V412h50v200z m204.7 200h-50V212h50v600zM914.3 712h-50V312h50v400z\">\r\n        </path>\r\n    </svg>\r\n)\r\n\r\nconst listBtn = (\r\n    <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n        <path d=\"M91.9 165.2h50v50h-50v-50z m150.2 0v50h690v-50h-690zM91.9 429.7h50v-50h-50v50z m150.2 0h690v-50h-690v50zM91.9 644.3h50v-50h-50v50z m150.2 0h690v-50h-690v50zM91.9 858.8h50v-50h-50v50z m150.2 0h690v-50h-690v50z\">\r\n        </path>\r\n    </svg>\r\n)\r\n\r\nconst getModeButtonSvg = (mode) => {\r\n    let loop = (\r\n        <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n            <path d=\"M922 607.1V887H102V157h612.2V58.2l200 125-200 125V207H152v630h720V607.1h50z\">\r\n            </path>\r\n        </svg>\r\n    )\r\n    let circle = (\r\n        <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n            <path\r\n                d=\"M922 607.1V887H102V157h612.2V58.2l200 125-200 125V207H152v630h720V607.1h50zM560.5 737.6V306.4h-34c-9.2 18.6-24.8 37.7-46.9 57.4-22.1 19.7-47.9 36.5-77.3 50.4v51c16.4-6.1 34.9-15.1 55.5-27.2s37.3-24.2 50-36.3v336h52.7z\">\r\n            </path>\r\n        </svg>\r\n    )\r\n    let random = (\r\n        <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n            <path d=\"M726.6 774H594.4L458.8 512l135.6-262h132.2v98.7l200-125-200-125V200H564.4L430.7 457.7 297.4 200h-200v50h169.2l135.9 262-135.9 262H97.4v50h200l133.3-257.7L564.4 824h162.2v101.3l200-125-200-125z\">\r\n            </path>\r\n        </svg>\r\n    )\r\n    let mapModeToIcon = {\r\n        loop,\r\n        circle,\r\n        random,\r\n    }\r\n    return mapModeToIcon[mode]\r\n}\r\n\r\nconst getPlayButtonSvg = (status) => {\r\n    let play = (\r\n        <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n            <path d=\"M243.2 208h166.4v608H243.2zM614.4 208h166.4v608h-166.4z\">\r\n            </path>\r\n        </svg>\r\n    )\r\n    let pause = (\r\n        <svg className=\"svg-icon\" viewBox=\"0 0 1024 1024\">\r\n            <path d=\"M289.5 844.3V179.7l445 332.3-445 332.3z\">\r\n            </path>\r\n        </svg>\r\n    )\r\n    let mapStatusToIcon = {\r\n        play,\r\n        pause,\r\n    }\r\n    return mapStatusToIcon[status]\r\n}\r\n\r\nexport {\r\n    previousBtn,\r\n    nextBtn,\r\n    volumeBtn,\r\n    listBtn,\r\n    getModeButtonSvg,\r\n    getPlayButtonSvg,\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {\r\n    changeAudioStatus,\r\n    getLyricFromNet,\r\n    saveCurrentLyricIndex,\r\n    changePlayMode,\r\n    playNextSong,\r\n    toggleSongListWindow\r\n} from '../actions'\r\nimport {timeFormat, getCurrentSongInfo, changeImgResolution} from '../../../utils'\r\nimport * as icon from './icon'\r\n\r\nclass AudioController extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.mapEnglishToChinese = {\r\n            loop: '列表循环',\r\n            circle: '单曲循环',\r\n            random: '随机播放',\r\n        }\r\n        this.isFirstLoad = true\r\n        this.state = {\r\n            currentTime: null,\r\n            duration: null,\r\n            isSliding: false,\r\n            isHovering: false,\r\n        }\r\n        this.audio = React.createRef()\r\n        this.songSlider = React.createRef()\r\n        this.playOrPause = this.playOrPause.bind(this)\r\n        this.clickToSeek = this.clickToSeek.bind(this)\r\n        this.dragToSeek = this.dragToSeek.bind(this)\r\n        this.AfterDragToSeek = this.AfterDragToSeek.bind(this)\r\n        this.handleHover = this.handleHover.bind(this)\r\n        this.changePlayMode = this.changePlayMode.bind(this)\r\n        this.changeToPlayNextSong = this.changeToPlayNextSong.bind(this)\r\n        this.toggleSongList = this.toggleSongList.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        const a = this.audio.current\r\n        a.addEventListener('loadstart', () => {\r\n            this.props.getLyricFromNet(this.props.currentSongInfo.lrc)\r\n        })\r\n        a.addEventListener('canplay', () => {\r\n            const {currentTime, duration} = a\r\n            this.setState({\r\n                currentTime,\r\n                duration\r\n            })\r\n            let shouldAutoPlay = !this.isFirstLoad\r\n            if (shouldAutoPlay) {\r\n                a.play()\r\n            } else {\r\n                this.isFirstLoad = false\r\n            }\r\n        })\r\n        a.addEventListener('play', () => {\r\n            this.props.changeAudioStatus('play')\r\n        })\r\n        a.addEventListener('pause', () => {\r\n            this.props.changeAudioStatus('pause')\r\n        })\r\n        a.addEventListener('timeupdate', () => {\r\n            if (!this.state.isSliding) {\r\n                const {currentTime} = a\r\n                this.setState({\r\n                    currentTime\r\n                })\r\n                this.parseLyricIndex(currentTime)\r\n            }\r\n        })\r\n        a.addEventListener('ended', () => {\r\n            let {lengthOfSongList, playMode} = this.props\r\n            if (lengthOfSongList !== 0) {\r\n                this.props.playNextSong(playMode)\r\n                if (lengthOfSongList === 1 || playMode === 'circle') {\r\n                    a.play()\r\n                }\r\n            }\r\n        })\r\n        if (this.isFirstLoad && this.props.lengthOfSongList === 0) {\r\n            this.isFirstLoad = false\r\n        }\r\n    }\r\n\r\n    getNextLyricIndex(currentTime, data, deltaTime) {\r\n        let nextLyricIndex\r\n        let length = data.length\r\n        let theLastLyricTime = data[length - 1].time\r\n        let isAfterTheLastLyric = currentTime >= theLastLyricTime\r\n        let isBetweenTheLastTwoLyric = currentTime <= theLastLyricTime && currentTime >= theLastLyricTime - deltaTime\r\n        if (isAfterTheLastLyric) {\r\n            nextLyricIndex = length - 1\r\n        } else if (isBetweenTheLastTwoLyric) {\r\n            nextLyricIndex = length - 2\r\n        } else {\r\n            nextLyricIndex = data.findIndex((lyricInfo, index, data) => {\r\n                if (index === length -1) {\r\n                    return false\r\n                }\r\n                let isStart = lyricInfo.time - deltaTime <= currentTime\r\n                let isNotEnd = data[index + 1].time - deltaTime >= currentTime\r\n                return isStart && isNotEnd\r\n            })\r\n        }\r\n        return nextLyricIndex\r\n    }\r\n\r\n    parseLyricIndex(currentTime, deltaTime=0.2) {\r\n        let data = this.props.currentSongExtraInfo.currentLyric\r\n        if (data.length === 0) {\r\n            return false\r\n        }\r\n        let currentLyricIndex = this.getNextLyricIndex(currentTime, data, deltaTime)\r\n        let indexInStore = this.props.currentSongExtraInfo.currentLyricIndex\r\n        if (currentLyricIndex === indexInStore) {\r\n            return false\r\n        } else {\r\n            this.props.saveCurrentLyricIndex(currentLyricIndex)\r\n        }\r\n    }\r\n\r\n    playOrPause() {\r\n        const a = this.audio.current\r\n        if (a.currentSrc === '') {\r\n            return\r\n        }\r\n        if (this.props.AudioStatus === 'pause') {\r\n            a.play()\r\n            this.props.changeAudioStatus('play')\r\n        } else {\r\n            a.pause()\r\n            this.props.changeAudioStatus('pause')\r\n        }\r\n    }\r\n\r\n    clickToSeek(event) {\r\n        const a = this.audio.current\r\n        let target = event.target\r\n        if (!target.classList.contains('slider-point')) {\r\n            let { left, width } = event.currentTarget.getBoundingClientRect()\r\n            let clickPosition = (event.clientX - left) / width\r\n            let currentTime = clickPosition * a.duration\r\n            if (!isNaN(currentTime)) {\r\n                a.currentTime = currentTime\r\n                this.parseLyricIndex(currentTime)\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    }\r\n\r\n    dragToSeek() {\r\n        let isRunning = false\r\n        let isFirstDrag = true\r\n        return (event) => {\r\n            event.persist()\r\n            if (isRunning || isFirstDrag ) {\r\n                isFirstDrag = false\r\n                return\r\n            }\r\n            isRunning = true\r\n            window.requestAnimationFrame(() => {\r\n                this.seek(event)\r\n                isRunning = false\r\n            })\r\n            if (!this.state.isSliding) {\r\n                this.setState({\r\n                    isSliding: true\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    seek(event) {\r\n        const a = this.audio.current\r\n        let {left, width} = this.songSlider.current.getBoundingClientRect()\r\n        let dragPosition = (event.clientX - left) / width\r\n        if (dragPosition >= 0 && dragPosition <= 1) {\r\n            let currentTime = a.duration * dragPosition\r\n            this.setState({\r\n                currentTime\r\n            })\r\n        }\r\n    }\r\n\r\n    AfterDragToSeek() {\r\n        const a = this.audio.current\r\n        a.currentTime = this.state.currentTime\r\n        this.parseLyricIndex(this.state.currentTime)\r\n        this.setState({\r\n            isSliding: false\r\n        })\r\n    }\r\n\r\n    handleHover() {\r\n        this.setState((state) => ({\r\n            isHovering: !state.isHovering,\r\n        }))\r\n    }\r\n\r\n    toggleSongList() {\r\n        this.props.toggleSongListWindow()\r\n        let pop = document.querySelector('.pop-up')\r\n        if (pop === null) {\r\n            let body = document.querySelector(\"body\")\r\n            body.classList.toggle('ban-scroll')\r\n        }\r\n    }\r\n\r\n    changePlayMode() {\r\n        let modeList = ['loop', 'circle', 'random']\r\n        let index = modeList.indexOf(this.props.playMode)\r\n        let nextIndex = (index + 1) % modeList.length\r\n        let nextModeType = modeList[nextIndex]\r\n        this.props.changePlayMode(nextModeType)\r\n    }\r\n\r\n    changeToPlayNextSong(loopStep) {\r\n        return () => {\r\n            this.props.playNextSong(this.props.playMode, loopStep)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {currentTime, duration} = this.state\r\n        let {name, singer, pic, url} = this.props.currentSongInfo\r\n        pic = changeImgResolution(pic, 400)\r\n        let playMode = this.props.playMode\r\n        let playModeTitle = this.mapEnglishToChinese[playMode]\r\n        return (\r\n            <div className={this.props.showSongListWindow ? \"audio-controller playlist-opened\" : \"audio-controller\"}>\r\n                <audio src={url} ref={this.audio}>\r\n                </audio>\r\n                <div className=\"album-cover\">\r\n                    <img src={pic} alt=\"专辑图片\" />\r\n                </div>\r\n                <div className=\"extra-info-container\">\r\n                    <div className={this.state.isHovering? \"song-slider hover\" : \"song-slider\"}\r\n                         onClick={this.clickToSeek}\r\n                         onMouseOver={this.handleHover}\r\n                         onMouseOut={this.handleHover}\r\n                         ref={this.songSlider}\r\n                    >\r\n                        <div className=\"slider-bg\">\r\n                        </div>\r\n                        <div className=\"slider-progress\" style={{width: `${ currentTime / duration * 100 }%`}}>\r\n                        <span className=\"slider-point\" draggable=\"true\"\r\n                              onDrag={this.dragToSeek()}\r\n                              onDragEnd={this.AfterDragToSeek}\r\n                        >\r\n                        </span>\r\n                        </div>\r\n                    </div>\r\n                    <span className=\"music-timeline\">\r\n                        <span id=\"music-time-now\">{timeFormat(currentTime)}</span>\r\n                        <span> / </span>\r\n                        <span id=\"music-time-all\">{timeFormat(duration)}</span>\r\n                    </span>\r\n                    <div className=\"song-info\">\r\n                        <div className=\"song-info-name\" title={name}>{name}</div>\r\n                        <div className=\"song-info-singer\" title={singer}>{singer}</div>\r\n                    </div>\r\n                    <div className=\"controller-btn\">\r\n                        <span className=\"back-btn\" title=\"上一首(ctrl+←)\" onClick={this.changeToPlayNextSong(-1)}>\r\n                            {icon.previousBtn}\r\n                        </span>\r\n                        <span className={[\"play-btn\", this.props.AudioStatus].join(' ')} title=\"播放/暂停(p)\" onClick={this.playOrPause}>\r\n                            {icon.getPlayButtonSvg(this.props.AudioStatus)}\r\n                        </span>\r\n                        <span className=\"next-btn\" title=\"下一首(ctrl+→)\" onClick={this.changeToPlayNextSong(1)}>\r\n                            {icon.nextBtn}\r\n                        </span>\r\n                        <span className=\"volume-btn icon\">\r\n                            {icon.volumeBtn}\r\n                        </span>\r\n                        <span className={`mode-btn icon ${playMode}`} data-mode={playMode} title={playModeTitle} onClick={this.changePlayMode}>\r\n                            {icon.getModeButtonSvg(playMode)}\r\n                        </span>\r\n                        <span className=\"list-btn icon\" title=\"播放列表\" onClick={this.toggleSongList}>\r\n                            {icon.listBtn}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    let lengthOfSongList = theState.songList.length\r\n    return {\r\n        lengthOfSongList: lengthOfSongList,\r\n        AudioStatus: theState.AudioStatus,\r\n        currentSongInfo: currentSongInfo,\r\n        currentSongExtraInfo: theState.currentSongExtraInfo,\r\n        playMode: theState.playMode,\r\n        showSongListWindow: theState.showSongListWindow,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeAudioStatus: (status) => {\r\n            dispatch(changeAudioStatus(status))\r\n        },\r\n        getLyricFromNet: (url) => {\r\n            dispatch(getLyricFromNet(url))\r\n        },\r\n        saveCurrentLyricIndex: (currentLyricIndex) => {\r\n            dispatch(saveCurrentLyricIndex(currentLyricIndex))\r\n        },\r\n        changePlayMode: (modeType) => {\r\n            dispatch(changePlayMode(modeType))\r\n        },\r\n        playNextSong: (modeType, loopStep) => {\r\n            dispatch(playNextSong(modeType, loopStep))\r\n        },\r\n        toggleSongListWindow: () => {\r\n            dispatch(toggleSongListWindow())\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AudioController)","import React, {Component} from 'react'\r\nimport {timeFormat, getCurrentSongInfo} from '../../../utils'\r\nimport {connect} from \"react-redux\"\r\nimport {playTheSongInList, deleteTheSong} from '../actions'\r\n\r\nclass SongItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handlePlay = this.handlePlay.bind(this)\r\n        this.handlePause = this.handlePause.bind(this)\r\n        // this.handleDelete = this.handleDelete.bind(this)\r\n    }\r\n\r\n    handlePlay() {\r\n        if (this.props.currentSongId !== this.props.songInfo.id) {\r\n            this.props.playTheSongInList(this.props.songIndex)\r\n            console.log('this.props.songInfo，第一次放', this.props.songInfo)\r\n        } else {\r\n            let audio = document.querySelector('audio')\r\n            audio.play()\r\n        }\r\n    }\r\n\r\n    handlePause() {\r\n        let audio = document.querySelector('audio')\r\n        audio.pause()\r\n    }\r\n\r\n    getPlayOrPauseButtonSvg() {\r\n        let {id} = this.props.songInfo\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        if (isTheSongPlaying) {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M910.8 303.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S129.8 720.8 129.8 509.2 301.4 126.1 513 126.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C654.6 78.9 585.9 61.5 513 61.5 265.7 61.5 65.3 262 65.3 509.2S265.7 956.9 513 956.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                    <path d=\"M385.4 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.6 0 32-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9zM578.9 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.5 0 31.9-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9z\">\r\n                    </path>\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        } else {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                    <path d=\"M415.8 679.9c5.9 0 11.5-1.6 16.2-4.5l231.1-134.6c10.9-5.2 18.5-16.3 18.5-29.2 0-11.9-6.4-22.3-16-27.8L439.7 352.2c-5.8-6.7-14.4-10.9-23.9-10.9-17.6 0-31.8 14.4-31.8 32.1 0 0.6 0 1.2 0.1 1.8l-0.4 0.2 0.5 269c-0.1 1.1-0.2 2.2-0.2 3.4 0 17.7 14.3 32.1 31.8 32.1z\">\r\n                    </path>\r\n                    <path d=\"M909.8 306.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S128.8 723.8 128.8 512.2 300.4 129.1 512 129.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C653.6 81.9 584.9 64.5 512 64.5 264.7 64.5 64.3 265 64.3 512.2S264.7 959.9 512 959.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {id, name, singer, time} = this.props.songInfo\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        return (\r\n            <div className=\"song-list-item-container\" style={isTheSongPlaying ? {color: 'rgb(255, 255, 255)'} : {}}>\r\n                <div className=\"song-list-item-name\">\r\n                    <span className=\"song-name\" title={name}>{name}</span>\r\n                    <span className=\"song-list-item-play\" onClick={isTheSongPlaying ? this.handlePause : this.handlePlay}>\r\n                        {this.getPlayOrPauseButtonSvg()}\r\n                    </span>\r\n                    <span className=\"song-list-item-delete\" onClick={this.props.deleteTheSong.bind(this, this.props.songIndex)}>\r\n                        <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                            <path d=\"M897.2 128H578.7c-1.6-34.7-30.2-62.4-65.3-62.4s-63.8 27.7-65.3 62.4h-320c-17.5 0-31.9 14.4-31.9 31.9s14.4 31.9 31.9 31.9H192v639.8c0 70.4 57.6 128 128 128h384.1c70.4 0 128-57.6 128-128V676.2c0.1-1.2 0.2-2.4 0.2-3.6 0.1-17.8-14.4-32.1-32.1-32.1-17.8 0-32.2 14.4-32.2 32.1v159.1c0 35.2-28.8 64-64 64H320c-35.2 0-64-28.8-64-64V191.8h511.9v223.1c0 17.7 14.4 32.1 32.2 32.1s32.2-14.4 32.2-32.1c0-1.2-0.1-2.4-0.2-3.6V191.8h65.1c17.6 0 31.9-14.4 31.9-31.9S914.7 128 897.2 128z\">\r\n                            </path>\r\n                            <path d=\"M386.9 350.6v386.6c0 16.8 13.8 30.6 30.6 30.6s30.6-13.8 30.6-30.5V350.6c0-16.8-13.8-30.6-30.6-30.6s-30.6 13.8-30.6 30.6zM576.7 350.6v386.6c0 16.8 13.8 30.6 30.6 30.6s30.6-13.8 30.6-30.5V350.6c0-16.8-13.8-30.6-30.6-30.6s-30.6 13.8-30.6 30.6z\">\r\n                            </path>\r\n                            <path d=\"M768 543.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                            </path>\r\n                        </svg>\r\n                    </span>\r\n                </div>\r\n                <div className=\"song-list-item-singer name\">\r\n                    <span title={singer}>{singer}</span>\r\n                </div>\r\n                <div className=\"song-list-item-time\">\r\n                    {timeFormat(time)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    let currentSongId = currentSongInfo.id\r\n    return {\r\n        AudioStatus: theState.AudioStatus,\r\n        currentSongId: currentSongId,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        playTheSongInList: (songInfo) => {\r\n            dispatch(playTheSongInList(songInfo))\r\n        },\r\n        deleteTheSong: (songIndex) => {\r\n            dispatch(deleteTheSong(songIndex))\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SongItem)","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport SongItem from './SongItem'\r\nimport {getCurrentSongInfo, changeImgResolution} from '../../../utils'\r\n\r\nclass SongList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.list = React.createRef()\r\n    }\r\n\r\n    getTheActiveLyricOffset() {\r\n        const list = this.list.current\r\n        let activeLyric = document.querySelector('.active')\r\n        if (activeLyric !== null) {\r\n            let {height} = list.getBoundingClientRect()\r\n            let i = Math.floor(height / 40 / 2)\r\n            list.scrollTop = activeLyric.offsetTop - 40 * i\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        this.getTheActiveLyricOffset()\r\n    }\r\n\r\n    render() {\r\n        let picUrl = this.props.currentSongInfo.pic\r\n        picUrl = changeImgResolution(picUrl, 800)\r\n        let {currentLyric, currentLyricIndex} = this.props.currentSongExtraInfo\r\n        let length = this.props.songList.length\r\n        return (\r\n            <div className={this.props.showSongListWindow ? \"song-list\" : \"song-list hidden\"}>\r\n                <div className=\"song-list-bg\">\r\n                </div>\r\n                <div className=\"song-list-img\" style={{backgroundImage: `url(${picUrl})`}}>\r\n                </div>\r\n                <span className=\"song-list-header\">播放列表&nbsp;&nbsp;&nbsp;{`(总${length}首)`}</span>\r\n                <div className=\"song-list-container\">\r\n                    <div className=\"song-list-head-container\">\r\n                        <div className=\"song-list-item-name\">\r\n                            <span title=\"\">歌曲</span>\r\n                        </div>\r\n                        <div className=\"song-list-item-singer\">\r\n                            <span title=\"\">歌手</span>\r\n                        </div>\r\n                        <div className=\"song-list-item-time\">时长</div>\r\n                    </div>\r\n                    {\r\n                        this.props.songList.map((value, index) => {\r\n                            return <SongItem key={index} songIndex={index} songInfo={value}/>\r\n                    })}\r\n                </div>\r\n                <div className=\"lyric-list\" ref={this.list}>\r\n                    {\r\n                        currentLyric.map((value, index) => {\r\n                            if (value.translatedLyric === null) {\r\n                                return <p className={(currentLyricIndex === index)? \"lyric-item active\" : \"lyric-item\"} key={index}>{value.lyric}</p>\r\n                            } else {\r\n                                return (\r\n                                    <p className={(currentLyricIndex === index)? \"lyric-item active\" : \"lyric-item\"} key={index}>\r\n                                        {value.lyric}<br/>\r\n                                        {value.translatedLyric}\r\n                                    </p>\r\n                                )\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    return {\r\n        songList: theState.songList,\r\n        currentSongInfo: currentSongInfo,\r\n        currentSongExtraInfo: theState.currentSongExtraInfo,\r\n        showSongListWindow: theState.showSongListWindow,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(SongList)","import React, {Component} from 'react'\r\nimport AudioController from \"./AudioController\"\r\nimport SongList from \"./SongList\"\r\nimport './MusicController.css'\r\n\r\nclass MusicController extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"music-player\">\r\n                <AudioController />\r\n                <SongList />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MusicController","import React, {Component} from 'react'\r\nimport {getCurrentSongInfo, timeFormat} from '../../../utils'\r\nimport {connect} from 'react-redux'\r\nimport {actions} from '../../audioController/'\r\n\r\nconst appendTheSong = actions.appendTheSong\r\nconst playTheSongInPage = actions.playTheSongInPage\r\n\r\nclass SearchItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handlePlay = this.handlePlay.bind(this)\r\n        this.handleAppend = this.handleAppend.bind(this)\r\n        this.handlePause = this.handlePause.bind(this)\r\n    }\r\n\r\n    handlePlay() {\r\n        if (this.props.currentSongId !== this.props.result.id) {\r\n            this.props.playTheSongInPage(this.props.result)\r\n            console.log('this.props.songInfo，第一次放', this.props.result)\r\n        } else {\r\n            let audio = document.querySelector('audio')\r\n            audio.play()\r\n        }\r\n    }\r\n\r\n    handlePause() {\r\n        let audio = document.querySelector('audio')\r\n        audio.pause()\r\n    }\r\n\r\n    getPlayOrPauseButtonSvg() {\r\n        let id = this.props.result.id\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        if (isTheSongPlaying) {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M910.8 303.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S129.8 720.8 129.8 509.2 301.4 126.1 513 126.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C654.6 78.9 585.9 61.5 513 61.5 265.7 61.5 65.3 262 65.3 509.2S265.7 956.9 513 956.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                    <path d=\"M385.4 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.6 0 32-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9zM578.9 352.2V672c0 17.5 14.3 31.9 31.9 31.9 17.5 0 31.9-14.4 31.9-31.9V352.2c0-17.5-14.3-31.9-31.9-31.9-17.5 0-31.9 14.3-31.9 31.9z\">\r\n                    </path>\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        } else {\r\n            return (\r\n                <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                    <path d=\"M772.7 217.7a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z\">\r\n                    </path>\r\n                    <path d=\"M415.8 679.9c5.9 0 11.5-1.6 16.2-4.5l231.1-134.6c10.9-5.2 18.5-16.3 18.5-29.2 0-11.9-6.4-22.3-16-27.8L439.7 352.2c-5.8-6.7-14.4-10.9-23.9-10.9-17.6 0-31.8 14.4-31.8 32.1 0 0.6 0 1.2 0.1 1.8l-0.4 0.2 0.5 269c-0.1 1.1-0.2 2.2-0.2 3.4 0 17.7 14.3 32.1 31.8 32.1z\">\r\n                    </path>\r\n                    <path d=\"M909.8 306.6c-5.4-10.5-16.3-17.8-28.9-17.8-17.8 0-32.2 14.4-32.2 32.1 0 6 1.7 11.7 4.6 16.5l-0.1 0.1c26.9 52.4 42.1 111.8 42.1 174.7 0 211.6-171.6 383.2-383.2 383.2S128.8 723.8 128.8 512.2 300.4 129.1 512 129.1c62.5 0 121.5 15 173.6 41.5l0.2-0.4c4.6 2.6 10 4.1 15.7 4.1 17.8 0 32.2-14.4 32.2-32.1 0-13.1-7.9-24.4-19.3-29.4C653.6 81.9 584.9 64.5 512 64.5 264.7 64.5 64.3 265 64.3 512.2S264.7 959.9 512 959.9s447.7-200.4 447.7-447.7c0-74.1-18-144-49.9-205.6z\">\r\n                    </path>\r\n                </svg>\r\n            )\r\n        }\r\n    }\r\n\r\n    handleAppend() {\r\n        this.props.appendTheSong(this.props.result)\r\n    }\r\n\r\n    render() {\r\n        let result = this.props.result\r\n        let id = this.props.result.id\r\n        let isTheSongPlaying = (this.props.AudioStatus === 'play') && (this.props.currentSongId === id)\r\n        let isOdd = (this.props.index + 1) % 2 !== 0\r\n        return(\r\n            <div className={isOdd ? \"search-item-container odd\" : \"search-item-container\"}>\r\n                <span className=\"search-item-number\">{`${this.props.index + 1}.`}</span>\r\n                <div className=\"search-item-name\">\r\n                    <span className=\"song-name\" title={result.name}>{result.name}</span>\r\n                    <span className=\"search-item-play\" onClick={isTheSongPlaying ? this.handlePause : this.handlePlay}>\r\n                        {this.getPlayOrPauseButtonSvg()}\r\n                    </span>\r\n                    <span className=\"search-item-append\" onClick={this.handleAppend}>\r\n                        <svg className=\"svg-list-icon\" viewBox=\"0 0 1024 1024\">\r\n                        <path d=\"M197.3 197.3c-173.8 173.8-173.8 455.5 0 629.3s455.5 173.8 629.3 0 173.8-455.5 0-629.3-455.5-173.7-629.3 0zM907 512c0 51.3-9.7 101.3-28.9 148.7-19.9 49-49.1 92.9-86.8 130.6s-81.7 66.9-130.6 86.8C613.3 897.3 563.3 907 512 907c-51.3 0-101.3-9.7-148.7-28.9-49-19.9-92.9-49.1-130.6-86.8s-66.9-81.7-86.8-130.6C126.7 613.3 117 563.3 117 512c0-51.3 9.7-101.3 28.9-148.7 19.9-49 49.1-92.9 86.8-130.6s81.7-66.9 130.6-86.8C410.7 126.7 460.7 117 512 117c51.3 0 101.3 9.7 148.7 28.9 49 19.9 92.9 49.1 130.6 86.8s66.9 81.7 86.8 130.6C897.3 410.7 907 460.7 907 512zM537 262v225h225v50H537v225h-50V537H262v-50h225V262h50z\">\r\n                        </path>\r\n                        </svg>\r\n                    </span>\r\n                </div>\r\n                <div className=\"search-item-singer name\">\r\n                    <span title={result.singer}>{result.singer}</span>\r\n                </div>\r\n                <div className=\"search-item-time\">\r\n                    {timeFormat(result.time)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.AudioReducer\r\n    let currentSongInfo = getCurrentSongInfo(theState)\r\n    let currentSongId = currentSongInfo.id\r\n    return {\r\n        AudioStatus: theState.AudioStatus,\r\n        currentSongId: currentSongId,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        appendTheSong: (songInfo) => {\r\n            dispatch(appendTheSong(songInfo))\r\n        },\r\n        playTheSongInPage: (songInfo) => {\r\n            dispatch(playTheSongInPage(songInfo))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchItem)","import React, {Component} from 'react'\r\nimport SearchItem from './SearchItem'\r\nimport {connect} from 'react-redux'\r\nimport PageSelector from \"../../common/PageSelector\"\r\nimport {changePage} from \"../actions\"\r\nimport {withRouter} from \"react-router-dom\"\r\n\r\nclass SearchList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.pushHistory = this.pushHistory.bind(this)\r\n        this.getSelectorInfo = this.getSelectorInfo.bind(this)\r\n    }\r\n\r\n    dataCleaning(data) {\r\n        let singerList = data.ar.map(artist => artist.name)\r\n        let singer = singerList.join('/')\r\n        let id = String(data.privilege.id)\r\n        return {\r\n            name: data.name,\r\n            singer,\r\n            time: data.dt / 1000,\r\n            id,\r\n            pic: data.al.picUrl,\r\n            lrc: `https://v1.itooi.cn/netease/lrc?id=${id}`,\r\n            url:`https://v1.itooi.cn/netease/url?id=${id}`,\r\n        }\r\n    }\r\n\r\n    pushHistory(newPage) {\r\n        this.props.history.push(`search?s=${this.props.searchContent}&page=${newPage}`)\r\n    }\r\n\r\n    getSelectorInfo() {\r\n        let totalCount = this.props.searchResult.data.songCount\r\n        if (totalCount > 600) {\r\n            totalCount = 600\r\n        }\r\n        let pageSize = this.props.pageSize\r\n        let totalPage = Math.ceil(totalCount / pageSize)\r\n        return {\r\n            totalPage,\r\n            currentPage: Number(this.props.searchPage),\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let searchData = this.props.searchResult.data.songs\r\n        let selectorInfo = this.getSelectorInfo()\r\n        return(\r\n            <div className=\"search-list-container\">\r\n                <span className=\"search-head-number\">\r\n                </span>\r\n                <div className=\"search-head-container\">\r\n                    <div className=\"search-head-name name\">\r\n                        <span title=\"歌名\">歌曲</span>\r\n                    </div>\r\n                    <div className=\"search-head-singer name\">\r\n                        <span title=\"歌手\">歌手</span>\r\n                    </div>\r\n                    <div className=\"search-head-time\">\r\n                        时长\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-list\">\r\n                    {searchData.map((value, i) => {\r\n                        let num = i + this.props.pageSize * (this.props.searchPage - 1)\r\n                        return (\r\n                            <SearchItem key={i} index={num} result={this.dataCleaning(value)}/>\r\n                        )\r\n                    })}\r\n                </div>\r\n                    <PageSelector selectorInfo={selectorInfo} changePage={this.props.changePage} pushHistory={this.pushHistory}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.SearchBarReducer\r\n    return {\r\n        searchContent: theState.searchContent,\r\n        searchResult: theState.searchResult,\r\n        searchPage: theState.searchPage,\r\n        pageSize: theState.pageSize,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changePage: (page) => {\r\n            dispatch(changePage(page))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(withRouter(SearchList))","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport * as Status from '../status'\r\nimport {fetchSearchResult, inputChange} from '../actions'\r\nimport SearchBar from './SearchBar'\r\nimport SearchList from './SearchList'\r\nimport {argsFromQuery} from '../../../utils'\r\nimport './SearchPage.css'\r\n\r\nclass SearchPage extends Component {\r\n\r\n    componentDidMount() {\r\n        let query = argsFromQuery(this.props.location.search)\r\n        let s = query.s\r\n        let page = Number(query.page)\r\n        if (s !== undefined && s !== this.props.searchContent) {\r\n            this.props.fetchSearchResult(s, page)\r\n            this.props.inputChange(s)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.location.search !== this.props.location.search) {\r\n            let query = argsFromQuery(this.props.location.search)\r\n            let s = query.s\r\n            let page = Number(query.page)\r\n            this.props.fetchSearchResult(s, page)\r\n        }\r\n    }\r\n\r\n    showSearchResult() {\r\n        switch (this.props.status) {\r\n            case Status.LOADING: {\r\n                return (\r\n                    <div className=\"loading-container\">\r\n                        <svg className=\"load\" viewBox=\"25 25 50 50\">\r\n                            <circle className=\"loading\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\"/>\r\n                        </svg>\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.SUCCESS: {\r\n                return (\r\n                        <SearchList />\r\n                )\r\n            }\r\n            case Status.FAILURE: {\r\n                return (\r\n                    <div className=\"failed-container\">歌曲搜索失败</div>\r\n                )\r\n            }\r\n            default: {\r\n                return (\r\n                    <div></div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"search-page-content\">\r\n                <SearchBar />\r\n                {this.showSearchResult()}\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateTopProps = (state) => {\r\n    let theState = state.SearchBarReducer\r\n    return {\r\n        status: theState.status,\r\n        searchResult: theState.searchResult,\r\n        searchContent: theState.searchContent,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchSearchResult: (input, page) => {\r\n            dispatch(fetchSearchResult(input, page))\r\n        },\r\n        inputChange: (input) => {\r\n            dispatch(inputChange(input))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateTopProps, mapDispatchToProps)(SearchPage)","export const LOADING = 'loading'\r\nexport const SUCCESS = 'success'\r\nexport const FAILURE = 'failure'","import React, {Component} from 'react'\r\nimport {changeImgResolution} from '../../../utils'\r\nimport {SearchItem} from '../../searchPage'\r\nimport PageSelector from '../../common/PageSelector'\r\nimport {albumChangePage} from '../actions'\r\nimport {connect} from 'react-redux'\r\n\r\nclass AlbumDetail extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isAllDescriptionShowed: false,\r\n        }\r\n\r\n        this.descriptionToggle = this.descriptionToggle.bind(this)\r\n        this.getSelectorInfo = this.getSelectorInfo.bind(this)\r\n    }\r\n\r\n    descriptionToggle() {\r\n        this.setState((state) => ({\r\n            isAllDescriptionShowed: !state.isAllDescriptionShowed,\r\n        }))\r\n    }\r\n\r\n    static dataCleaning(fetchedData) {\r\n        let singerList = fetchedData.artists.map(artist => artist.name)\r\n        let singer = singerList.join('/')\r\n        return {\r\n            id: fetchedData.id,\r\n            name: fetchedData.name,\r\n            singer,\r\n            time: fetchedData.duration / 1000,\r\n            pic: fetchedData.album.blurPicUrl,\r\n            lrc: `https://v1.itooi.cn/netease/lrc?id=${fetchedData.id}`,\r\n            url: `https://v1.itooi.cn/netease/url?id=${fetchedData.id}`,\r\n        }\r\n    }\r\n\r\n    getSelectorInfo() {\r\n        let totalPage = Math.ceil(this.props.albumDetailInfo.data.trackCount / this.props.albumPageSize)\r\n        return {\r\n            totalPage,\r\n            currentPage: Number(this.props.albumCurrentPage),\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let data = this.props.albumDetailInfo.data\r\n        let {coverImgUrl, name, description, trackCount} = data\r\n        coverImgUrl = changeImgResolution(coverImgUrl, 200)\r\n\r\n        let {albumCurrentPage, albumPageSize} = {...this.props}\r\n        let start = (albumCurrentPage - 1) * albumPageSize\r\n        let end = start + albumPageSize\r\n        let dataOfShowedAlbums = data.tracks.slice(start, end)\r\n\r\n        let {isAllDescriptionShowed} = this.state\r\n        let classNameOfAlbumInfo = isAllDescriptionShowed ? \"album-list-info all-description-showed\" : \"album-list-info\"\r\n        let classNameOfDescription = isAllDescriptionShowed ? \"album-list-description all-description-showed\" : \"album-list-description\"\r\n        return (\r\n            <div className=\"album-list-container\">\r\n                <div className={classNameOfAlbumInfo}>\r\n                    <img className=\"album-list-bg\" src={coverImgUrl} alt=\"专辑图片\"/>\r\n                    <span className=\"album-list-pic\">\r\n                                <img src={coverImgUrl} alt=\"专辑图片\"/>\r\n                            </span>\r\n                    <div className=\"album-list-name\" title={name}>\r\n                        {`歌单：${name}`}\r\n                    </div>\r\n                    <p className={classNameOfDescription}>\r\n                        <span>介绍：</span><br/>\r\n                        {`${description}`}\r\n                    </p>\r\n                    <span className=\"description-toggle\" onClick={this.descriptionToggle}>{isAllDescriptionShowed ? '收起' : '展开'}</span>\r\n                </div>\r\n                <div className=\"album-list-count\">\r\n                    {`歌曲列表 (${trackCount}首歌)`}\r\n                </div>\r\n                <div className=\"album-list-items\">\r\n                    {dataOfShowedAlbums.map((value, i) => {\r\n                        let index = i + start\r\n                        return <SearchItem key={index} index={index} result={AlbumDetail.dataCleaning(value)}/>\r\n                    })}\r\n                </div>\r\n                <PageSelector selectorInfo={this.getSelectorInfo()} changePage={this.props.changePage} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        albumDetailInfo: theState.albumDetailInfo,\r\n        albumCurrentPage: theState.albumCurrentPage,\r\n        albumPageSize: theState.albumPageSize,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changePage: (page) => {\r\n            dispatch(albumChangePage(page))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AlbumDetail)","import React, {Component} from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {connect} from 'react-redux'\r\nimport {deleteItemDetail} from '../actions'\r\nimport * as Status from '../status'\r\nimport {loadingIcon} from '../../common/icon'\r\nimport AlbumDetail from './AlbumDetail'\r\nimport {MusicApi} from '../../../api/api'\r\n\r\nclass ModalPortal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.deleteDetailInfo = this.deleteDetailInfo.bind(this)\r\n        this.container = document.querySelector('#pop-container')\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        let body = document.body\r\n        if (this.props.albumStatus !== Status.INIT) {\r\n            body.classList.add('ban-scroll')\r\n        } else {\r\n            body.classList.remove('ban-scroll')\r\n        }\r\n    }\r\n\r\n    deleteDetailInfo() {\r\n        this.props.deleteItemDetail()\r\n        let abort = MusicApi.abortObj.albumDetail\r\n        if (abort !== null) {\r\n            abort()\r\n        }\r\n    }\r\n\r\n    showAlbumList() {\r\n        switch (this.props.albumStatus) {\r\n            case Status.INIT: {\r\n                return null\r\n            }\r\n            case Status.LOADING: {\r\n                return (\r\n                    <div className=\"pop-up\">\r\n                        <div className=\"pop-window\">\r\n                            <span className=\"modal-portal-toggle\" onClick={this.deleteDetailInfo}>×</span>\r\n                            <div className=\"loading-container\">\r\n                                {loadingIcon}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case Status.SUCCESS: {\r\n                return (\r\n                    <div className=\"pop-up\">\r\n                        <div className=\"pop-window\">\r\n                            <span className=\"modal-portal-toggle\" onClick={this.deleteDetailInfo}>×</span>\r\n                            <AlbumDetail />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            default: {\r\n                return null\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return ReactDOM.createPortal(this.showAlbumList(), this.container)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let theState = state.PlayListReducer\r\n    return {\r\n        albumStatus: theState.albumStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        deleteItemDetail: () => {\r\n            dispatch(deleteItemDetail())\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalPortal)","import React, { Component } from 'react'\nimport PlayList from './PlayList'\nimport TagSelector from './TagSelector'\nimport ModalPortal from './ModalPortal'\nimport './playListPage.css'\n\nclass PlayListPage extends Component {\n\n    render() {\n        return (\n            <div className=\"playlist-content\">\n                <TagSelector />\n                <PlayList />\n                <ModalPortal />\n            </div>\n        )\n    }\n}\n\nexport default PlayListPage\n","import React, {Component} from 'react'\r\n\r\nclass NotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                NotFound\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NotFound","import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport {connect} from 'react-redux'\n\nclass Menu extends Component {\n\n    render() {\n        let {searchContent, searchPage} = {...this.props.searchBar}\n        let searchPath = `?s=${searchContent}&page=${searchPage}`\n        if (searchContent === '' || searchContent === undefined) {\n            searchPath = ''\n        }\n        let menus = [\n            {\n                text: '首页',\n                pathname: '/',\n                search: '',\n            },\n            {\n                text: '热门歌单',\n                pathname: `/playlist`,\n                search: `?cat=${this.props.playList.activeTag}&page=${this.props.playList.currentPage}`,\n            },\n            {\n                text: '搜索',\n                pathname: `/search`,\n                search: searchPath,\n            },\n        ]\n        return (\n            <nav>\n                <ul className=\"nav-container\">\n                    {\n                        menus.map((e, index) => {\n                                let href = `${e.pathname}${e.search}`\n                                let isCurrent = this.props.currentPathname === e.pathname\n                                return (\n                                    <li className=\"nav-item\" key={index}>\n                                        <Link className={isCurrent? \"nav-link nav-link-current\" : \"nav-link\"} to={href}>{e.text}</Link>\n                                    </li>\n                                )\n                            }\n                        )\n                    }\n                </ul>\n            </nav>\n        )\n    }\n}\n\nconst mapStateTopProps = (state, ownProps) => {\n    return {\n        playList: state.PlayListReducer,\n        searchBar: state.SearchBarReducer,\n        currentPathname: ownProps.location.pathname,\n    }\n}\n\nexport default withRouter(connect(mapStateTopProps, null)(Menu))\n","import React, {Component} from 'react'\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"page-footer\">\r\n                页脚\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React, {Component} from 'react'\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport {view as Home} from './homePage/'\nimport {view as PlayListPage} from './playListPage/'\nimport {view as SearchPage} from './searchPage/'\nimport NotFound from './NotFound'\nimport Menu from './Menu'\nimport {view as MusicController} from './audioController/'\nimport Footer from './Footer'\nimport './App.css'\n\nclass App extends Component {\n\n    render() {\n        return (\n            // BrowserRouter 会使用 HTML5 的 history API 渲染单页路由\n            <Router>\n                <React.Fragment>\n                    <Menu />\n                    {/*Router 只能有一个子元素 也可以放一个 Switch 组件*/}\n                    <div className=\"content-container\">\n                        <Switch>\n                            {/*Route 组件用来匹配 location.path 的值, 并且渲染相应的组件 */}\n                            {/*exact 表示路径完全匹配时才算匹配*/}\n                            <Route exact path=\"/\" component={Home} />\n                            <Route exact path=\"/playlist\" component={PlayListPage} />\n                            <Route exact path=\"/search\" component={SearchPage} />\n                            <Route component={NotFound} />\n                        </Switch>\n                    </div>\n                    <Footer />\n                    <MusicController />\n                </React.Fragment>\n            </Router>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { applyMiddleware, createStore, combineReducers} from 'redux'\r\nimport {reducer as homePageReducer} from './components/homePage/'\r\nimport {reducer as SearchBarReducer} from './components/searchPage/'\r\nimport {reducer as PlayListReducer} from './components/playListPage/'\r\nimport {reducer as AudioReducer} from './components/audioController/'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport {loadSongListInLocalStorage, loadCurrentSongIndexInLocalStorage} from './utils'\r\n\r\nconst initValue = {\r\n    homePageReducer: {\r\n        images: [],\r\n        indexOfCurrentImg: 0,\r\n    },\r\n    SearchBarReducer: {\r\n        searchContent: '',\r\n        searchPage: 1,\r\n        pageSize: 20,\r\n    },\r\n    PlayListReducer: {\r\n        activeTag: '全部',\r\n        albumStatus: '',\r\n        albumDetailInfo: '',\r\n        albumCurrentPage: 1,\r\n        albumPageSize: 30,\r\n        currentPage: 1,\r\n        pageSize: 60,\r\n        totalPage: 20,\r\n    },\r\n    AudioReducer: {\r\n        AudioStatus: 'pause',\r\n        songList: loadSongListInLocalStorage(),\r\n        showSongListWindow: false,\r\n        currentSongExtraInfo: {\r\n            currentSongIndex: loadCurrentSongIndexInLocalStorage(),\r\n            currentLyric: [],\r\n            currentLyricIndex: -1,\r\n        },\r\n        playMode: 'loop',\r\n        initSongInfo: {\r\n            id: -1,\r\n            name: '歌曲',\r\n            singer: '歌手',\r\n            lrc: null,\r\n            pic: \"http://s4.music.126.net/style/web2/img/default/default_album.jpg\",\r\n            url: null,\r\n            time: null,\r\n        },\r\n    },\r\n}\r\n\r\nconst reducerObj = {\r\n    homePageReducer,\r\n    SearchBarReducer,\r\n    PlayListReducer,\r\n    AudioReducer,\r\n}\r\n\r\nconst reducer = combineReducers(reducerObj)\r\n\r\nconst middleware = [thunkMiddleware]\r\n\r\nconst storeEnhancers = composeWithDevTools(applyMiddleware(...middleware))\r\n\r\nconst Store = createStore(reducer, initValue, storeEnhancers)\r\n\r\nexport default Store","import * as homePage from './actionTypes.js'\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case homePage.GET_HOMEPAGE_IMG: {\r\n            return {\r\n                ...state,\r\n                images: action.imgObj,\r\n            }\r\n        }\r\n        case homePage.CHANGE_THE_INDEX_OF_IMG: {\r\n            return {\r\n                ...state,\r\n                indexOfCurrentImg: action.index,\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state === undefined ? {} : state\r\n        }\r\n    }\r\n}","import * as search from './actionTypes.js'\r\nimport * as Status from './status.js'\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case search.INPUT_CHANGE: {\r\n            return {\r\n                ...state,\r\n                searchInput: action.input\r\n            }\r\n        }\r\n        case search.SEARCH_STARTED: {\r\n            return {\r\n                ...state,\r\n                status: Status.LOADING\r\n            }\r\n        }\r\n        case search.SEARCH_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                status: Status.SUCCESS,\r\n                searchResult: action.result,\r\n                searchContent: action.searchContent,\r\n                searchPage: action.searchPage,\r\n            }\r\n        }\r\n        case search.SEARCH_FAILURE: {\r\n            return {\r\n                status: Status.FAILURE\r\n            }\r\n        }\r\n        case search.CHANGE_PAGE: {\r\n            return {\r\n                ...state,\r\n                searchPage: action.page,\r\n            }\r\n        }\r\n        default: {\r\n            return state === undefined ? [] : state\r\n        }\r\n    }\r\n}","import * as playList from './actionTypes.js'\r\nimport * as Status from './status.js'\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case playList.PLAYLIST_TAG_CHANGE: {\r\n            return {\r\n                ...state,\r\n                activeTag: action.tagName,\r\n                currentPage: 1,\r\n            }\r\n        }\r\n        case playList.LOAD_ITEM_DETAIL_STARTED: {\r\n            return {\r\n                ...state,\r\n                albumStatus: Status.LOADING\r\n            }\r\n        }\r\n        case playList.LOAD_ITEM_DETAIL_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                albumStatus: Status.SUCCESS,\r\n                albumDetailInfo: action.albumDetailInfo\r\n            }\r\n        }\r\n        case playList.DELETE_ITEM_DETAIL: {\r\n            return{\r\n                ...state,\r\n                albumStatus: '',\r\n                albumDetailInfo: '',\r\n                albumCurrentPage: 1,\r\n            }\r\n        }\r\n        case playList.PLAYLIST_LOAD_STARTED: {\r\n            return {\r\n                ...state,\r\n                playListStatus: Status.LOADING\r\n            }\r\n        }\r\n        case playList.PLAYLIST_LOAD_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                playListStatus: Status.SUCCESS,\r\n                playListResult: action.playListResult\r\n            }\r\n        }\r\n        case playList.PLAYLIST_LOAD_FAILURE: {\r\n            return {\r\n                ...state,\r\n                playListStatus: Status.FAILURE\r\n            }\r\n        }\r\n        case playList.PLAYLIST_PAGE_CHANGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.page,\r\n            }\r\n        }\r\n        case playList.ALBUM_PAGE_CHANGE: {\r\n            return {\r\n                ...state,\r\n                albumCurrentPage: action.page,\r\n            }\r\n        }\r\n        default: {\r\n            return state === undefined ? {} : state\r\n        }\r\n    }\r\n}","import * as audioController from './actionTypes'\r\nimport {saveSongToLocalStorage, deleteSongInLocalStorage, saveCurrentSongIndexInLocalStorage} from \"../../utils\"\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case audioController.TOGGLE_SONG_LIST_WINDOW: {\r\n            return {\r\n                ...state,\r\n                showSongListWindow: !state.showSongListWindow,\r\n            }\r\n        }\r\n        case audioController.CHANGE_AUDIO_STATUS: {\r\n            return {\r\n                ...state,\r\n                AudioStatus: action.status\r\n            }\r\n        }\r\n        case audioController.APPEND_THE_SONG: {\r\n            let songList = state['songList']\r\n            let cloneList = JSON.parse(JSON.stringify(songList))\r\n            let isTheSongNotExisted = songList.every((value) => value.id !== action.songInfo.id)\r\n            if (isTheSongNotExisted) {\r\n                cloneList.push(action.songInfo)\r\n                saveSongToLocalStorage(action.songInfo)\r\n            }\r\n            return {\r\n                ...state,\r\n                songList: cloneList,\r\n            }\r\n        }\r\n        case audioController.DELETE_THE_SONG: {\r\n            let songList = state['songList']\r\n            let cloneList = JSON.parse(JSON.stringify(songList))\r\n            let deleteSongIndex = action.songIndex\r\n            let currentSongIndex = state.currentSongExtraInfo.currentSongIndex\r\n            let listLength = cloneList.length\r\n            deleteSongInLocalStorage(deleteSongIndex)\r\n            cloneList.splice(deleteSongIndex, 1)\r\n            let justOneSong = listLength === 1\r\n            let isCurrentSong = currentSongIndex === deleteSongIndex\r\n            let isTheLastSong = currentSongIndex === listLength - 1\r\n            let beforeCurrentSong = currentSongIndex < deleteSongIndex\r\n            let updateCurrentSongIndex = -1\r\n            let updateCurrentLyric = state.currentSongExtraInfo.currentLyric\r\n            if (justOneSong) {\r\n                updateCurrentSongIndex = -1\r\n            } else if (isCurrentSong) {\r\n                if (isTheLastSong) {\r\n                    updateCurrentSongIndex = currentSongIndex - 1\r\n                } else {\r\n                    updateCurrentSongIndex = currentSongIndex\r\n                }\r\n                updateCurrentLyric = []\r\n            } else {\r\n                if (beforeCurrentSong) {\r\n                    updateCurrentSongIndex = currentSongIndex\r\n                } else {\r\n                    updateCurrentSongIndex = currentSongIndex -1\r\n                }\r\n            }\r\n            saveCurrentSongIndexInLocalStorage(updateCurrentSongIndex)\r\n            return {\r\n                ...state,\r\n                songList: cloneList,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentLyric: updateCurrentLyric,\r\n                    currentSongIndex: updateCurrentSongIndex,\r\n                }\r\n            }\r\n        }\r\n        case audioController.PLAY_THE_SONG_IN_PAGE: {\r\n            let songList = state['songList']\r\n            let cloneList = JSON.parse(JSON.stringify(songList))\r\n            let updateCurrentSongIndex = songList.findIndex((song) => song.id === action.songInfo.id)\r\n            let isTheSongNotExisted = updateCurrentSongIndex === -1\r\n            if (isTheSongNotExisted) {\r\n                cloneList.push(action.songInfo)\r\n                saveSongToLocalStorage(action.songInfo)\r\n                updateCurrentSongIndex = cloneList.length - 1\r\n            }\r\n            saveCurrentSongIndexInLocalStorage(updateCurrentSongIndex)\r\n            return {\r\n                ...state,\r\n                songList: cloneList,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentSongIndex: updateCurrentSongIndex,\r\n                    currentLyricIndex: -1,\r\n                },\r\n            }\r\n        }\r\n        case audioController.PLAY_THE_SONG_IN_LIST: {\r\n            saveCurrentSongIndexInLocalStorage(action.songIndex)\r\n            return {\r\n                ...state,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentSongIndex: action.songIndex,\r\n                    currentLyricIndex: -1,\r\n                    currentLyric: [],\r\n                }\r\n            }\r\n        }\r\n        case audioController.PLAY_NEXT_SONG: {\r\n            let modeType = action.modeType\r\n            let currentSongIndex = state.currentSongExtraInfo.currentSongIndex\r\n            let LengthOfSongList = state.songList.length\r\n            let mapModeTypeToNextStep = {\r\n                loop: action.loopStep,\r\n                circle: 0,\r\n                random: parseInt(LengthOfSongList * Math.random()),\r\n            }\r\n            let step = mapModeTypeToNextStep[modeType]\r\n            let nextSongIndex = (currentSongIndex + step + LengthOfSongList) % LengthOfSongList\r\n            let currentLyric = []\r\n            if (nextSongIndex === currentSongIndex) {\r\n                currentLyric = state.currentSongExtraInfo.currentLyric\r\n            }\r\n            saveCurrentSongIndexInLocalStorage(nextSongIndex)\r\n            return {\r\n                ...state,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentSongIndex: nextSongIndex,\r\n                    currentLyric,\r\n                    currentLyricIndex: -1,\r\n                },\r\n            }\r\n        }\r\n        case audioController.GET_LYRIC: {\r\n            return {\r\n                ...state,\r\n                currentSongExtraInfo: {\r\n                    ...state.currentSongExtraInfo,\r\n                    currentLyric: action.lyric,\r\n                },\r\n            }\r\n        }\r\n        case audioController.GET_CURRENT_INDEX: {\r\n            let index = action.currentLyricIndex\r\n            if (index === undefined) {\r\n                console.log('index undefined')\r\n                return {\r\n                    ...state,\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    currentSongExtraInfo: {\r\n                        ...state.currentSongExtraInfo,\r\n                        currentLyricIndex: index,\r\n                    },\r\n                }\r\n            }\r\n        }\r\n        case audioController.CHANGE_PLAY_MODE: {\r\n            return {\r\n                ...state,\r\n                playMode: action.modeType,\r\n            }\r\n        }\r\n        default: {\r\n            return state === undefined ? {} : state\r\n        }\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PlayerApp from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport Store from './Store'\n\nconst app = (\n    <Provider store={Store}>\n        <PlayerApp />\n    </Provider>\n)\n\nconst container = document.getElementById('root')\n\nReactDOM.render(app,container)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}